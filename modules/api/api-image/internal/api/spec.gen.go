// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYTW/jNhD9K8S0R2GV/ejFt2aTtgGadFEDe1nkwEhjm6lMajkjpYah/14MJVuUJdcO",
	"Npv24tgUOR/vPc6MsoXMrUtn0TLBbAuUrXCtw9drWxvv7Boty09dFH8sYPZlCz96XMAMfkj7o2l3Lr3D",
	"p/hck2yh9K5EzwaDVZPLJ29KhBkQe2OX0CRArLkKG9BWa5h9gcvKFLk8TeAXbQrMIYErZxHuk8PjTQIe",
	"v1bGYy4njWztDPab3cMjZgzNfZPEqc33jodxvmRAR2NJ4Np758feM5ej/M2RMm9KNs7CrN2swrMEFs6v",
	"NcMMjOX372Bv21jGJXoxvkYivTxmCE6F3TnaWRHgDuidjHtuTVki31xNEp1j2eqAcU2TO7oF7b3eyG9f",
	"WTZrjKm4czk+0mngh+H0prowpgi5w6c5EgWcTmY3RPUmR8tmYdArt1A6EKWo3a+eViZbdZ+GFK9QYY+k",
	"0kQuM5qDqp6TlLByPODCoD0jVomm3Tv2ngC15s8z020+mUVvNOnDvG9km7ELN3Z1hfWDc3+pnz/diHHD",
	"BfarkECNvgUB3r65eHMhgbsSrS4NzOB9WEqg1LwKyKTysUQe+/kNdcErla0wE7MCp5ZHNznM4FcUhDxS",
	"6Sy1GL+7uBgb+RO/VkisnjQpqrIMiRZVAU3IL0VbB64cBf9DF58c8bWtj7jJnOVdQS7LwmThYPpILf1t",
	"GZZvzynSTbiXcfzzfczFRmUeRZhK21iygVHWSxI20dYk7LXJUbodiLSJwB7heW1r+nhwT0vt9RoZPYWG",
	"YyQkoQ4SsFpKwfhm76XFvsIkAuJQhvffEdgDVJ+BUNr3m3+VxRCqrnm9AmBBzpcu33wPrLo0mmGNkLia",
	"AVm2KopJRLtiQkcv9e+GWOmiUPudEzd73j/7JoXsW9t5I9OueofJZNj8TlxMj1x5KzczzqxJ4KeX1HSY",
	"FSZCaaeRwhAbu4zcR6LfL0pqO10PrXwMxUXpnQHlbNdHfI1+RJNcgwFPLy/MaAI4qUgRx9sX8zxwe05B",
	"3nfbJoEPr8H5pc5Vh7l6cPlGdVPo62ou5B+J7pjm4tKQbvcTR9OqsEDGqTFD1s/WY7t9p8h5NNScLsnx",
	"CPQt/evDOIuBXNpU88F49rqEhQiEsEEIzyMt9bjwSKvQIiuemrnC89iHwr8Zrby0KcOkZPZX7FRhahxX",
	"lopHNHYm/1dsdjD8p3x2MZzLaL98mNmttnopZj7fxq15CCmFfyMcxBG9Oy2cV59v+2NhMBgfaaeM3XvK",
	"o3tQD90b/eHb2MAU1rogac7/BAAA//82ZmUUKxEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
