// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///f6Cbo6koAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
