name: Devbook API release

on:
  push:
    tags: [v*.*.*]

# TODO: Allow canceling the previous workflow if a new one is pending
# Make this workflow wait if there is a running workflow
concurrency: ${{ github.repository }}-${{ github.workflow }}

permissions:
  id-token: write
  contents: write

jobs:
  changes:
    name: Repository changes
    runs-on: ubuntu-20.04
    outputs:
      cluster_disk_image: ${{ steps.filter.outputs.cluster_disk_image }}
      api_image: ${{ steps.filter.outputs.api_image }}
      fc_env: ${{ steps.filter.outputs.fc_env }}
      devbookd: ${{ steps.filter.outputs.devbookd }}
      sdk: ${{ steps.filter.outputs.sdk }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get the last release
        id: last_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          latest: true
          prerelease: false
          draft: false

      - name: Find changes since the last release
        uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ steps.last_release.outputs.tag_name }}
          filters: |
            cluster_disk_image:
              - 'packages/cluster-disk-image/**'
              - '.github/workflows/cluster-disk-image.yml'
            fc_env:
              - 'packages/fc-env/**'
              - '.github/workflows/fc-env.yml'
            api_image:
              - 'packages/api/**'
              - '.github/workflows/api-image.yml'
            sdk:
              - 'packages/sdk/**'
              - '.github/workflows/sdk.yml'
            devbookd:
              - 'packages/devbookd/**'
              - '.github/workflows/devbookd.yml'

  cluster_disk_image:
    name: Cluster disk image
    needs: changes
    if: needs.changes.outputs.cluster_disk_image == 'true'
    uses: ./.github/workflows/cluster-disk-image.yml
    secrets:
      workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
      service_account_email: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

  devbookd:
    name: Devbook Daemon
    needs: changes
    if: needs.changes.outputs.devbookd == 'true'
    uses: ./.github/workflows/devbookd.yml
    secrets:
      workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
      service_account_email: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

  fc_env:
    name: FC env (pipeline scripts, devbookd)
    needs: changes
    if: needs.changes.outputs.fc_env == 'true'
    uses: ./.github/workflows/fc-env.yml
    secrets:
      workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
      service_account_email: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

  api_image:
    name: API image
    needs: changes
    if: needs.changes.outputs.api_image == 'true'
    uses: ./.github/workflows/api-image.yml
    secrets:
      workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
      service_account_email: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

  terraform:
    name: Terraform
    needs: [changes, cluster_disk_image, fc_env, api_image, devbookd]
    if: |
      always() &&
      needs.changes.result == 'success' &&
      (needs.cluster_disk_image.result == 'success' || needs.cluster_disk_image.result == 'skipped') &&
      (needs.fc_env.result == 'success' || needs.fc_env.result == 'skipped') &&
      (needs.devbookd.result == 'success' || needs.devbookd.result == 'skipped') &&
      (needs.api_image.result == 'success' || needs.api_image.result == 'skipped')
    uses: ./.github/workflows/terraform.yml
    secrets:
      workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
      service_account_email: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

    # TODO: Restart API when devbookd changes

  sdk:
    name: SDK
    needs: changes
    if: needs.changes.outputs.sdk == 'true'
    uses: ./.github/workflows/sdk.yml
    secrets:
      node_auth_token: ${{ secrets.NPM_TOKEN }}

  # The last succeesful release is used for determining which files' changes should be deployed in this release
  release:
    name: Release
    needs: [terraform, sdk]
    if: |
      always() &&
      needs.terraform.result == 'success' &&
      (needs.sdk.result == 'success' || needs.sdk.result == 'skipped')
    runs-on: ubuntu-20.04
    steps:
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          # TODO: Add release artifacts for devbookd
