// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWUWvbMBD+K+K2R9NkLXvxW9nKFlhZWaEvJRTNPsfqbMnVnVNC8H8fJzuxEydtYGXb",
	"i+NIp+/uvk/3JWtIXFk5i5YJ4jVQkmOpw+ulXd3pokaI100EV3ZpvLMlWpbNyrsKPRsMoYlL8YGsqSrk",
	"B5PKUoqUeFOxcRZimKVo2WQGvXKZ0koOqO6Aes5NkndPQ4pzVNhnU5rIJUYzphABryqEGIi9sQtoIkix",
	"CiUYxjK8jCK6Be29Xsl3X1s2pbQFaOsS4nuwLsVHgvkIX8LxqTYeU4nb77MH6wqZC1PeO3+YozExITjQ",
	"ARFkzpeaIQZj+eK879ZYxgV6Kb5EIr04BgSnNAA9ipR7i0QBYr9gajdO0FMU66JfrWCAOm9k09jMjRN8",
	"xuVP536py5uZQBousF+FCJbo26rhw9n0bCrUuAqtrgzEcBGWIqg056GViTwWyOM8X1EXnKskx0RgpX8t",
	"W7MUYviCLBIjVc5SS8r5dDoG+YFPNRKrZ02K6iRBoqwuoAn9TdAuA7mOQv7dFDeO+Mouj6RJnOVu4HRV",
	"FSYJByeP1OrVDqu8vfeYQQzvJv00T7pRngwnN1S0W/zttuBipRKPMmhK2+EIBhFZL0gElHbmobFOSjpK",
	"7jdDrHRRqG3kAYZv+70/omBrALoovmcQ37/MytbdmvnII14hySPX3gpLw9aaCD6+pWphng+U0jpGYYiN",
	"XQzSDyTaLkprm3u3i/IpCK30BkA5242xX6If6STX9K2EeqnrjRmdfE+3vvN36Q/5B/wfo384JpN1731N",
	"q0iBjIe8T9ZP1qYN36jTfc7S4H9el8joKYyDEXDxRIjA6jKYdO/GQ5tmX2M0YGrf0uf/wRVo2ft3VyDk",
	"P+UK9Mv7Ql9rqxcCcXc9tMhdbcRZRj/2g79HmfPq7ro/Jv7czJvfAQAA//9FUb/c2QkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
