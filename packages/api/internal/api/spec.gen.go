// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd62/bOpb/VwjtftgF3NjN7VzsBJgPado7W9ymEzRJZ4HeYEFLxzEnEqlLUkmMwP/7",
	"gC+JkqiHHefV5lMbieLjnN95kefQd1HMspxRoFJEB3dRjjnOQALXf+E4BiHO2BXQTx/UA0KjgyjHchlN",
	"IooziA4abSYRhz8LwiGJDiQvYBKJeAkZVh/LVa4+EJITehmt15MI5+R3WHV37V5v1uu8IGnS2al7u1mf",
	"lCXQ2aV9uVmPAtNkzm47O63eb9avhCxPseyerddgk57XqrHIGRWgsfFuNlP/xIxKoFKjJc9TEmNJGJ3+",
	"SzCqnlX9/SeHRXQQ/ce0AtzUvBXTj5wzbsZIQMSc5KqT6CB6jxOkpghCRutJ9G729uHHPCzkEqi0vSIw",
	"7dTg7x5+8C9MogUraGJG/OvDj3jE6CIlsabvXx6Dp6fAr4E7uq4d5jSojk7Oj1hhhm5M8+QcxYyDQAvG",
	"kVwCsgISTaIF4xmW0UFEqPxlP5pEGaEkK7Lo4O3E4ZhQCZegGXnEAUtIDivFpTUfZzlwSQy6Y9smMJMz",
	"koGQOMsRWyCj/ZBUvSD9kWrkTSnBEt5IkkE0aYrUJCJJu/tPiQLfggBX/auF+mP4XRcFSUK9ZlhcDXGn",
	"GuUYiytCLz+AxCQV6nujJ5rz+oIz6JhRawbSEbVBuSWgRZGmK2TJO9DR2tdP3yO9Wj05N4Jd68Rj10XF",
	"4DPA2eHJp99htT1/D08+oStYbc5aO8B7PTZO038sooPv/TxR8z0XCqMXk4gWaYrnKRjFPBordr5jYHJl",
	"6FLv8Su+Qdc4LaDdYauDFAt5LiAwr89YSKQog+SSiJKIN1igQn3QQcT6mp8E2Z3LDWHRNLQQtMCsI/Ej",
	"vf6GrS+VJEQNiNOTGhLrc/lIrwlnNAMq0TXmRJEjpPLaszP6tg10lgSWrBsj/S6gPtsqMwMh8GVXR4PU",
	"sgO5XhRlOtnUWoGiLyTfFChPOCzIbXsW5rnGFiIUmS/QNXChLLhlrdHRjHfB2RvntFgExzHP7zlO3r8I",
	"ucQSEUcd0eoS6Q4D/Wqx/Qz0Ui4DEqmf90+x5HeDe3bC9REmAb6EaKh4/ZkICcmpBW+LwTglOCAKh+px",
	"OWPrtAZVbUqASuPvDulH0zbYS16UrkeffildlPUkAtppQdDNEqgvtOiGpCmC25xwGG1FMsgYXx2/H5rU",
	"sWunv5E4wXLQQbP8OHbNmzHJECk7ldEkEhLzHusaoA0WyH40mjZCKjyMW+SpbtuKjoaW6FqjBWcZulmS",
	"eImIqM3c6vtBFViLuvzYrkSvTzYPjh4IHODc2pVsHXsIqS/HvGnaDqW3dFc9TvP+/4RswBe46XWZ7+s2",
	"Ngimu7sw43arjkKyE1wIO/ACF6mMDhY4FRAI61iGVVinHNBcfVTnJF5IMKRSiGOFpyXmjKWAqRH50qL3",
	"Rj+22T3lEeKCB4h6qp8jnKZIrISEDMUsywrqYtYbIpdt+fRWsZkYOLb0amFHNJ8Rb/8yCYm/ZCgl1xCC",
	"poCY0UTs9QJ0NmiyvPVZCPUFA7tzCyvQWreraelSFit1cXRyHhiwyOaG6GU7VIa94/y08kOrFkhALxxm",
	"Sq/UhzEqRusG8n7cUHFaCAl8rNnVjcf4+ArJJLQBoJ+7DhmPlyAkxzLkfjo3/DfnUXYRuq7F0UK392Mn",
	"QuWv74Lrr3YEhxZPjffbNmBm8I4Nj9YkQSBeUEroJWLU73gEs0RpBrkk9HJ4SNsQnbqxG+OER5FYFoOq",
	"UYnGqWmpvFbjPLcn863uVfczvCmGbkPWzqhB60ldEINiU4dQBwWr6Ze4dcJvwplAPIbjJSTvC5ImAWQq",
	"T1mt2LRCeq9aIJI0OE4kZCKwSVvSBXOOV69SukMphR5uDQloya4+sagHSQFWPn/p0lqiBvCmFHWKy2m5",
	"uIano583eARUeQHfIw44UTY54ZgosutuKYVYmj8KugScyuUquggwthr2aInpZcBcb07xBqVsB2qRX0EU",
	"WV8Q/Oie7BM7bIomRlosTf5J5PIYJCexeN0jeL57BFnFonFfchK/uL2FH2KbQKmdZ77pBvS6eQ7XmI9/",
	"vqb3XZUOUp/VQ96uzr+NNIC6R2e9CR0E4Y7A/Kxx5tPPw1KXZ/uqojvVyUuF+ev28+v2c//2s13gZ3YZ",
	"CI/YJQIq+crsR8ryXB3TBKWEKrLWVYh+GOxHvUEuL6Vj91F3PnCer2iXunmN5HWTlOVQEzPhOh0Czmtq",
	"n7aWJdpgHhUrelRvBYqN2eqxvRkee+I57kjafTEoeLVBlNcX6oqTeENQ+Bq9a4dgw23SOC/OBSQncUei",
	"USHwJaAceAxU4suaol+kDHsQpHoOVlmeMYnTAALVY2+Pdb6SrZl27F9kkIVTLOzpjjuK3qDLTUQl8xh2",
	"f2nxlIrHgWqRHg09xJ46RdveGYA2Jsu9AWPkFJqwzjkJbQGcAc4CjoxOOw0YaZvG4qJgqb4OZXWJDy6e",
	"bnbxzyXIJVSfO3VuA/BGl16wPnxE0TUb9XysuQn10DIkursy38USy1/1haXsa+5VZ+7VT586ZdETTN8r",
	"edFCDmQ28mgkIanHbhqFAL59rqX9eoCBoRWZuZn52yAnHCJBV5AEoTBp/Fa/PiwYtJRaH9e9S4Ut9bEc",
	"Zzy99PohaiqYI1Ho4GZRpOY8Q+vPS3KtfPC+cHCLQG5As1SOf23tlQ/9ROpFkek0xzd046lrAvfphZ2E",
	"dHkxT0PuXN2a2WkRgUx7xDhiNF3ZtA8yTwHNVwFL45k5oaiwLYabdOhxgbYKw0LkLPJkC8QZtplPt3Sr",
	"/HiuKmkJh22Wf758+DP3Ed0EY40lNR3jazp92tNWdxtoCt00aCnL2Mm6VN8vWkUiWqvohpvoSw5YhLZM",
	"jk2Wqo1PlHNpzqBM+wmKC86BynSFOOTMHJNrnOstG51YWx6MBXcNhs+5PMQ5f1YTyDi0N5jYAy53AGZq",
	"KS52tsG4LfzKdZdRZw0hX20lz+63DrewFQmLr4AvSBpwaz6U7zxnv3v4bXSqZt1RFnBKvqo3KF5CfKU3",
	"/1RgLBmCW4gLpV8b+qQ67OuUIb2xExxLpzPsaJQdBxoef3wgnWu11YmkxzJVarZmKlsklsENUm9KbG2Y",
	"XeYSA4lcnSpkmbG8/eXDwqSAzwFz4L8562IW9/8u/VKjUi9KN6tGX0qZK4YeJhmhtQ51NeEScGKSREw9",
	"4f+90Q3fnNXTOm1gqPrR/xvq4+TTm999GlTfnxY5nmMBb8fMxTXuno5rsa85N7a3GgxcZ4oVhC6YtjdE",
	"KlUSfdx/rxjqJTscRLO9t3szNTbLgeKcRAfRL3uzvZnenZBLzb+pYc8bzR6DZSZC+1MmCQYjCjfNjFqF",
	"PR0qf0qig+iECemhQthyTxDyPUtWOyv0a+QFr+uotS5urXR0f4dlnIFivlBNZ6tMDxIvMElXXnVpaLRy",
	"+lPVqKqU7G+rGvnSqsOEEJq/X6i4QGLl6nyP6kDQ8l4Hx/SuVnS9NiBJIbRN9kE/R5j2Y8U089Fy2Kjr",
	"9ivDO6Kdqsm0XhWuVtdAwLuBQzCznvsxyVbsDrV99yQMzcmbK1hpalyC7Eguw2lq9gmtiRAtxv0dpNGv",
	"RrxrNN6smHfUyYNn7donD+1SX495iIMsOIUksKgnFr6gTWiw0LFL+SIjFLO/vrBi9pj2IDrZ59STqOTm",
	"BBrRsUegZ6mRNwOFL9LTO3dxxSjN3I8Vq5gNWg6rCzE2VMfuw3GauMacl66JN5ZuLONABaXx9ofYdaI+",
	"3jG3dq8eWpHLKA0xGwCK3VH6SYCiJN6kF3ea8P/Vr00oHzLc5n00htA24DWZKiV9N6OuZvKUsgRGeB2m",
	"WWDSX+yL3fga47bPdTXV+uJeHodZ0KMZlWbw3MCRemtBpCc2vTNZ9etOzvwdpF4D0gFnF2O+uNz8zTSO",
	"TekPWIfdXQjjVcWMZlyZ9P8s1cg4Hnf6i7rqwO0us4XyHE19Q9tb3BlvH8DVbJZRrNt3RYWdDMtbRwF9",
	"FKe7eAkmZLx81wqI+pWuy8z062lacu6X5DWQ0JG49WcBLlVIMrQgqdvLrQqX/gv2LvfQH1EhgP8Nz+M/",
	"itls/1ec53/LOUv+iP57D33E8VLbeUwTc0eMQFkhJJoDOv/6GQGNWQLJXjQxu2l61GozrcwL7btk7OJx",
	"7Uqj5up+BqbNPA3G2Rgwzh7RMHm7sd8v1pN7eEPVSkdExS5jVeeyNk5U2grPB/kDBcgl2x83Oq4N29aI",
	"fkpyd1j8k4Cqpj6nXuXRhmrUnOW67/t06nHZ5lW13ku1dtf27VrN1pn784rHXZnW37vt9DtJ00odd+w3",
	"lfJw6pUKbOZ2VkUGI/ecGsrviqTpy/AEH8qgdoaBlTGdr5BOPuxWaA/EwNmu7eE2kaGoiuV/Glh0yvzU",
	"ZUp1wsaBxmZKjcDMZ9Nya9xMgvkmSnvLQFGOMHffiSUr0kSZvpLZhKKMpCmxxeYdZlCnudRsYCsVsP8K",
	"oZaVx7eqNaJl5mHfLDtmlZKM1GdVVdvPZrNNy+YfQRQ117cRRIOsV2lU0pi7uxzCYZG+6qFRutITBZUS",
	"aa6IeGxbbEpoarZYu6oxpkYC9N0WD8l5exX2UNu/vjCUcFhwEEvoyff5aprU5AxuJdBE1/BKYatFzBUd",
	"I2H0tRz3vlDaLjSvp8klhZlw4IzUvtGpcqYA1qdDpYSvIFexH7kG71ISXWBya3TpL78qXTtwhZx9xOb/",
	"gliO3shs6EVD2UfyUJ4BgpXs98FXvd9C05kPnwifvZFt/Saf57t9ZNXyo4VQP6iO9u5JCkP8FKR/2VLz",
	"lqQ9dBa+PgLdOkXlbYqSqqDOgncPHeE01U7zkgiUgVyyBGVFKkmegi2GYdfAbziRti7m7OzzBAGOTYE1",
	"KoT5HFzxgl93LVyRg/HMc0bUe4YywKLgUFua09R7I4X4rLx/6umtTO2+q2ahjlpcZTgqfvj0sknwnWao",
	"fSnINjeX2lle7MQaCQtNN1PX+8/mo0vA2chUy2BofGZfPOYOqk45v+dmqVnQ4+1zNmsQ+thYOy9Vzxyr",
	"zLHQKHa5pkGWVS8byicUppd17X6cvlUZy8Vjw8Qeo90bKo5ezx8u1VxHp+P2nDX6SHkIhzFYAzfKbdzf",
	"+Ry6/EZTma28RhzHkEsXzT+7k5RdQKamZqZ3VTHj2HzdDjCZFiWczvwiyc38H6++cvyOTa3EeBdZu08v",
	"2b2puN1CrT57EDY8nHKo1zVunY/bqonvzMn9ISV70rkLYRQcpiNNwcsAzUu0KD+AlZiae9mnd7byfd2z",
	"N6ALrP266VGgM9dnvy8L67dH4GSwtSvfDxia/bCGMaxdepcm/rCcnVYXNnSeq5YK19ClKz97iM2n7vKE",
	"R2F267DzE03gtrxPze0Gzd3dGp1ns+U1Gf6lRaFzUHYp/rFYCOg4DH1WJ6H1i002OgstyfA891h2JT/X",
	"+5skNvcmNH/b/5FTmluC9puZbDXR+QoxCohxlDFu0uE1JeA2T/XPCNlfAejIedASt2EZb+te2tZvTaz0",
	"ZQZKIgO64qjggnFFeVHat1TxesFZ1kEsCrfyzL96Yhy12jkYeoFqbCN2KAeOcnNJ547yL9yZoXnf92PC",
	"rwnrLzd5Uo/Dr52iKXhq7z4RB9Mpzske7M/3cJ5HXg93zR9RF1o66j/ZXn+otzb9v2uXAfgvXG3h+mL9",
	"7wAAAP//2OrqJZd/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
