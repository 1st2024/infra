// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUQW/UTAz9KyN/3zFqllZccqsAwUpUVFTqparQkDjZgWRmajtFq1X+O5qZ7Cbt7rZF",
	"QsClzdoe+9nPfhsoXeedRSsMxQa4XGGn4+e5XV/rtkcoNkMG74gcBbMn55HEYAwqXRUCoEIuyXgxzkKR",
	"glX0ZVA76rRAAcbK2SlkIGuP6Sc2SDBk0CGzbo4m2rp3T1nI2AaGIQPCu94QVlDcwFhwG347ZHCFzDHV",
	"Y+CcHF9MtV91WaEVUxsk5WolK1Rj9LMIZllvh+A0tnb7Bd7i/Vfnvqvzy2VIaaTFyQoZ3CMl1PDqZHGy",
	"CCNyHq32Bgo4i6YMvJZVbCUPfxqU/TofULeyUuUKy5A29K+Da1lBAe9RIKBn7yynoZwuFvtJPuNdjyzq",
	"h2bFfVkic923MMT+8rFjPorho2FRum3VLvIAkKvJdwhQ6aygjcm1960p4+P8Gydm09KGLyPYxYe6bT/V",
	"UNxs4H/CGgr4L58WPR+3PN+t+BB2ZaRWE+k1xO4ednK1a75dK0LpyWL1sLUhg9e/CPkpfOnoDkBJd9Ea",
	"FmObWfnQhW54toocz8A7PkDNG0ItqPQ2gXJ23Ha6R9rj6dLxbyPqqa63N/scBWWEX034//D4Y/3Z/I+N",
	"f34m+WaSiCEx0qLgIYkI9hdzk8K37Iz/l1WUCdIdChLHczAheZAOyMDqLmrZJFpzNRPqMZtN6rHy3f4D",
	"K5Cm9/dWINZ/yQpM5sdEX2irm5Di+mIukQ+54aBQPwMAAP//vFm6FKwHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
