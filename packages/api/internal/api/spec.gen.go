// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
