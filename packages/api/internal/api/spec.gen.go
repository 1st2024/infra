// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1tT/u9Y/zH/h2pE8Xj3+XwAAAP//jZlJNpuVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
