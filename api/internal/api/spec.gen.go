// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
