// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
