// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYb2/bthP+KsT9fi/VyP0zoPC7Nmk3A0sazFjfFMbASCeLGUVy5MlZYOi7D6RkWX+s",
	"2mndbG9amaLunnvu4d0xW0h0YbRCRQ7mW3BJjgUPj1cokfCD2girVYGK/KKx2qAlgWFLolNcKmEM0uLK",
	"L9CjQZiDIyvUGqoqAot/lcJiCvMvg+2raLdd391jQlBFMPDGpfyUwfzLFv5vMYM5/C/ew40brPENPnS/",
	"q6IhTJEewBaBI07o36AqC4/vfSlk6l9G8JELiSlEcKUVdqBORCb81treOKxVP7Cl3/a7SRvnT2P0rKj7",
	"zqYDiOCDtdoeRuv/T9ElVhgSWsG83szCuwgybQtOMAeh6PUraG0LRbhG640X6BxfTxmCU6KAvRXP9kAR",
	"38ByiqaWDmHhDu5oFri1/DH8xsLIQWpudIr37umJaG01QA6l5AYfluhcYOpofH1eFykqEplAy3TGeEgV",
	"c/V+9pCLJG/+FY5Rjgz3XDLunE4EpyCzsTj5Bj8uL3Ou1jWSFDNeSoJ5xqXDaADkU3hgKRLaQiih1kxk",
	"wWVSm2Ckw89MSHSPjrBgLtelTNkdMu+sg+JOa4lcHas6VQTTvEmB6gTKAsKw9yAJtfnTzDSbj6p8bzTa",
	"w1xVfptQmR67usLNndZ/sne3C29ckMT9KkSwQVuTAC8vZhczD1wbVNwImMPrsBSB4ZQHZmJUmyahviv4",
	"J08c984WaTDcdAsHNXB09F6nj7UcFe0qujFSJOGz+N7VOajruH/6WpUft6OqzxHZEsOCM1o5n1BVShkB",
	"8bXzDIYIfPqNdjQO4FY7auG3JrbwajY7WwzDTlVVwxOxLJMEnctKKR9ZYtEfNMZV9wgGaQyCqqI6Q3Hb",
	"Hb4eZOhBPyhRE63u27LVBrbtHePKg1jjgQh/xhDg5aCiGm554cuMC+OE8Fx7cUMEihf+ZAxrcB9q1Al+",
	"eFBXP1AxA7lMpD5HLinvcNIX1S/hNUtyTPzJHxFWv58Qft/Ub7Vg2AN3zLVahRpZ3BQpN4nkV+GIcSlZ",
	"u/MAnOX+3Xfx2vbu08bIXVcI81q/ux85pxaptMof1G5kVQQ/nVMJYRg6AKUet6Rw5Pvn3n1HKu1it/z1",
	"rVyGWsP4zgDTqulPdoN2lCZfSHp5On8d6Qw4R2uHF8fLs3nuuT2lPrddvIrgzXPk/D1PWcP5M+ssxNwR",
	"2pTOuuUg3rbTS9WfIYYji18/WYP19p0Kl50B6Xi1745T31Pp34yj6EmkDjXtjXrPm7CAwCesB+FpSYst",
	"ZhZd6DCmpENtIbzv+mD4N6FKw0xPjpEo0E/zUmxwXE1KGqWxMfmfymZDwzifb+pPnyOfDYbOEWQv2iel",
	"iWW6VOlkhsP9xB+nmsy+h3e3C4YqNVqEm01pJcwhJzJuHsdapfXl4SLRRRz+zDKgapf4xgJ7EJTrkpgz",
	"mPhLT8qMtmPDHaG92O7uNtXFwF8EG24Fv5OHrmrNJRP+aJeH5C2uBhe38UWtNdKV05QV1+kRJxGxYyGZ",
	"pMGvVi/+NTYCqN73b2dvZ6NPb7Ulf5ATrRQm/vGMVK5a0Q45veaKr73oP193h8d+AXAHVNmZoFmmLft8",
	"vf8sjNDVqvonAAD//5QLtJYGFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
