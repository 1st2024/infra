// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/env"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/envalias"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/internal"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/predicate"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/team"
	"github.com/google/uuid"
)

// EnvUpdate is the builder for updating Env entities.
type EnvUpdate struct {
	config
	hooks     []Hook
	mutation  *EnvMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EnvUpdate builder.
func (eu *EnvUpdate) Where(ps ...predicate.Env) *EnvUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EnvUpdate) SetUpdatedAt(t time.Time) *EnvUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableUpdatedAt(t *time.Time) *EnvUpdate {
	if t != nil {
		eu.SetUpdatedAt(*t)
	}
	return eu
}

// SetTeamID sets the "team_id" field.
func (eu *EnvUpdate) SetTeamID(u uuid.UUID) *EnvUpdate {
	eu.mutation.SetTeamID(u)
	return eu
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableTeamID(u *uuid.UUID) *EnvUpdate {
	if u != nil {
		eu.SetTeamID(*u)
	}
	return eu
}

// SetDockerfile sets the "dockerfile" field.
func (eu *EnvUpdate) SetDockerfile(s string) *EnvUpdate {
	eu.mutation.SetDockerfile(s)
	return eu
}

// SetNillableDockerfile sets the "dockerfile" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableDockerfile(s *string) *EnvUpdate {
	if s != nil {
		eu.SetDockerfile(*s)
	}
	return eu
}

// SetPublic sets the "public" field.
func (eu *EnvUpdate) SetPublic(b bool) *EnvUpdate {
	eu.mutation.SetPublic(b)
	return eu
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (eu *EnvUpdate) SetNillablePublic(b *bool) *EnvUpdate {
	if b != nil {
		eu.SetPublic(*b)
	}
	return eu
}

// SetBuildID sets the "build_id" field.
func (eu *EnvUpdate) SetBuildID(u uuid.UUID) *EnvUpdate {
	eu.mutation.SetBuildID(u)
	return eu
}

// SetNillableBuildID sets the "build_id" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableBuildID(u *uuid.UUID) *EnvUpdate {
	if u != nil {
		eu.SetBuildID(*u)
	}
	return eu
}

// SetBuildCount sets the "build_count" field.
func (eu *EnvUpdate) SetBuildCount(i int32) *EnvUpdate {
	eu.mutation.ResetBuildCount()
	eu.mutation.SetBuildCount(i)
	return eu
}

// SetNillableBuildCount sets the "build_count" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableBuildCount(i *int32) *EnvUpdate {
	if i != nil {
		eu.SetBuildCount(*i)
	}
	return eu
}

// AddBuildCount adds i to the "build_count" field.
func (eu *EnvUpdate) AddBuildCount(i int32) *EnvUpdate {
	eu.mutation.AddBuildCount(i)
	return eu
}

// SetSpawnCount sets the "spawn_count" field.
func (eu *EnvUpdate) SetSpawnCount(i int64) *EnvUpdate {
	eu.mutation.ResetSpawnCount()
	eu.mutation.SetSpawnCount(i)
	return eu
}

// SetNillableSpawnCount sets the "spawn_count" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableSpawnCount(i *int64) *EnvUpdate {
	if i != nil {
		eu.SetSpawnCount(*i)
	}
	return eu
}

// AddSpawnCount adds i to the "spawn_count" field.
func (eu *EnvUpdate) AddSpawnCount(i int64) *EnvUpdate {
	eu.mutation.AddSpawnCount(i)
	return eu
}

// SetLastSpawnedAt sets the "last_spawned_at" field.
func (eu *EnvUpdate) SetLastSpawnedAt(t time.Time) *EnvUpdate {
	eu.mutation.SetLastSpawnedAt(t)
	return eu
}

// SetNillableLastSpawnedAt sets the "last_spawned_at" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableLastSpawnedAt(t *time.Time) *EnvUpdate {
	if t != nil {
		eu.SetLastSpawnedAt(*t)
	}
	return eu
}

// ClearLastSpawnedAt clears the value of the "last_spawned_at" field.
func (eu *EnvUpdate) ClearLastSpawnedAt() *EnvUpdate {
	eu.mutation.ClearLastSpawnedAt()
	return eu
}

// SetVcpu sets the "vcpu" field.
func (eu *EnvUpdate) SetVcpu(i int64) *EnvUpdate {
	eu.mutation.ResetVcpu()
	eu.mutation.SetVcpu(i)
	return eu
}

// SetNillableVcpu sets the "vcpu" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableVcpu(i *int64) *EnvUpdate {
	if i != nil {
		eu.SetVcpu(*i)
	}
	return eu
}

// AddVcpu adds i to the "vcpu" field.
func (eu *EnvUpdate) AddVcpu(i int64) *EnvUpdate {
	eu.mutation.AddVcpu(i)
	return eu
}

// SetRAMMB sets the "ram_mb" field.
func (eu *EnvUpdate) SetRAMMB(i int64) *EnvUpdate {
	eu.mutation.ResetRAMMB()
	eu.mutation.SetRAMMB(i)
	return eu
}

// SetNillableRAMMB sets the "ram_mb" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableRAMMB(i *int64) *EnvUpdate {
	if i != nil {
		eu.SetRAMMB(*i)
	}
	return eu
}

// AddRAMMB adds i to the "ram_mb" field.
func (eu *EnvUpdate) AddRAMMB(i int64) *EnvUpdate {
	eu.mutation.AddRAMMB(i)
	return eu
}

// SetFreeDiskSizeMB sets the "free_disk_size_mb" field.
func (eu *EnvUpdate) SetFreeDiskSizeMB(i int64) *EnvUpdate {
	eu.mutation.ResetFreeDiskSizeMB()
	eu.mutation.SetFreeDiskSizeMB(i)
	return eu
}

// SetNillableFreeDiskSizeMB sets the "free_disk_size_mb" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableFreeDiskSizeMB(i *int64) *EnvUpdate {
	if i != nil {
		eu.SetFreeDiskSizeMB(*i)
	}
	return eu
}

// AddFreeDiskSizeMB adds i to the "free_disk_size_mb" field.
func (eu *EnvUpdate) AddFreeDiskSizeMB(i int64) *EnvUpdate {
	eu.mutation.AddFreeDiskSizeMB(i)
	return eu
}

// SetTotalDiskSizeMB sets the "total_disk_size_mb" field.
func (eu *EnvUpdate) SetTotalDiskSizeMB(i int64) *EnvUpdate {
	eu.mutation.ResetTotalDiskSizeMB()
	eu.mutation.SetTotalDiskSizeMB(i)
	return eu
}

// SetNillableTotalDiskSizeMB sets the "total_disk_size_mb" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableTotalDiskSizeMB(i *int64) *EnvUpdate {
	if i != nil {
		eu.SetTotalDiskSizeMB(*i)
	}
	return eu
}

// AddTotalDiskSizeMB adds i to the "total_disk_size_mb" field.
func (eu *EnvUpdate) AddTotalDiskSizeMB(i int64) *EnvUpdate {
	eu.mutation.AddTotalDiskSizeMB(i)
	return eu
}

// SetKernelVersion sets the "kernel_version" field.
func (eu *EnvUpdate) SetKernelVersion(s string) *EnvUpdate {
	eu.mutation.SetKernelVersion(s)
	return eu
}

// SetNillableKernelVersion sets the "kernel_version" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableKernelVersion(s *string) *EnvUpdate {
	if s != nil {
		eu.SetKernelVersion(*s)
	}
	return eu
}

// SetFirecrackerVersion sets the "firecracker_version" field.
func (eu *EnvUpdate) SetFirecrackerVersion(s string) *EnvUpdate {
	eu.mutation.SetFirecrackerVersion(s)
	return eu
}

// SetNillableFirecrackerVersion sets the "firecracker_version" field if the given value is not nil.
func (eu *EnvUpdate) SetNillableFirecrackerVersion(s *string) *EnvUpdate {
	if s != nil {
		eu.SetFirecrackerVersion(*s)
	}
	return eu
}

// SetTeam sets the "team" edge to the Team entity.
func (eu *EnvUpdate) SetTeam(t *Team) *EnvUpdate {
	return eu.SetTeamID(t.ID)
}

// AddEnvAliasIDs adds the "env_aliases" edge to the EnvAlias entity by IDs.
func (eu *EnvUpdate) AddEnvAliasIDs(ids ...string) *EnvUpdate {
	eu.mutation.AddEnvAliasIDs(ids...)
	return eu
}

// AddEnvAliases adds the "env_aliases" edges to the EnvAlias entity.
func (eu *EnvUpdate) AddEnvAliases(e ...*EnvAlias) *EnvUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEnvAliasIDs(ids...)
}

// Mutation returns the EnvMutation object of the builder.
func (eu *EnvUpdate) Mutation() *EnvMutation {
	return eu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (eu *EnvUpdate) ClearTeam() *EnvUpdate {
	eu.mutation.ClearTeam()
	return eu
}

// ClearEnvAliases clears all "env_aliases" edges to the EnvAlias entity.
func (eu *EnvUpdate) ClearEnvAliases() *EnvUpdate {
	eu.mutation.ClearEnvAliases()
	return eu
}

// RemoveEnvAliasIDs removes the "env_aliases" edge to EnvAlias entities by IDs.
func (eu *EnvUpdate) RemoveEnvAliasIDs(ids ...string) *EnvUpdate {
	eu.mutation.RemoveEnvAliasIDs(ids...)
	return eu
}

// RemoveEnvAliases removes "env_aliases" edges to EnvAlias entities.
func (eu *EnvUpdate) RemoveEnvAliases(e ...*EnvAlias) *EnvUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEnvAliasIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnvUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnvUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnvUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnvUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EnvUpdate) check() error {
	if _, ok := eu.mutation.TeamID(); eu.mutation.TeamCleared() && !ok {
		return errors.New(`models: clearing a required unique edge "Env.team"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EnvUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EnvUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EnvUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(env.Table, env.Columns, sqlgraph.NewFieldSpec(env.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(env.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Dockerfile(); ok {
		_spec.SetField(env.FieldDockerfile, field.TypeString, value)
	}
	if value, ok := eu.mutation.Public(); ok {
		_spec.SetField(env.FieldPublic, field.TypeBool, value)
	}
	if value, ok := eu.mutation.BuildID(); ok {
		_spec.SetField(env.FieldBuildID, field.TypeUUID, value)
	}
	if value, ok := eu.mutation.BuildCount(); ok {
		_spec.SetField(env.FieldBuildCount, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedBuildCount(); ok {
		_spec.AddField(env.FieldBuildCount, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.SpawnCount(); ok {
		_spec.SetField(env.FieldSpawnCount, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedSpawnCount(); ok {
		_spec.AddField(env.FieldSpawnCount, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.LastSpawnedAt(); ok {
		_spec.SetField(env.FieldLastSpawnedAt, field.TypeTime, value)
	}
	if eu.mutation.LastSpawnedAtCleared() {
		_spec.ClearField(env.FieldLastSpawnedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.Vcpu(); ok {
		_spec.SetField(env.FieldVcpu, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedVcpu(); ok {
		_spec.AddField(env.FieldVcpu, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.RAMMB(); ok {
		_spec.SetField(env.FieldRAMMB, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedRAMMB(); ok {
		_spec.AddField(env.FieldRAMMB, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.FreeDiskSizeMB(); ok {
		_spec.SetField(env.FieldFreeDiskSizeMB, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedFreeDiskSizeMB(); ok {
		_spec.AddField(env.FieldFreeDiskSizeMB, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.TotalDiskSizeMB(); ok {
		_spec.SetField(env.FieldTotalDiskSizeMB, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedTotalDiskSizeMB(); ok {
		_spec.AddField(env.FieldTotalDiskSizeMB, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.KernelVersion(); ok {
		_spec.SetField(env.FieldKernelVersion, field.TypeString, value)
	}
	if value, ok := eu.mutation.FirecrackerVersion(); ok {
		_spec.SetField(env.FieldFirecrackerVersion, field.TypeString, value)
	}
	if eu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   env.TeamTable,
			Columns: []string{env.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = eu.schemaConfig.Env
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   env.TeamTable,
			Columns: []string{env.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = eu.schemaConfig.Env
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvAliasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   env.EnvAliasesTable,
			Columns: []string{env.EnvAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(envalias.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EnvAlias
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvAliasesIDs(); len(nodes) > 0 && !eu.mutation.EnvAliasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   env.EnvAliasesTable,
			Columns: []string{env.EnvAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(envalias.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EnvAlias
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvAliasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   env.EnvAliasesTable,
			Columns: []string{env.EnvAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(envalias.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EnvAlias
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = eu.schemaConfig.Env
	ctx = internal.NewSchemaConfigContext(ctx, eu.schemaConfig)
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{env.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EnvUpdateOne is the builder for updating a single Env entity.
type EnvUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EnvMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EnvUpdateOne) SetUpdatedAt(t time.Time) *EnvUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableUpdatedAt(t *time.Time) *EnvUpdateOne {
	if t != nil {
		euo.SetUpdatedAt(*t)
	}
	return euo
}

// SetTeamID sets the "team_id" field.
func (euo *EnvUpdateOne) SetTeamID(u uuid.UUID) *EnvUpdateOne {
	euo.mutation.SetTeamID(u)
	return euo
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableTeamID(u *uuid.UUID) *EnvUpdateOne {
	if u != nil {
		euo.SetTeamID(*u)
	}
	return euo
}

// SetDockerfile sets the "dockerfile" field.
func (euo *EnvUpdateOne) SetDockerfile(s string) *EnvUpdateOne {
	euo.mutation.SetDockerfile(s)
	return euo
}

// SetNillableDockerfile sets the "dockerfile" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableDockerfile(s *string) *EnvUpdateOne {
	if s != nil {
		euo.SetDockerfile(*s)
	}
	return euo
}

// SetPublic sets the "public" field.
func (euo *EnvUpdateOne) SetPublic(b bool) *EnvUpdateOne {
	euo.mutation.SetPublic(b)
	return euo
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillablePublic(b *bool) *EnvUpdateOne {
	if b != nil {
		euo.SetPublic(*b)
	}
	return euo
}

// SetBuildID sets the "build_id" field.
func (euo *EnvUpdateOne) SetBuildID(u uuid.UUID) *EnvUpdateOne {
	euo.mutation.SetBuildID(u)
	return euo
}

// SetNillableBuildID sets the "build_id" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableBuildID(u *uuid.UUID) *EnvUpdateOne {
	if u != nil {
		euo.SetBuildID(*u)
	}
	return euo
}

// SetBuildCount sets the "build_count" field.
func (euo *EnvUpdateOne) SetBuildCount(i int32) *EnvUpdateOne {
	euo.mutation.ResetBuildCount()
	euo.mutation.SetBuildCount(i)
	return euo
}

// SetNillableBuildCount sets the "build_count" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableBuildCount(i *int32) *EnvUpdateOne {
	if i != nil {
		euo.SetBuildCount(*i)
	}
	return euo
}

// AddBuildCount adds i to the "build_count" field.
func (euo *EnvUpdateOne) AddBuildCount(i int32) *EnvUpdateOne {
	euo.mutation.AddBuildCount(i)
	return euo
}

// SetSpawnCount sets the "spawn_count" field.
func (euo *EnvUpdateOne) SetSpawnCount(i int64) *EnvUpdateOne {
	euo.mutation.ResetSpawnCount()
	euo.mutation.SetSpawnCount(i)
	return euo
}

// SetNillableSpawnCount sets the "spawn_count" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableSpawnCount(i *int64) *EnvUpdateOne {
	if i != nil {
		euo.SetSpawnCount(*i)
	}
	return euo
}

// AddSpawnCount adds i to the "spawn_count" field.
func (euo *EnvUpdateOne) AddSpawnCount(i int64) *EnvUpdateOne {
	euo.mutation.AddSpawnCount(i)
	return euo
}

// SetLastSpawnedAt sets the "last_spawned_at" field.
func (euo *EnvUpdateOne) SetLastSpawnedAt(t time.Time) *EnvUpdateOne {
	euo.mutation.SetLastSpawnedAt(t)
	return euo
}

// SetNillableLastSpawnedAt sets the "last_spawned_at" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableLastSpawnedAt(t *time.Time) *EnvUpdateOne {
	if t != nil {
		euo.SetLastSpawnedAt(*t)
	}
	return euo
}

// ClearLastSpawnedAt clears the value of the "last_spawned_at" field.
func (euo *EnvUpdateOne) ClearLastSpawnedAt() *EnvUpdateOne {
	euo.mutation.ClearLastSpawnedAt()
	return euo
}

// SetVcpu sets the "vcpu" field.
func (euo *EnvUpdateOne) SetVcpu(i int64) *EnvUpdateOne {
	euo.mutation.ResetVcpu()
	euo.mutation.SetVcpu(i)
	return euo
}

// SetNillableVcpu sets the "vcpu" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableVcpu(i *int64) *EnvUpdateOne {
	if i != nil {
		euo.SetVcpu(*i)
	}
	return euo
}

// AddVcpu adds i to the "vcpu" field.
func (euo *EnvUpdateOne) AddVcpu(i int64) *EnvUpdateOne {
	euo.mutation.AddVcpu(i)
	return euo
}

// SetRAMMB sets the "ram_mb" field.
func (euo *EnvUpdateOne) SetRAMMB(i int64) *EnvUpdateOne {
	euo.mutation.ResetRAMMB()
	euo.mutation.SetRAMMB(i)
	return euo
}

// SetNillableRAMMB sets the "ram_mb" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableRAMMB(i *int64) *EnvUpdateOne {
	if i != nil {
		euo.SetRAMMB(*i)
	}
	return euo
}

// AddRAMMB adds i to the "ram_mb" field.
func (euo *EnvUpdateOne) AddRAMMB(i int64) *EnvUpdateOne {
	euo.mutation.AddRAMMB(i)
	return euo
}

// SetFreeDiskSizeMB sets the "free_disk_size_mb" field.
func (euo *EnvUpdateOne) SetFreeDiskSizeMB(i int64) *EnvUpdateOne {
	euo.mutation.ResetFreeDiskSizeMB()
	euo.mutation.SetFreeDiskSizeMB(i)
	return euo
}

// SetNillableFreeDiskSizeMB sets the "free_disk_size_mb" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableFreeDiskSizeMB(i *int64) *EnvUpdateOne {
	if i != nil {
		euo.SetFreeDiskSizeMB(*i)
	}
	return euo
}

// AddFreeDiskSizeMB adds i to the "free_disk_size_mb" field.
func (euo *EnvUpdateOne) AddFreeDiskSizeMB(i int64) *EnvUpdateOne {
	euo.mutation.AddFreeDiskSizeMB(i)
	return euo
}

// SetTotalDiskSizeMB sets the "total_disk_size_mb" field.
func (euo *EnvUpdateOne) SetTotalDiskSizeMB(i int64) *EnvUpdateOne {
	euo.mutation.ResetTotalDiskSizeMB()
	euo.mutation.SetTotalDiskSizeMB(i)
	return euo
}

// SetNillableTotalDiskSizeMB sets the "total_disk_size_mb" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableTotalDiskSizeMB(i *int64) *EnvUpdateOne {
	if i != nil {
		euo.SetTotalDiskSizeMB(*i)
	}
	return euo
}

// AddTotalDiskSizeMB adds i to the "total_disk_size_mb" field.
func (euo *EnvUpdateOne) AddTotalDiskSizeMB(i int64) *EnvUpdateOne {
	euo.mutation.AddTotalDiskSizeMB(i)
	return euo
}

// SetKernelVersion sets the "kernel_version" field.
func (euo *EnvUpdateOne) SetKernelVersion(s string) *EnvUpdateOne {
	euo.mutation.SetKernelVersion(s)
	return euo
}

// SetNillableKernelVersion sets the "kernel_version" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableKernelVersion(s *string) *EnvUpdateOne {
	if s != nil {
		euo.SetKernelVersion(*s)
	}
	return euo
}

// SetFirecrackerVersion sets the "firecracker_version" field.
func (euo *EnvUpdateOne) SetFirecrackerVersion(s string) *EnvUpdateOne {
	euo.mutation.SetFirecrackerVersion(s)
	return euo
}

// SetNillableFirecrackerVersion sets the "firecracker_version" field if the given value is not nil.
func (euo *EnvUpdateOne) SetNillableFirecrackerVersion(s *string) *EnvUpdateOne {
	if s != nil {
		euo.SetFirecrackerVersion(*s)
	}
	return euo
}

// SetTeam sets the "team" edge to the Team entity.
func (euo *EnvUpdateOne) SetTeam(t *Team) *EnvUpdateOne {
	return euo.SetTeamID(t.ID)
}

// AddEnvAliasIDs adds the "env_aliases" edge to the EnvAlias entity by IDs.
func (euo *EnvUpdateOne) AddEnvAliasIDs(ids ...string) *EnvUpdateOne {
	euo.mutation.AddEnvAliasIDs(ids...)
	return euo
}

// AddEnvAliases adds the "env_aliases" edges to the EnvAlias entity.
func (euo *EnvUpdateOne) AddEnvAliases(e ...*EnvAlias) *EnvUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEnvAliasIDs(ids...)
}

// Mutation returns the EnvMutation object of the builder.
func (euo *EnvUpdateOne) Mutation() *EnvMutation {
	return euo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (euo *EnvUpdateOne) ClearTeam() *EnvUpdateOne {
	euo.mutation.ClearTeam()
	return euo
}

// ClearEnvAliases clears all "env_aliases" edges to the EnvAlias entity.
func (euo *EnvUpdateOne) ClearEnvAliases() *EnvUpdateOne {
	euo.mutation.ClearEnvAliases()
	return euo
}

// RemoveEnvAliasIDs removes the "env_aliases" edge to EnvAlias entities by IDs.
func (euo *EnvUpdateOne) RemoveEnvAliasIDs(ids ...string) *EnvUpdateOne {
	euo.mutation.RemoveEnvAliasIDs(ids...)
	return euo
}

// RemoveEnvAliases removes "env_aliases" edges to EnvAlias entities.
func (euo *EnvUpdateOne) RemoveEnvAliases(e ...*EnvAlias) *EnvUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEnvAliasIDs(ids...)
}

// Where appends a list predicates to the EnvUpdate builder.
func (euo *EnvUpdateOne) Where(ps ...predicate.Env) *EnvUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EnvUpdateOne) Select(field string, fields ...string) *EnvUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Env entity.
func (euo *EnvUpdateOne) Save(ctx context.Context) (*Env, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnvUpdateOne) SaveX(ctx context.Context) *Env {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnvUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnvUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EnvUpdateOne) check() error {
	if _, ok := euo.mutation.TeamID(); euo.mutation.TeamCleared() && !ok {
		return errors.New(`models: clearing a required unique edge "Env.team"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EnvUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EnvUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EnvUpdateOne) sqlSave(ctx context.Context) (_node *Env, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(env.Table, env.Columns, sqlgraph.NewFieldSpec(env.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "Env.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, env.FieldID)
		for _, f := range fields {
			if !env.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != env.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(env.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Dockerfile(); ok {
		_spec.SetField(env.FieldDockerfile, field.TypeString, value)
	}
	if value, ok := euo.mutation.Public(); ok {
		_spec.SetField(env.FieldPublic, field.TypeBool, value)
	}
	if value, ok := euo.mutation.BuildID(); ok {
		_spec.SetField(env.FieldBuildID, field.TypeUUID, value)
	}
	if value, ok := euo.mutation.BuildCount(); ok {
		_spec.SetField(env.FieldBuildCount, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedBuildCount(); ok {
		_spec.AddField(env.FieldBuildCount, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.SpawnCount(); ok {
		_spec.SetField(env.FieldSpawnCount, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedSpawnCount(); ok {
		_spec.AddField(env.FieldSpawnCount, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.LastSpawnedAt(); ok {
		_spec.SetField(env.FieldLastSpawnedAt, field.TypeTime, value)
	}
	if euo.mutation.LastSpawnedAtCleared() {
		_spec.ClearField(env.FieldLastSpawnedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.Vcpu(); ok {
		_spec.SetField(env.FieldVcpu, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedVcpu(); ok {
		_spec.AddField(env.FieldVcpu, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.RAMMB(); ok {
		_spec.SetField(env.FieldRAMMB, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedRAMMB(); ok {
		_spec.AddField(env.FieldRAMMB, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.FreeDiskSizeMB(); ok {
		_spec.SetField(env.FieldFreeDiskSizeMB, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedFreeDiskSizeMB(); ok {
		_spec.AddField(env.FieldFreeDiskSizeMB, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.TotalDiskSizeMB(); ok {
		_spec.SetField(env.FieldTotalDiskSizeMB, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedTotalDiskSizeMB(); ok {
		_spec.AddField(env.FieldTotalDiskSizeMB, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.KernelVersion(); ok {
		_spec.SetField(env.FieldKernelVersion, field.TypeString, value)
	}
	if value, ok := euo.mutation.FirecrackerVersion(); ok {
		_spec.SetField(env.FieldFirecrackerVersion, field.TypeString, value)
	}
	if euo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   env.TeamTable,
			Columns: []string{env.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = euo.schemaConfig.Env
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   env.TeamTable,
			Columns: []string{env.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = euo.schemaConfig.Env
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvAliasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   env.EnvAliasesTable,
			Columns: []string{env.EnvAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(envalias.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EnvAlias
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvAliasesIDs(); len(nodes) > 0 && !euo.mutation.EnvAliasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   env.EnvAliasesTable,
			Columns: []string{env.EnvAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(envalias.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EnvAlias
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvAliasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   env.EnvAliasesTable,
			Columns: []string{env.EnvAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(envalias.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EnvAlias
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = euo.schemaConfig.Env
	ctx = internal.NewSchemaConfigContext(ctx, euo.schemaConfig)
	_spec.AddModifiers(euo.modifiers...)
	_node = &Env{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{env.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
