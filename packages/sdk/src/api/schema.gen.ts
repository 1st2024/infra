/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/health": {
    /** Health check */
    readonly get: {
      readonly responses: {
        /** Request was successful */
        readonly 200: unknown;
        readonly 401: components["responses"]["401"];
      };
    };
  };
  readonly "/sessions": {
    /** List all sessions */
    readonly get: {
      readonly parameters: {
        readonly query: {
          readonly api_key: components["parameters"]["apiKeyReq"];
        };
      };
      readonly responses: {
        /** Successfully returned all sessions */
        readonly 200: {
          readonly content: {
            readonly "application/json": readonly components["schemas"]["Session"][];
          };
        };
        readonly 401: components["responses"]["401"];
        readonly 500: components["responses"]["500"];
      };
    };
    /** Create a session on the server */
    readonly post: {
      readonly parameters: {
        readonly query: {
          readonly api_key?: components["parameters"]["apiKeyOpt"];
        };
      };
      readonly responses: {
        /** Successfully created a session */
        readonly 201: {
          readonly content: {
            readonly "application/json": components["schemas"]["Session"];
          };
        };
        readonly 400: components["responses"]["400"];
        readonly 401: components["responses"]["401"];
        readonly 500: components["responses"]["500"];
      };
      readonly requestBody: {
        readonly content: {
          readonly "application/json": components["schemas"]["NewSession"];
        };
      };
    };
  };
  readonly "/sessions/{sessionID}": {
    /** Delete a session on the server */
    readonly delete: {
      readonly parameters: {
        readonly query: {
          readonly api_key: components["parameters"]["apiKeyReq"];
        };
        readonly path: {
          readonly sessionID: components["parameters"]["sessionID"];
        };
      };
      readonly responses: {
        /** Successfully deleted the session */
        readonly 204: never;
        readonly 401: components["responses"]["401"];
        readonly 500: components["responses"]["500"];
      };
    };
  };
  readonly "/sessions/{sessionID}/refresh": {
    /** Refresh the session extending its time to live */
    readonly post: {
      readonly parameters: {
        readonly query: {
          readonly api_key?: components["parameters"]["apiKeyOpt"];
        };
        readonly path: {
          readonly sessionID: components["parameters"]["sessionID"];
        };
      };
      readonly responses: {
        /** Successfully refreshed the session */
        readonly 204: never;
        readonly 401: components["responses"]["401"];
        /** Error refreshing session - session not found */
        readonly 404: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  readonly "/envs": {
    /** List all environments */
    readonly get: {
      readonly parameters: {
        readonly query: {
          readonly api_key: components["parameters"]["apiKeyReq"];
        };
      };
      readonly responses: {
        /** Successfully returned all environments */
        readonly 200: {
          readonly content: {
            readonly "application/json": readonly components["schemas"]["Environment"][];
          };
        };
        readonly 401: components["responses"]["401"];
        readonly 500: components["responses"]["500"];
      };
    };
    /** Create a new environment */
    readonly post: {
      readonly parameters: {
        readonly query: {
          readonly api_key: components["parameters"]["apiKeyReq"];
        };
      };
      readonly responses: {
        /** Successfully created an environment */
        readonly 200: {
          readonly content: {
            readonly "application/json": components["schemas"]["Environment"];
          };
        };
        readonly 400: components["responses"]["400"];
        readonly 401: components["responses"]["401"];
        readonly 500: components["responses"]["500"];
      };
      readonly requestBody: {
        readonly content: {
          readonly "application/json": components["schemas"]["NewEnvironment"];
        };
      };
    };
  };
  readonly "/envs/{codeSnippetID}": {
    /** Create a new env for a code snippet */
    readonly post: {
      readonly parameters: {
        readonly query: {
          readonly api_key: components["parameters"]["apiKeyReq"];
        };
        readonly path: {
          readonly codeSnippetID: components["parameters"]["codeSnippetID"];
        };
      };
      readonly responses: {
        /** Successfully created an environment */
        readonly 204: never;
        readonly 400: components["responses"]["400"];
        readonly 401: components["responses"]["401"];
        readonly 500: components["responses"]["500"];
      };
      readonly requestBody: {
        readonly content: {
          readonly "application/json": components["schemas"]["NewEnvironment"];
        };
      };
    };
    /** Delete the code snippet environment */
    readonly delete: {
      readonly parameters: {
        readonly query: {
          readonly api_key: components["parameters"]["apiKeyReq"];
        };
        readonly path: {
          readonly codeSnippetID: components["parameters"]["codeSnippetID"];
        };
      };
      readonly responses: {
        /** Successfully deleted the environment */
        readonly 204: never;
        /** Cannot delete the environment */
        readonly 400: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
        readonly 401: components["responses"]["401"];
        readonly 500: components["responses"]["500"];
      };
    };
    /** Update the environment of the code snippet to match the edit environment */
    readonly patch: {
      readonly parameters: {
        readonly query: {
          readonly api_key: components["parameters"]["apiKeyReq"];
        };
        readonly path: {
          readonly codeSnippetID: components["parameters"]["codeSnippetID"];
        };
      };
      readonly responses: {
        /** Updated the edit environment for code snippet */
        readonly 204: never;
        readonly 400: components["responses"]["400"];
        readonly 401: components["responses"]["401"];
        readonly 500: components["responses"]["500"];
      };
    };
  };
  readonly "/envs/{codeSnippetID}/state": {
    /** Update the state of the environment */
    readonly put: {
      readonly parameters: {
        readonly query: {
          readonly api_key: components["parameters"]["apiKeyReq"];
        };
        readonly path: {
          readonly codeSnippetID: components["parameters"]["codeSnippetID"];
        };
      };
      readonly responses: {
        /** Publishing the edit environment for code snippet */
        readonly 204: never;
        readonly 400: components["responses"]["400"];
        readonly 401: components["responses"]["401"];
      };
      readonly requestBody: {
        readonly content: {
          readonly "application/json": components["schemas"]["EnvironmentStateUpdate"];
        };
      };
    };
  };
}

export interface components {
  readonly schemas: {
    /** @enum {string} */
    readonly Template:
      | "Nodejs"
      | "Go"
      | "Bash"
      | "Rust"
      | "Python3"
      | "Typescript";
    /** @enum {string} */
    readonly EnvironmentState: "Building" | "Failed" | "Done";
    readonly Environment: {
      readonly id: string;
      readonly template?: string;
      readonly title?: string;
    };
    readonly NewEnvironment: {
      readonly title?: string;
      readonly template: components["schemas"]["Template"] | string;
    };
    readonly EnvironmentStateUpdate: {
      readonly state: components["schemas"]["EnvironmentState"];
    };
    readonly NewSession: {
      /**
       * @description Option determining if the session is a shared persistent edit session
       * @default false
       */
      readonly editEnabled?: boolean;
      /** @description Identifier of a code snippet which which is the environment associated */
      readonly codeSnippetID: string;
    };
    readonly Session: {
      /** @description Identifier of a code snippet which which is the environment associated */
      readonly codeSnippetID: string;
      /** @description Information if the session is a shared persistent edit session */
      readonly editEnabled: boolean;
      /** @description Identifier of the session */
      readonly sessionID: string;
      /** @description Identifier of the client */
      readonly clientID: string;
    };
    readonly Error: {
      /**
       * Format: int32
       * @description Error code
       */
      readonly code: number;
      /** @description Error */
      readonly message: string;
    };
  };
  readonly responses: {
    /** Bad request */
    readonly 400: {
      readonly content: {
        readonly "application/json": components["schemas"]["Error"];
      };
    };
    /** Authentication error */
    readonly 401: {
      readonly content: {
        readonly "application/json": components["schemas"]["Error"];
      };
    };
    /** Server error */
    readonly 500: {
      readonly content: {
        readonly "application/json": components["schemas"]["Error"];
      };
    };
  };
  readonly parameters: {
    readonly apiKeyOpt: string;
    readonly apiKeyReq: string;
    readonly codeSnippetID: string;
    readonly sessionID: string;
  };
}

export interface operations {}

export interface external {}
