// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
