// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6fq/AQAA//8zDiweHjoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
