// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXTW/jNhD9K8S0R8VysulFN2eTtsZegmwOBQKjoKWRxUYiWXLkrGvovxckJUuytfFm",
	"kd1TYnE4H2/evJH2kKpKK4mSLCR70NzwCgmN/yWkJS5TXN6GX5CA5lRABJJXCMnQIAKD/9bCYAYJmRoj",
	"sGmBFXc3aaedtSUj5AaapnHGVitp0ce5ns/dn1RJQknuX651KVJOQsn4H6uke9b7+9VgDgn8EvfJx+HU",
	"xnfGKBNiZGhTI7RzAgnc8Iy5FNESNBFczy9/fMxFTQVKar0yDHYR/PYzCv6MZoumC9p0DfGI38mtMEpW",
	"bXRtlEZDIrQD5TZ0/Lhvwx4/tWarJhp6e1Q3tSizU6dr9/ijK/iLDznO9Valz2iYN2JpaxVBrkzFCRJY",
	"C8nNDqLjlCLI/M1clPg1r+6MdVBPeDiUO768vGUqZ1Qgw768iClZ7pg2aFESEycGzBaqLjO2RmbQlTMR",
	"8gjHDplcbGBUj4fWd+8EzVRlE/V6Y+bPBtgJSR+u+iyEJNygp2GF1vLN1xydTbwN1Hlx6S5bQZjIuBQo",
	"aRLozI1ILtB0gAfbt/TqxMWwJblRFXspRFowYf1pp1ssNcgJs6lQY/E7F6+zPgtaqCAaS+cBnJWfU0xr",
	"I2j32c1rQG+Rpmjto3pG6TTFDxRyg+b3rsvcW/xNzgTaWXdpBLM+rYJIu/IWWnzCXefMa3uBPPOmrbr/",
	"dbG4X158wsHccX8rqI2QufIqIcgNH9xd3bDF/RIi2KKxAaj57HI2d+GURsm1gAQ+zOazOUR+k/jaYpTb",
	"sHyUnZCGj75FjDOJL8O2gndqvGQuM0jgXlm6c64C4GjpRmW7I52t6pKE5oZiNx8XGSceJC9VmWvXhFK1",
	"tx87BHqh3vwn9EBZzyr1qUw2Y3q4xXm8HK/ec1cM4JvaGLUnUV6X5Y4ZpNpIzBgvyyHudrA9p2Idko+d",
	"Ub/sXrd1RkPuQ/I0wfqnVbOKgPjGtqNkw8TEBfIyMHmDExz60x+ztMD0+YQ3fyCFc5hGfuzqIVCLvXDL",
	"7AGvt2HioY87BfgG7stesbyYHSnc5CgsD+5fm4d35NI5Gl+9W+jDlpng8GOB7WtE4TpE3Dh99+2Zf0t7",
	"5j+R3gMJHjO7p8ZqTJV43++NJjaYG7TFawx6CCbjrYdfCKWTOybIMhIVMlKsFFt8nUnLQ+yHQ+Ro9M3w",
	"NA1EbxIP9p6r+Igj16cVHIlSiJuNl+4bW3Yd4vzY1+/wMtYm7LHu4L9gUhHLVS2z7yaFv+be7wPotSkh",
	"gX141MTbS7eFuRF8XQZow0lAN+d1Se2rgE3imGsxw6v1LMOtK6QPuT/+znPaf3jo5bdZNf8HAAD//612",
	"9XNEDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
