// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
