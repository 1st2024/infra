// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envd/filesystem/v1/filesystem.proto

package filesystemv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/e2b-dev/infra/packages/envd/internal/services/spec/envd/filesystem/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FilesystemServiceName is the fully-qualified name of the FilesystemService service.
	FilesystemServiceName = "envd.filesystem.v1.FilesystemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FilesystemServiceStatProcedure is the fully-qualified name of the FilesystemService's Stat RPC.
	FilesystemServiceStatProcedure = "/envd.filesystem.v1.FilesystemService/Stat"
	// FilesystemServiceCreateDirProcedure is the fully-qualified name of the FilesystemService's
	// CreateDir RPC.
	FilesystemServiceCreateDirProcedure = "/envd.filesystem.v1.FilesystemService/CreateDir"
	// FilesystemServiceListDirProcedure is the fully-qualified name of the FilesystemService's ListDir
	// RPC.
	FilesystemServiceListDirProcedure = "/envd.filesystem.v1.FilesystemService/ListDir"
	// FilesystemServiceWatchProcedure is the fully-qualified name of the FilesystemService's Watch RPC.
	FilesystemServiceWatchProcedure = "/envd.filesystem.v1.FilesystemService/Watch"
	// FilesystemServiceRenameProcedure is the fully-qualified name of the FilesystemService's Rename
	// RPC.
	FilesystemServiceRenameProcedure = "/envd.filesystem.v1.FilesystemService/Rename"
	// FilesystemServiceRemoveProcedure is the fully-qualified name of the FilesystemService's Remove
	// RPC.
	FilesystemServiceRemoveProcedure = "/envd.filesystem.v1.FilesystemService/Remove"
	// FilesystemServiceCopyProcedure is the fully-qualified name of the FilesystemService's Copy RPC.
	FilesystemServiceCopyProcedure = "/envd.filesystem.v1.FilesystemService/Copy"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	filesystemServiceServiceDescriptor         = v1.File_envd_filesystem_v1_filesystem_proto.Services().ByName("FilesystemService")
	filesystemServiceStatMethodDescriptor      = filesystemServiceServiceDescriptor.Methods().ByName("Stat")
	filesystemServiceCreateDirMethodDescriptor = filesystemServiceServiceDescriptor.Methods().ByName("CreateDir")
	filesystemServiceListDirMethodDescriptor   = filesystemServiceServiceDescriptor.Methods().ByName("ListDir")
	filesystemServiceWatchMethodDescriptor     = filesystemServiceServiceDescriptor.Methods().ByName("Watch")
	filesystemServiceRenameMethodDescriptor    = filesystemServiceServiceDescriptor.Methods().ByName("Rename")
	filesystemServiceRemoveMethodDescriptor    = filesystemServiceServiceDescriptor.Methods().ByName("Remove")
	filesystemServiceCopyMethodDescriptor      = filesystemServiceServiceDescriptor.Methods().ByName("Copy")
)

// FilesystemServiceClient is a client for the envd.filesystem.v1.FilesystemService service.
type FilesystemServiceClient interface {
	Stat(context.Context, *connect.Request[v1.StatRequest]) (*connect.Response[v1.StatResponse], error)
	CreateDir(context.Context, *connect.Request[v1.CreateDirRequest]) (*connect.Response[v1.CreateDirResponse], error)
	ListDir(context.Context, *connect.Request[v1.ListDirRequest]) (*connect.Response[v1.ListDirResponse], error)
	Watch(context.Context, *connect.Request[v1.WatchRequest]) (*connect.ServerStreamForClient[v1.WatchResponse], error)
	Rename(context.Context, *connect.Request[v1.RenameRequest]) (*connect.Response[v1.RenameResponse], error)
	Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error)
	Copy(context.Context, *connect.Request[v1.CopyRequest]) (*connect.Response[v1.CopyResponse], error)
}

// NewFilesystemServiceClient constructs a client for the envd.filesystem.v1.FilesystemService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFilesystemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FilesystemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &filesystemServiceClient{
		stat: connect.NewClient[v1.StatRequest, v1.StatResponse](
			httpClient,
			baseURL+FilesystemServiceStatProcedure,
			connect.WithSchema(filesystemServiceStatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createDir: connect.NewClient[v1.CreateDirRequest, v1.CreateDirResponse](
			httpClient,
			baseURL+FilesystemServiceCreateDirProcedure,
			connect.WithSchema(filesystemServiceCreateDirMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listDir: connect.NewClient[v1.ListDirRequest, v1.ListDirResponse](
			httpClient,
			baseURL+FilesystemServiceListDirProcedure,
			connect.WithSchema(filesystemServiceListDirMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		watch: connect.NewClient[v1.WatchRequest, v1.WatchResponse](
			httpClient,
			baseURL+FilesystemServiceWatchProcedure,
			connect.WithSchema(filesystemServiceWatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rename: connect.NewClient[v1.RenameRequest, v1.RenameResponse](
			httpClient,
			baseURL+FilesystemServiceRenameProcedure,
			connect.WithSchema(filesystemServiceRenameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		remove: connect.NewClient[v1.RemoveRequest, v1.RemoveResponse](
			httpClient,
			baseURL+FilesystemServiceRemoveProcedure,
			connect.WithSchema(filesystemServiceRemoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		copy: connect.NewClient[v1.CopyRequest, v1.CopyResponse](
			httpClient,
			baseURL+FilesystemServiceCopyProcedure,
			connect.WithSchema(filesystemServiceCopyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// filesystemServiceClient implements FilesystemServiceClient.
type filesystemServiceClient struct {
	stat      *connect.Client[v1.StatRequest, v1.StatResponse]
	createDir *connect.Client[v1.CreateDirRequest, v1.CreateDirResponse]
	listDir   *connect.Client[v1.ListDirRequest, v1.ListDirResponse]
	watch     *connect.Client[v1.WatchRequest, v1.WatchResponse]
	rename    *connect.Client[v1.RenameRequest, v1.RenameResponse]
	remove    *connect.Client[v1.RemoveRequest, v1.RemoveResponse]
	copy      *connect.Client[v1.CopyRequest, v1.CopyResponse]
}

// Stat calls envd.filesystem.v1.FilesystemService.Stat.
func (c *filesystemServiceClient) Stat(ctx context.Context, req *connect.Request[v1.StatRequest]) (*connect.Response[v1.StatResponse], error) {
	return c.stat.CallUnary(ctx, req)
}

// CreateDir calls envd.filesystem.v1.FilesystemService.CreateDir.
func (c *filesystemServiceClient) CreateDir(ctx context.Context, req *connect.Request[v1.CreateDirRequest]) (*connect.Response[v1.CreateDirResponse], error) {
	return c.createDir.CallUnary(ctx, req)
}

// ListDir calls envd.filesystem.v1.FilesystemService.ListDir.
func (c *filesystemServiceClient) ListDir(ctx context.Context, req *connect.Request[v1.ListDirRequest]) (*connect.Response[v1.ListDirResponse], error) {
	return c.listDir.CallUnary(ctx, req)
}

// Watch calls envd.filesystem.v1.FilesystemService.Watch.
func (c *filesystemServiceClient) Watch(ctx context.Context, req *connect.Request[v1.WatchRequest]) (*connect.ServerStreamForClient[v1.WatchResponse], error) {
	return c.watch.CallServerStream(ctx, req)
}

// Rename calls envd.filesystem.v1.FilesystemService.Rename.
func (c *filesystemServiceClient) Rename(ctx context.Context, req *connect.Request[v1.RenameRequest]) (*connect.Response[v1.RenameResponse], error) {
	return c.rename.CallUnary(ctx, req)
}

// Remove calls envd.filesystem.v1.FilesystemService.Remove.
func (c *filesystemServiceClient) Remove(ctx context.Context, req *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error) {
	return c.remove.CallUnary(ctx, req)
}

// Copy calls envd.filesystem.v1.FilesystemService.Copy.
func (c *filesystemServiceClient) Copy(ctx context.Context, req *connect.Request[v1.CopyRequest]) (*connect.Response[v1.CopyResponse], error) {
	return c.copy.CallUnary(ctx, req)
}

// FilesystemServiceHandler is an implementation of the envd.filesystem.v1.FilesystemService
// service.
type FilesystemServiceHandler interface {
	Stat(context.Context, *connect.Request[v1.StatRequest]) (*connect.Response[v1.StatResponse], error)
	CreateDir(context.Context, *connect.Request[v1.CreateDirRequest]) (*connect.Response[v1.CreateDirResponse], error)
	ListDir(context.Context, *connect.Request[v1.ListDirRequest]) (*connect.Response[v1.ListDirResponse], error)
	Watch(context.Context, *connect.Request[v1.WatchRequest], *connect.ServerStream[v1.WatchResponse]) error
	Rename(context.Context, *connect.Request[v1.RenameRequest]) (*connect.Response[v1.RenameResponse], error)
	Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error)
	Copy(context.Context, *connect.Request[v1.CopyRequest]) (*connect.Response[v1.CopyResponse], error)
}

// NewFilesystemServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFilesystemServiceHandler(svc FilesystemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	filesystemServiceStatHandler := connect.NewUnaryHandler(
		FilesystemServiceStatProcedure,
		svc.Stat,
		connect.WithSchema(filesystemServiceStatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemServiceCreateDirHandler := connect.NewUnaryHandler(
		FilesystemServiceCreateDirProcedure,
		svc.CreateDir,
		connect.WithSchema(filesystemServiceCreateDirMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemServiceListDirHandler := connect.NewUnaryHandler(
		FilesystemServiceListDirProcedure,
		svc.ListDir,
		connect.WithSchema(filesystemServiceListDirMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemServiceWatchHandler := connect.NewServerStreamHandler(
		FilesystemServiceWatchProcedure,
		svc.Watch,
		connect.WithSchema(filesystemServiceWatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemServiceRenameHandler := connect.NewUnaryHandler(
		FilesystemServiceRenameProcedure,
		svc.Rename,
		connect.WithSchema(filesystemServiceRenameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemServiceRemoveHandler := connect.NewUnaryHandler(
		FilesystemServiceRemoveProcedure,
		svc.Remove,
		connect.WithSchema(filesystemServiceRemoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemServiceCopyHandler := connect.NewUnaryHandler(
		FilesystemServiceCopyProcedure,
		svc.Copy,
		connect.WithSchema(filesystemServiceCopyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envd.filesystem.v1.FilesystemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FilesystemServiceStatProcedure:
			filesystemServiceStatHandler.ServeHTTP(w, r)
		case FilesystemServiceCreateDirProcedure:
			filesystemServiceCreateDirHandler.ServeHTTP(w, r)
		case FilesystemServiceListDirProcedure:
			filesystemServiceListDirHandler.ServeHTTP(w, r)
		case FilesystemServiceWatchProcedure:
			filesystemServiceWatchHandler.ServeHTTP(w, r)
		case FilesystemServiceRenameProcedure:
			filesystemServiceRenameHandler.ServeHTTP(w, r)
		case FilesystemServiceRemoveProcedure:
			filesystemServiceRemoveHandler.ServeHTTP(w, r)
		case FilesystemServiceCopyProcedure:
			filesystemServiceCopyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFilesystemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFilesystemServiceHandler struct{}

func (UnimplementedFilesystemServiceHandler) Stat(context.Context, *connect.Request[v1.StatRequest]) (*connect.Response[v1.StatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.filesystem.v1.FilesystemService.Stat is not implemented"))
}

func (UnimplementedFilesystemServiceHandler) CreateDir(context.Context, *connect.Request[v1.CreateDirRequest]) (*connect.Response[v1.CreateDirResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.filesystem.v1.FilesystemService.CreateDir is not implemented"))
}

func (UnimplementedFilesystemServiceHandler) ListDir(context.Context, *connect.Request[v1.ListDirRequest]) (*connect.Response[v1.ListDirResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.filesystem.v1.FilesystemService.ListDir is not implemented"))
}

func (UnimplementedFilesystemServiceHandler) Watch(context.Context, *connect.Request[v1.WatchRequest], *connect.ServerStream[v1.WatchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envd.filesystem.v1.FilesystemService.Watch is not implemented"))
}

func (UnimplementedFilesystemServiceHandler) Rename(context.Context, *connect.Request[v1.RenameRequest]) (*connect.Response[v1.RenameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.filesystem.v1.FilesystemService.Rename is not implemented"))
}

func (UnimplementedFilesystemServiceHandler) Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.filesystem.v1.FilesystemService.Remove is not implemented"))
}

func (UnimplementedFilesystemServiceHandler) Copy(context.Context, *connect.Request[v1.CopyRequest]) (*connect.Response[v1.CopyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.filesystem.v1.FilesystemService.Copy is not implemented"))
}
