// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
