// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
