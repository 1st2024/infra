// Code generated by ent, DO NOT EDIT.

package tier

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/internal"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Tier {
	return predicate.Tier(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Tier {
	return predicate.Tier(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Tier {
	return predicate.Tier(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Tier {
	return predicate.Tier(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Tier {
	return predicate.Tier(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Tier {
	return predicate.Tier(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Tier {
	return predicate.Tier(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Tier {
	return predicate.Tier(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Tier {
	return predicate.Tier(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Tier {
	return predicate.Tier(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Tier {
	return predicate.Tier(sql.FieldContainsFold(FieldID, id))
}

// Vcpu applies equality check predicate on the "vcpu" field. It's identical to VcpuEQ.
func Vcpu(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldEQ(FieldVcpu, v))
}

// RAMMB applies equality check predicate on the "ram_mb" field. It's identical to RAMMBEQ.
func RAMMB(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldEQ(FieldRAMMB, v))
}

// DiskMB applies equality check predicate on the "disk_mb" field. It's identical to DiskMBEQ.
func DiskMB(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldEQ(FieldDiskMB, v))
}

// ConcurrentInstances applies equality check predicate on the "concurrent_instances" field. It's identical to ConcurrentInstancesEQ.
func ConcurrentInstances(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldEQ(FieldConcurrentInstances, v))
}

// VcpuEQ applies the EQ predicate on the "vcpu" field.
func VcpuEQ(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldEQ(FieldVcpu, v))
}

// VcpuNEQ applies the NEQ predicate on the "vcpu" field.
func VcpuNEQ(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldNEQ(FieldVcpu, v))
}

// VcpuIn applies the In predicate on the "vcpu" field.
func VcpuIn(vs ...int64) predicate.Tier {
	return predicate.Tier(sql.FieldIn(FieldVcpu, vs...))
}

// VcpuNotIn applies the NotIn predicate on the "vcpu" field.
func VcpuNotIn(vs ...int64) predicate.Tier {
	return predicate.Tier(sql.FieldNotIn(FieldVcpu, vs...))
}

// VcpuGT applies the GT predicate on the "vcpu" field.
func VcpuGT(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldGT(FieldVcpu, v))
}

// VcpuGTE applies the GTE predicate on the "vcpu" field.
func VcpuGTE(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldGTE(FieldVcpu, v))
}

// VcpuLT applies the LT predicate on the "vcpu" field.
func VcpuLT(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldLT(FieldVcpu, v))
}

// VcpuLTE applies the LTE predicate on the "vcpu" field.
func VcpuLTE(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldLTE(FieldVcpu, v))
}

// RAMMBEQ applies the EQ predicate on the "ram_mb" field.
func RAMMBEQ(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldEQ(FieldRAMMB, v))
}

// RAMMBNEQ applies the NEQ predicate on the "ram_mb" field.
func RAMMBNEQ(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldNEQ(FieldRAMMB, v))
}

// RAMMBIn applies the In predicate on the "ram_mb" field.
func RAMMBIn(vs ...int64) predicate.Tier {
	return predicate.Tier(sql.FieldIn(FieldRAMMB, vs...))
}

// RAMMBNotIn applies the NotIn predicate on the "ram_mb" field.
func RAMMBNotIn(vs ...int64) predicate.Tier {
	return predicate.Tier(sql.FieldNotIn(FieldRAMMB, vs...))
}

// RAMMBGT applies the GT predicate on the "ram_mb" field.
func RAMMBGT(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldGT(FieldRAMMB, v))
}

// RAMMBGTE applies the GTE predicate on the "ram_mb" field.
func RAMMBGTE(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldGTE(FieldRAMMB, v))
}

// RAMMBLT applies the LT predicate on the "ram_mb" field.
func RAMMBLT(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldLT(FieldRAMMB, v))
}

// RAMMBLTE applies the LTE predicate on the "ram_mb" field.
func RAMMBLTE(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldLTE(FieldRAMMB, v))
}

// DiskMBEQ applies the EQ predicate on the "disk_mb" field.
func DiskMBEQ(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldEQ(FieldDiskMB, v))
}

// DiskMBNEQ applies the NEQ predicate on the "disk_mb" field.
func DiskMBNEQ(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldNEQ(FieldDiskMB, v))
}

// DiskMBIn applies the In predicate on the "disk_mb" field.
func DiskMBIn(vs ...int64) predicate.Tier {
	return predicate.Tier(sql.FieldIn(FieldDiskMB, vs...))
}

// DiskMBNotIn applies the NotIn predicate on the "disk_mb" field.
func DiskMBNotIn(vs ...int64) predicate.Tier {
	return predicate.Tier(sql.FieldNotIn(FieldDiskMB, vs...))
}

// DiskMBGT applies the GT predicate on the "disk_mb" field.
func DiskMBGT(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldGT(FieldDiskMB, v))
}

// DiskMBGTE applies the GTE predicate on the "disk_mb" field.
func DiskMBGTE(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldGTE(FieldDiskMB, v))
}

// DiskMBLT applies the LT predicate on the "disk_mb" field.
func DiskMBLT(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldLT(FieldDiskMB, v))
}

// DiskMBLTE applies the LTE predicate on the "disk_mb" field.
func DiskMBLTE(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldLTE(FieldDiskMB, v))
}

// ConcurrentInstancesEQ applies the EQ predicate on the "concurrent_instances" field.
func ConcurrentInstancesEQ(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldEQ(FieldConcurrentInstances, v))
}

// ConcurrentInstancesNEQ applies the NEQ predicate on the "concurrent_instances" field.
func ConcurrentInstancesNEQ(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldNEQ(FieldConcurrentInstances, v))
}

// ConcurrentInstancesIn applies the In predicate on the "concurrent_instances" field.
func ConcurrentInstancesIn(vs ...int64) predicate.Tier {
	return predicate.Tier(sql.FieldIn(FieldConcurrentInstances, vs...))
}

// ConcurrentInstancesNotIn applies the NotIn predicate on the "concurrent_instances" field.
func ConcurrentInstancesNotIn(vs ...int64) predicate.Tier {
	return predicate.Tier(sql.FieldNotIn(FieldConcurrentInstances, vs...))
}

// ConcurrentInstancesGT applies the GT predicate on the "concurrent_instances" field.
func ConcurrentInstancesGT(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldGT(FieldConcurrentInstances, v))
}

// ConcurrentInstancesGTE applies the GTE predicate on the "concurrent_instances" field.
func ConcurrentInstancesGTE(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldGTE(FieldConcurrentInstances, v))
}

// ConcurrentInstancesLT applies the LT predicate on the "concurrent_instances" field.
func ConcurrentInstancesLT(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldLT(FieldConcurrentInstances, v))
}

// ConcurrentInstancesLTE applies the LTE predicate on the "concurrent_instances" field.
func ConcurrentInstancesLTE(v int64) predicate.Tier {
	return predicate.Tier(sql.FieldLTE(FieldConcurrentInstances, v))
}

// HasTeams applies the HasEdge predicate on the "teams" edge.
func HasTeams() predicate.Tier {
	return predicate.Tier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TeamsTable, TeamsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Team
		step.Edge.Schema = schemaConfig.Team
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamsWith applies the HasEdge predicate on the "teams" edge with a given conditions (other predicates).
func HasTeamsWith(preds ...predicate.Team) predicate.Tier {
	return predicate.Tier(func(s *sql.Selector) {
		step := newTeamsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Team
		step.Edge.Schema = schemaConfig.Team
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tier) predicate.Tier {
	return predicate.Tier(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tier) predicate.Tier {
	return predicate.Tier(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tier) predicate.Tier {
	return predicate.Tier(sql.NotPredicates(p))
}
