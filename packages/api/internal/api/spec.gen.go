// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//8AEqPDjMAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
