// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
