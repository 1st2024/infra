// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY32/bNhD+Vwhuj2rkthlQ+K1psi7A2gZ115ciGBjpZLGVSJak7AWG/vfhSP2m7HlF",
	"5mQvrSNRd9999/GOxx1NZKmkAGENXe6oSXIomft5JTZcS1GCsCvLLOAzEFVJl1/oRcWLlIs1jeivjBeQ",
	"0oheSgH0NqL2XgFdUmM1LqijwNAfKm3MKS0VaMvB+269/Kwho0v6U9xjixtgcYCqriOq4XvFNaQIzVu5",
	"Rb9aSx26SWTqvKRgEs2V5VLQpV9M3LuIZlKXzNIl5cK+fEG7mLiwsAaNQZVgDFvvM0QDGiYoG0etFYT7",
	"HraD4ELcKSj3P7dQuh8B0c0DpjW7d39DqYojOP3Urpui7AxE3nsDcwXGuGDnqF0JrhTY68uQmusUhOUZ",
	"B01kRphjmxi/nmxznuTNv9wQmwOBng7CjJEJZ9ZJLYgcUm6vBLtDJTq3GasKS5cZKwxEExgf3A+SggVd",
	"csHFmvDMOTQ+MPTPiMmZhpQo0IYbixjQS7umR3EnZQFMzKa4JwOp289bwUEcQRli9GvnSHg67I/cCr+b",
	"HK8PQXNEm3fH8RUY2rMje6NRn49xbNFMTj8N9lhbHd/LFL4aGtG3smCuSF4wk9OI3tzbXIqZIolguMhk",
	"GNAlbO6k/EZe31xjCNwW0D+lEd0gb27l87PF2QLpkQoEU5wu6Uv3KKKK2dwJLQaxMfFuFEbtnRZgYc49",
	"PvfCG+plIA7qPGqX4eu0++ZKbMybEV2IQ7MSt52hyy87ytEDYqMRFazEwJLJF32GrK4gavrTTPWrb3Gx",
	"UVIYv6deLM7DcFZVkoAxWVUU98THnE7FjhSeLxa+ngnb1GKmVMETF2T81fhN3IM52LFcQ3ApHoN5w4SQ",
	"toExh+KXU6BYgd6AJuD63zYH4QFhVQwgYU9ha0weRSG5DaCYTfKQad/kg0LSFrGhlqwkJRrxi3HzH1LX",
	"DS59kuLyIaezYZCsOV20UZ8sv/5gUyG2LqdTjucTK40Ng3yjAfPKiIAt2nCBjZtJmDJp7KNk7HsFxl7I",
	"9P7BaJ4c0upxF0FQ9b+uQ4mjNCVMPGYZSiaJfQKFyEFC0QaQQr3W0Xxzi7upQlX2YJlyC9sCdbACVaGa",
	"/Szyv5T0nvHsR6V9U90V3OT7as1sITw/XSFUh+Htk1YOrLCuza1hRka/udckySH5FujlLVj/ngb8LUJT",
	"H32KyZYZYroygQEhjuaUavYi+Z0bS1hRkG7lDJxV/24O0NF56EZRVhQfMqf4Q6lp55/6NhhWZ8rBsERq",
	"sJUWWCOHkZ22hRbcuGLUux9IpXt4ROdsxx8pmgEF695s0xzl6T9pZl1Kjtntzx/M88jtMa2xG+NOVS0u",
	"WEoazk+ss67rdSHP62xYDuJdN74eM84dq0G/vFXhajAh/3OfG87Tp5riBiI5YcJG89IPJi3WkGkwrsPM",
	"l4+PfsHoAgX+siBSd4FlDbG8BBymCr6Bg+WkS2Rj80nlsyEizOi5//QUGW0wDDYhedb9wsNyJiuR7s2x",
	"u6LCDeXJHHt4fXNNQKRKcne0rHRBlzS3VpllHEuR+puds0SWMa2jgKo2840FsuU2l5UlRkHCMw4pUVKH",
	"hgdSe7Zrr7fqs4m/iG6Y5uyumLuWbK5U6Z+D27HJ5dvl5JIyvKvrjAzltM+KGXSJo4hoWUj20oBP62eP",
	"xoYDNfr+1eLVIvj0Rmp3LZJIISDBnw9I5W0n2imn75hgaxT953fD4+O4AJgZVV5Nzvef3/WfuUN0fVv/",
	"HQAA//97K7GFahoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
