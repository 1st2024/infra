// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
