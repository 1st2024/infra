// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"stSy2p/RLC+X5T8BAAD//6ozr/XdGwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
