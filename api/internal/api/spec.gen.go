// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYX2/bNhD/KsRtj2rkthlQ+K1psi3AkgYz1pciGBjpZDGTSI6knAWGvvtwlCyLkhU7",
	"rZt1L63CP/fnd7/j3XkNiSq1kiidhfkabJJjyf3nORbo8EKuhFGyROloURul0TiB/kiiUlxIoTW6y3Na",
	"cI8aYQ7WGSGXUNcRGPy7EgZTmH8eHL+NNsfV3T0mDuoIBtp4UXzMYP55DT8azGAOP8Rbc+PW1vgaH/r3",
	"6mhopkh32BaBddwh7aCsSrLvrBJFSpsR/MxFgSlEcK4k9kyd8EzQ0Ube2K3b0LEFHftDp63y5yF6VKtD",
	"ZdMORHBhjDK7raX/U7SJEdoJJWHeHGZ+L4JMmZI7mIOQ7u0b6GQL6XCJhoSXaC1fTgmCQ7yArRRCe8CI",
	"L0A5Rd1Qx2Fpd55oF7gx/NH/jaUuBqG5Vine2+cHopPVGrIrJNf4sEBrPVJ7/QtxvUxROpEJNExljPtQ",
	"MducZw+5SPL2X2GZy5HhFkvGrVWJ4M7TbAQKpsJdSH5HLPRqM14VDuYZLyxGAzM++g+WokNTCinkkonM",
	"K7SNY6SfM5tzgynTaKywjmwgLZszWyvulCqQy32vTh3BNG6FQHkAZGRjc3YXCN8P+oFa2aSix/UYMEfQ",
	"7h2G10jQRC5shUbbeIS+RaOYkhAhMzU25BxXd0r9xd7fXJJq4QrcrkIEK/LXn3x9MjuZkVtKo+RawBze",
	"+qUINHe5J0iMcmUbJVQc6Yv441G9TL3gtmhaaNxC685U+thkpXSbwqZ1IRJ/Lb63DRWbckZfTxW7cVWu",
	"QwSdqdAvWK2kJV7LqigicHxpCV/vAWWBVtaNHbhR1nXmdyLW8GY2O5oPw4Jd18OnYVElCVqbVUXxyBKD",
	"xHjGZT8XPHEGTtVRE6G4K5JPO+lL8TcK1ETF/7JodY6tA+bXZMQSd3j4C3oHPwwKi+aGl/TeWt9VCcKa",
	"yA0RSF5SZgxLUWhq1HN+mMa335AxA7o8FfoBQrGu7gph8/1kCLC6aW/9fyF7ZpK1MGHa1Bx6+vuFJ2s7",
	"uk2hmsq+HHnh8h4tQ5W/+m2W5JjQ4zvibLM/8faEon5vcpY9cMts5wk05IjbKmInLflNWMd4UbDu5A5z",
	"Ftu9r4pT10UeNtBs+hM/OYR95p4oGnSVkfRW9j2rI/jpmMno2/IdpjSNfyGso15uq75HlW6xX4FCKR/8",
	"c08dSdueKNk2EGaFZhQmSt8gTsd/ynut9t7nm8jx+miaA7WHlMiuzaojOH2JmJ/xlLWYvzDPvM89ok3x",
	"rP8cxOuuvazDNm7YNdL6wRxsjm9YuOh1sPurR7/f/ZrKcTr2IqBI42oa9OIvGzBvAQUsMOF5QYsNZgbb",
	"cl65XWXB7wfzDf7jUKZ+vnSWOVEic4oVYoXj16RyozC2Ir+raLYwjON52lx9iXi2NvRSkL3qvqSipqGS",
	"6WSE/QBJ6dSAGWp4f3PJUKZaCT9jV6aAOeTOaTuPYyXTZn47SVQZ+x/8BlBtAt9KYA/C5apyzGpMaCpN",
	"mVZmLLhHtFfrzfBZnwz0RbDiRtAouuNHg/YHD/izN7sORuPzwU8I40m6E9Kn05QU26sRBwGxQSGZhIFW",
	"61f/GRreqOD+u9m72ejqjTKOEjlRUmJCn0eE8rYj7RDTKy75kkj/6arfPIYPgN3ByotBP/3panvNt9D1",
	"bf1vAAAA///4vOu9kBcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
