// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
