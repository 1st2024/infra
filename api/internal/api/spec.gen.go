// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY227bRhN+lcX8/yVjKokLBLqLY7c1UDtGheYmMIo1OZTWJXe3u0O5hsB3L2ZJUTyI",
	"sZwobm5seg9z+ObbOXgDiSms0ajJw3wDPllhIcPnOeZIeKHXyhldoCZetM5YdKQwHElMigutrEW6POcF",
	"erQIc/DklF5CVUXg8O9SOUxh/nlw/DbaHjd395gQVBEMtMk8/5jB/PMG/u8wgzn8L96ZGze2xtf40L1X",
	"RUMzVbrHtgg8SULeQV0WbN9ZqfKUNyP4WaocU4jg3GjsmDrhmeKjtbyxW7d9xxZ87A+bNsqfh+hRre4r",
	"m3YgggvnjNtvLf9O0SdOWVJGw7w+LMJeBJlxhSSYg9L09g20spUmXKJj4QV6L5dTguAQL2AnhdEeMOIr",
	"UE7R1tQhLPzeE82CdE4+hr+xsPkgNNcmxXv//EC0shpD9oXkGh8W6H1A6kn/+rhepqhJZQqdMJmQIVTC",
	"1+fFw0olq+an8oJWKHCHpZDem0RJCjQbgYKpogst75iFQW0my5xgnsncYzQw42P4ECkSukJppZdCZUGh",
	"rx1j/VL4lXSYCovOK09sA2vZntlZcWdMjlI/lXWqCKZxyxXqAyBjG+uz+0D4cdDvqdX1Uwy4HgPmCJq9",
	"w/AaCZp4Czuh0S4efd+iUUxZiNKZGRtyjus7Y/4S728uWbWiHHerEMGa/Q0nX5/MTmbslrGopVUwh7dh",
	"KQIraRUIEqNe+1oJF0f+Yv4EVC/TILgpmh5qt9DTmUkf61epaVvYrM1VEq7F976mYl3O+OtLxW5clas+",
	"guRKDAveGu2Z17rM8whILj3jGzzgV2CNp7EDN8ZTa34rYgNvZrOj+TAs2FU1TA2LMknQ+6zM80eROGTG",
	"C6m7byEQZ+BUFdURitsi+WUnQyn+ToGaqPhfF63WsU2P+RUbscQ9Hv6CwcEPg8JipZMF51sfuirFWDO5",
	"IQItC34Zw1LUNzXqOD98xrffkTEDukyEfoUyp1UHkz6pfg3bIllhwi9/BFi9P0H8vqjfa8KIB+mFb7kK",
	"tWVxk8L8pCW/KU9C5rloT+4xZ7Hb+yZc2xbmsG56WxxD29pvcp54pw6pdJofatezKoKfjsmE0BPuMaXu",
	"OnPliRuJnfoOVdrFbvrrS/kQcg2Xw6Y2Gt1UL7dGNwoTJ5JenI6fRzp93pO5g8nx+miae2oPyc9tja8i",
	"OH2JmJ/JVDSYvzDPgs8dok3xrJsO4k3b21T9HmLYsvD6wRysj29ZuOi0T09n+26z9S2Z/nTsRY8itatp",
	"rxF82YAFCzhgPROeF7TYYebQhwpjS9pXFsJ+r7nGfwh1GoYb8oJUgYKMyNUax9mkpFEYG5E/VDQbGMbx",
	"PK2vvkQ8Gxs6T1C8ar+0IZGZUqeTEQ7TCz+nGsy+hvc3lwJ1ao0KA17pcpjDisj6eRwbndbDw0liijj8",
	"t2kA1TbwjQTxoGhlShLeYsIjUSqscWPBHaK92mwnn+pkoC+CtXSK56A9E2szbcOfncFpMJedD+bX8RjX",
	"CunSaUqK79SIg4DYopBMwsCr1av/DI1gVO/+u9m72ejqjXHEDzkxWmPCn0eE8rYl7RDTK6nlkkn/6arb",
	"PPYTgN/Dyk4HLTLjxKer3bXQQle31b8BAAD//79EqM4NFgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
