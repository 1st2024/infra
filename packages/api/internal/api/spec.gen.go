// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
