// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXTW/bOBD9KwR3j4rlpNmLbk6T3TV6CdIeFgiMBS2OLDYSqR2OnBqG/vuCpGRJthI3",
	"RdpTanE4H2/em2H3PDVlZTRosjzZ80qgKIEA/S+lLQmdwvI2/OIJrwTlPOJalMCToUHEEf6rFYLkCWEN",
	"EbdpDqVwN2lXOWtLqPSGN03jjG1ltAUf53o+d39Sowk0uX+KqipUKkgZHX+1Rrtvvb/fETKe8N/iPvk4",
	"nNr4DtFgiCHBpqgq54Qn/EZI5lIES7yJ+PX88ufHXNSUg6bWK4NgF/E/fkXBnwG3gF3QpmuIR/xObxUa",
	"XbbRKzQVIKnQDtDb0PHjvg17/NiarZqIhxRO/KRGgvs7TssbM38W8cxgKcgziT5c8agLqTTBBjxWJVgr",
	"Ni856q+8kGUbqPPi0l22rJ3IuFCgKRQ/DraUro+ZAmQmY5QDC7an8aMev3MuoO8Cy9CU7DlXac6U9aed",
	"uFiKIAjkVKixQs/F66zPghYqiMb6PoCz8mSCtEZFu8+OVAG9RZqCtV/ME2hHfPdpDQIB/+y6LLzFv+RM",
	"eEtIl0Yw69PKiSpX3qJSn2DXOfMDKAchvWk7gv65WNwvLz7Brr8t/K0gCaUz46msqHBnd1c3bHG/5BHf",
	"AtoA1Hx2OZu7cKYCLSrFE/5hNp/NeeTHna8tBr0NE9JYOsX6o28RE0zD87Ct3DtFr+ul5Am/N5bunKsA",
	"OFi6MXJ3NAzKuiBVCaTY6eNCChLjeTBm7bpWhfzorn+bSO3WpE+AzBuxtLUaKG+ttMDdFLmkv5mpAl7y",
	"6s5Yl/gblHA7oYCIGV3sWIVgnR7UqURsbupCsjUwBFcOneXxCJlRQavDVbP+Cil1W2m4wo7X1NV7Tu0B",
	"R6Zmd+2VktVFsWMIVKMGyURRDAGxgz02FeuQfOyM+rXzuq0zGgqcJ48T0n5cNQ5CsbHtvLBhLMQ5iCLI",
	"dQMTbPzbH7M0h/TpRBx/AYVzPo382NVD0A97FpbZA15vw8RDH3dj7jsErvux7Cf2EUcn9b48uH9N9O/I",
	"pXM0vnq30IdVOsHhLzm0Uyd3HSKBbon59sy/pz3zX0jvwZ4ZM7unxmpMlXjfL8cmRsgQbP4agx6CyXi1",
	"wzcCLZXeMEWWkSqBkWGF2sLrTFoeYj8cIkej1/vjNBC9STxY7q7iI45cn1ZwNJRCXDl+WbyxZdchzs99",
	"CIcXZ5uwx7qD/4JpQywztZY/TAp/zb20A+g1Fjzh+/CpibeX7qkhUIl1EaANJwHdTNQFte8dm8SxqNQM",
	"rtYzCVtXSB9yf/w/Ljf7Dx/9+G1Wzf8BAAD//1I6TCPODQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
