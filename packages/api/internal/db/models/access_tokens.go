// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AccessToken is an object representing the database table.
type AccessToken struct {
	UserID      string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	AccessToken string    `boil:"access_token" json:"access_token" toml:"access_token" yaml:"access_token"`

	R *accessTokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accessTokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccessTokenColumns = struct {
	UserID      string
	CreatedAt   string
	AccessToken string
}{
	UserID:      "user_id",
	CreatedAt:   "created_at",
	AccessToken: "access_token",
}

var AccessTokenTableColumns = struct {
	UserID      string
	CreatedAt   string
	AccessToken string
}{
	UserID:      "access_tokens.user_id",
	CreatedAt:   "access_tokens.created_at",
	AccessToken: "access_tokens.access_token",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AccessTokenWhere = struct {
	UserID      whereHelperstring
	CreatedAt   whereHelpertime_Time
	AccessToken whereHelperstring
}{
	UserID:      whereHelperstring{field: "\"access_tokens\".\"user_id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"access_tokens\".\"created_at\""},
	AccessToken: whereHelperstring{field: "\"access_tokens\".\"access_token\""},
}

// AccessTokenRels is where relationship names are stored.
var AccessTokenRels = struct {
}{}

// accessTokenR is where relationships are stored.
type accessTokenR struct {
}

// NewStruct creates a new relationship struct
func (*accessTokenR) NewStruct() *accessTokenR {
	return &accessTokenR{}
}

// accessTokenL is where Load methods for each relationship are stored.
type accessTokenL struct{}

var (
	accessTokenAllColumns            = []string{"user_id", "created_at", "access_token"}
	accessTokenColumnsWithoutDefault = []string{"user_id", "access_token"}
	accessTokenColumnsWithDefault    = []string{"created_at"}
	accessTokenPrimaryKeyColumns     = []string{"access_token"}
	accessTokenGeneratedColumns      = []string{}
)

type (
	// AccessTokenSlice is an alias for a slice of pointers to AccessToken.
	// This should almost always be used instead of []AccessToken.
	AccessTokenSlice []*AccessToken
	// AccessTokenHook is the signature for custom AccessToken hook methods
	AccessTokenHook func(boil.Executor, *AccessToken) error

	accessTokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accessTokenType                 = reflect.TypeOf(&AccessToken{})
	accessTokenMapping              = queries.MakeStructMapping(accessTokenType)
	accessTokenPrimaryKeyMapping, _ = queries.BindMapping(accessTokenType, accessTokenMapping, accessTokenPrimaryKeyColumns)
	accessTokenInsertCacheMut       sync.RWMutex
	accessTokenInsertCache          = make(map[string]insertCache)
	accessTokenUpdateCacheMut       sync.RWMutex
	accessTokenUpdateCache          = make(map[string]updateCache)
	accessTokenUpsertCacheMut       sync.RWMutex
	accessTokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accessTokenAfterSelectHooks []AccessTokenHook

var accessTokenBeforeInsertHooks []AccessTokenHook
var accessTokenAfterInsertHooks []AccessTokenHook

var accessTokenBeforeUpdateHooks []AccessTokenHook
var accessTokenAfterUpdateHooks []AccessTokenHook

var accessTokenBeforeDeleteHooks []AccessTokenHook
var accessTokenAfterDeleteHooks []AccessTokenHook

var accessTokenBeforeUpsertHooks []AccessTokenHook
var accessTokenAfterUpsertHooks []AccessTokenHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccessToken) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range accessTokenAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccessToken) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accessTokenBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccessToken) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accessTokenAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccessToken) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range accessTokenBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccessToken) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range accessTokenAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccessToken) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range accessTokenBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccessToken) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range accessTokenAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccessToken) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accessTokenBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccessToken) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accessTokenAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccessTokenHook registers your hook function for all future operations.
func AddAccessTokenHook(hookPoint boil.HookPoint, accessTokenHook AccessTokenHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		accessTokenAfterSelectHooks = append(accessTokenAfterSelectHooks, accessTokenHook)
	case boil.BeforeInsertHook:
		accessTokenBeforeInsertHooks = append(accessTokenBeforeInsertHooks, accessTokenHook)
	case boil.AfterInsertHook:
		accessTokenAfterInsertHooks = append(accessTokenAfterInsertHooks, accessTokenHook)
	case boil.BeforeUpdateHook:
		accessTokenBeforeUpdateHooks = append(accessTokenBeforeUpdateHooks, accessTokenHook)
	case boil.AfterUpdateHook:
		accessTokenAfterUpdateHooks = append(accessTokenAfterUpdateHooks, accessTokenHook)
	case boil.BeforeDeleteHook:
		accessTokenBeforeDeleteHooks = append(accessTokenBeforeDeleteHooks, accessTokenHook)
	case boil.AfterDeleteHook:
		accessTokenAfterDeleteHooks = append(accessTokenAfterDeleteHooks, accessTokenHook)
	case boil.BeforeUpsertHook:
		accessTokenBeforeUpsertHooks = append(accessTokenBeforeUpsertHooks, accessTokenHook)
	case boil.AfterUpsertHook:
		accessTokenAfterUpsertHooks = append(accessTokenAfterUpsertHooks, accessTokenHook)
	}
}

// One returns a single accessToken record from the query.
func (q accessTokenQuery) One(exec boil.Executor) (*AccessToken, error) {
	o := &AccessToken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for access_tokens")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AccessToken records from the query.
func (q accessTokenQuery) All(exec boil.Executor) (AccessTokenSlice, error) {
	var o []*AccessToken

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AccessToken slice")
	}

	if len(accessTokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AccessToken records in the query.
func (q accessTokenQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count access_tokens rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q accessTokenQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if access_tokens exists")
	}

	return count > 0, nil
}

// AccessTokens retrieves all the records using an executor.
func AccessTokens(mods ...qm.QueryMod) accessTokenQuery {
	mods = append(mods, qm.From("\"access_tokens\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"access_tokens\".*"})
	}

	return accessTokenQuery{q}
}

// FindAccessToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccessToken(exec boil.Executor, accessToken string, selectCols ...string) (*AccessToken, error) {
	accessTokenObj := &AccessToken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"access_tokens\" where \"access_token\"=$1", sel,
	)

	q := queries.Raw(query, accessToken)

	err := q.Bind(nil, exec, accessTokenObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from access_tokens")
	}

	if err = accessTokenObj.doAfterSelectHooks(exec); err != nil {
		return accessTokenObj, err
	}

	return accessTokenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccessToken) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no access_tokens provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accessTokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accessTokenInsertCacheMut.RLock()
	cache, cached := accessTokenInsertCache[key]
	accessTokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accessTokenAllColumns,
			accessTokenColumnsWithDefault,
			accessTokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accessTokenType, accessTokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accessTokenType, accessTokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"access_tokens\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"access_tokens\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into access_tokens")
	}

	if !cached {
		accessTokenInsertCacheMut.Lock()
		accessTokenInsertCache[key] = cache
		accessTokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the AccessToken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccessToken) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accessTokenUpdateCacheMut.RLock()
	cache, cached := accessTokenUpdateCache[key]
	accessTokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accessTokenAllColumns,
			accessTokenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update access_tokens, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"access_tokens\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accessTokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accessTokenType, accessTokenMapping, append(wl, accessTokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update access_tokens row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for access_tokens")
	}

	if !cached {
		accessTokenUpdateCacheMut.Lock()
		accessTokenUpdateCache[key] = cache
		accessTokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q accessTokenQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for access_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for access_tokens")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccessTokenSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accessTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"access_tokens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, accessTokenPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in accessToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all accessToken")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccessToken) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no access_tokens provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accessTokenColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accessTokenUpsertCacheMut.RLock()
	cache, cached := accessTokenUpsertCache[key]
	accessTokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			accessTokenAllColumns,
			accessTokenColumnsWithDefault,
			accessTokenColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			accessTokenAllColumns,
			accessTokenPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert access_tokens, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(accessTokenPrimaryKeyColumns))
			copy(conflict, accessTokenPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"access_tokens\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(accessTokenType, accessTokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accessTokenType, accessTokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert access_tokens")
	}

	if !cached {
		accessTokenUpsertCacheMut.Lock()
		accessTokenUpsertCache[key] = cache
		accessTokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single AccessToken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccessToken) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccessToken provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accessTokenPrimaryKeyMapping)
	sql := "DELETE FROM \"access_tokens\" WHERE \"access_token\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from access_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for access_tokens")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q accessTokenQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no accessTokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from access_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for access_tokens")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccessTokenSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(accessTokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accessTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"access_tokens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accessTokenPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from accessToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for access_tokens")
	}

	if len(accessTokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccessToken) Reload(exec boil.Executor) error {
	ret, err := FindAccessToken(exec, o.AccessToken)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccessTokenSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccessTokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accessTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"access_tokens\".* FROM \"access_tokens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accessTokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AccessTokenSlice")
	}

	*o = slice

	return nil
}

// AccessTokenExists checks if the AccessToken row exists.
func AccessTokenExists(exec boil.Executor, accessToken string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"access_tokens\" where \"access_token\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, accessToken)
	}
	row := exec.QueryRow(sql, accessToken)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if access_tokens exists")
	}

	return exists, nil
}

// Exists checks if the AccessToken row exists.
func (o *AccessToken) Exists(exec boil.Executor) (bool, error) {
	return AccessTokenExists(exec, o.AccessToken)
}
