// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
