// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: spec/filesystem.proto

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesystemClient is the client API for Filesystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesystemClient interface {
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (Filesystem_ReadFileClient, error)
	WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Not available in browser
	WriteFileStream(ctx context.Context, opts ...grpc.CallOption) (Filesystem_WriteFileStreamClient, error)
	MakeDir(ctx context.Context, in *MakeDirRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirResponse, error)
	CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSymlink(ctx context.Context, in *CreateSymlinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Filesystem_WatchClient, error)
	Rename(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Chmod(ctx context.Context, in *ChmodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Chown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type filesystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemClient(cc grpc.ClientConnInterface) FilesystemClient {
	return &filesystemClient{cc}
}

func (c *filesystemClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (Filesystem_ReadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Filesystem_ServiceDesc.Streams[0], "/filesystem.Filesystem/ReadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemReadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Filesystem_ReadFileClient interface {
	Recv() (*ReadFileResponse, error)
	grpc.ClientStream
}

type filesystemReadFileClient struct {
	grpc.ClientStream
}

func (x *filesystemReadFileClient) Recv() (*ReadFileResponse, error) {
	m := new(ReadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesystemClient) WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) WriteFileStream(ctx context.Context, opts ...grpc.CallOption) (Filesystem_WriteFileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Filesystem_ServiceDesc.Streams[1], "/filesystem.Filesystem/WriteFileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemWriteFileStreamClient{stream}
	return x, nil
}

type Filesystem_WriteFileStreamClient interface {
	Send(*WriteFileStreamRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type filesystemWriteFileStreamClient struct {
	grpc.ClientStream
}

func (x *filesystemWriteFileStreamClient) Send(m *WriteFileStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesystemWriteFileStreamClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesystemClient) MakeDir(ctx context.Context, in *MakeDirRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/MakeDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirResponse, error) {
	out := new(ReadDirResponse)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/ReadDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/CreateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) CreateSymlink(ctx context.Context, in *CreateSymlinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/CreateSymlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Filesystem_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Filesystem_ServiceDesc.Streams[2], "/filesystem.Filesystem/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Filesystem_WatchClient interface {
	Recv() (*FilesystemEvent, error)
	grpc.ClientStream
}

type filesystemWatchClient struct {
	grpc.ClientStream
}

func (x *filesystemWatchClient) Recv() (*FilesystemEvent, error) {
	m := new(FilesystemEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesystemClient) Rename(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) Chmod(ctx context.Context, in *ChmodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/Chmod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) Chown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/Chown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemServer is the server API for Filesystem service.
// All implementations must embed UnimplementedFilesystemServer
// for forward compatibility
type FilesystemServer interface {
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	CreateFile(context.Context, *CreateFileRequest) (*emptypb.Empty, error)
	ReadFile(*ReadFileRequest, Filesystem_ReadFileServer) error
	WriteFile(context.Context, *WriteFileRequest) (*emptypb.Empty, error)
	// Not available in browser
	WriteFileStream(Filesystem_WriteFileStreamServer) error
	MakeDir(context.Context, *MakeDirRequest) (*emptypb.Empty, error)
	ReadDir(context.Context, *ReadDirRequest) (*ReadDirResponse, error)
	CreateLink(context.Context, *CreateLinkRequest) (*emptypb.Empty, error)
	CreateSymlink(context.Context, *CreateSymlinkRequest) (*emptypb.Empty, error)
	Watch(*WatchRequest, Filesystem_WatchServer) error
	Rename(context.Context, *MoveRequest) (*emptypb.Empty, error)
	Remove(context.Context, *RemoveRequest) (*emptypb.Empty, error)
	Chmod(context.Context, *ChmodRequest) (*emptypb.Empty, error)
	Chown(context.Context, *ChownRequest) (*emptypb.Empty, error)
	Copy(context.Context, *CopyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFilesystemServer()
}

// UnimplementedFilesystemServer must be embedded to have forward compatible implementations.
type UnimplementedFilesystemServer struct {
}

func (UnimplementedFilesystemServer) Stat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedFilesystemServer) CreateFile(context.Context, *CreateFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFilesystemServer) ReadFile(*ReadFileRequest, Filesystem_ReadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedFilesystemServer) WriteFile(context.Context, *WriteFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedFilesystemServer) WriteFileStream(Filesystem_WriteFileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteFileStream not implemented")
}
func (UnimplementedFilesystemServer) MakeDir(context.Context, *MakeDirRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDir not implemented")
}
func (UnimplementedFilesystemServer) ReadDir(context.Context, *ReadDirRequest) (*ReadDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDir not implemented")
}
func (UnimplementedFilesystemServer) CreateLink(context.Context, *CreateLinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedFilesystemServer) CreateSymlink(context.Context, *CreateSymlinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSymlink not implemented")
}
func (UnimplementedFilesystemServer) Watch(*WatchRequest, Filesystem_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedFilesystemServer) Rename(context.Context, *MoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedFilesystemServer) Remove(context.Context, *RemoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedFilesystemServer) Chmod(context.Context, *ChmodRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chmod not implemented")
}
func (UnimplementedFilesystemServer) Chown(context.Context, *ChownRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chown not implemented")
}
func (UnimplementedFilesystemServer) Copy(context.Context, *CopyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedFilesystemServer) mustEmbedUnimplementedFilesystemServer() {}

// UnsafeFilesystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesystemServer will
// result in compilation errors.
type UnsafeFilesystemServer interface {
	mustEmbedUnimplementedFilesystemServer()
}

func RegisterFilesystemServer(s grpc.ServiceRegistrar, srv FilesystemServer) {
	s.RegisterService(&Filesystem_ServiceDesc, srv)
}

func _Filesystem_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_ReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemServer).ReadFile(m, &filesystemReadFileServer{stream})
}

type Filesystem_ReadFileServer interface {
	Send(*ReadFileResponse) error
	grpc.ServerStream
}

type filesystemReadFileServer struct {
	grpc.ServerStream
}

func (x *filesystemReadFileServer) Send(m *ReadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Filesystem_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).WriteFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_WriteFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesystemServer).WriteFileStream(&filesystemWriteFileStreamServer{stream})
}

type Filesystem_WriteFileStreamServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*WriteFileStreamRequest, error)
	grpc.ServerStream
}

type filesystemWriteFileStreamServer struct {
	grpc.ServerStream
}

func (x *filesystemWriteFileStreamServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesystemWriteFileStreamServer) Recv() (*WriteFileStreamRequest, error) {
	m := new(WriteFileStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Filesystem_MakeDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).MakeDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/MakeDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).MakeDir(ctx, req.(*MakeDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_ReadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).ReadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/ReadDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).ReadDir(ctx, req.(*ReadDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).CreateLink(ctx, req.(*CreateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_CreateSymlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSymlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).CreateSymlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/CreateSymlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).CreateSymlink(ctx, req.(*CreateSymlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemServer).Watch(m, &filesystemWatchServer{stream})
}

type Filesystem_WatchServer interface {
	Send(*FilesystemEvent) error
	grpc.ServerStream
}

type filesystemWatchServer struct {
	grpc.ServerStream
}

func (x *filesystemWatchServer) Send(m *FilesystemEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Filesystem_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).Rename(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_Chmod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChmodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).Chmod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/Chmod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).Chmod(ctx, req.(*ChmodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_Chown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).Chown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/Chown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).Chown(ctx, req.(*ChownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Filesystem_ServiceDesc is the grpc.ServiceDesc for Filesystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filesystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesystem.Filesystem",
	HandlerType: (*FilesystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _Filesystem_Stat_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _Filesystem_CreateFile_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _Filesystem_WriteFile_Handler,
		},
		{
			MethodName: "MakeDir",
			Handler:    _Filesystem_MakeDir_Handler,
		},
		{
			MethodName: "ReadDir",
			Handler:    _Filesystem_ReadDir_Handler,
		},
		{
			MethodName: "CreateLink",
			Handler:    _Filesystem_CreateLink_Handler,
		},
		{
			MethodName: "CreateSymlink",
			Handler:    _Filesystem_CreateSymlink_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _Filesystem_Rename_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Filesystem_Remove_Handler,
		},
		{
			MethodName: "Chmod",
			Handler:    _Filesystem_Chmod_Handler,
		},
		{
			MethodName: "Chown",
			Handler:    _Filesystem_Chown_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _Filesystem_Copy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadFile",
			Handler:       _Filesystem_ReadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteFileStream",
			Handler:       _Filesystem_WriteFileStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _Filesystem_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spec/filesystem.proto",
}
