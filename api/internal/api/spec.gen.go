// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY224bNxN+FWL+/3LjVQ4FAt3FsdsKqF2jQnMTCAW9O5LockmGnJVrCPvuxXBXqz1I",
	"tdw4Tm9kiRzO4ZtvhkNvIbOFswYNBZhuIWRrLGT8emk2yltToCH+KbX+dQnTz1v4v8clTOF/6f5o2pxL",
	"r/G+e65KtuC8dehJYdSqcv6kB4cwhUBemRVUCQSShLyDpixg+hnOS6Vz3kzgR6k05pDAhTUIi2R4ukrA",
	"45dSecz5pGLRWt9e1t7eYUZQLaqkG9icxX53eWO872pmc5wb5RzS7OJbe903djyABC69t/6wt/w3x5B5",
	"5UhZA9NaWMS9BJbWF5JgCsrQ2zfQ6laGcIWelRcYglwdUwSnRAF7LYz2gBH/AuUcXU0dwiIclGgWpPfy",
	"If7GwulBaq5tjnfh6YlodTWOHErJNd7PMYSI1KPx9XGd5WhILRV6YZdCxlSJUMuL+7XK1s2nCoLWKHCP",
	"pZAh2ExJijR7SlScl+MOa4XmBF/Zm1p2bD2BUKs/TU0j/GgUe6XJ3s1FxWLKLO3Y1AVubq39U3y4mbFy",
	"RRr3q5DABn0NArw+m5xN2HHr0EinYApv41ICTtI6IpPyxwppbOdnlJrWIltjxmoZTslbsxym8BMyQh6D",
	"sybUGL+ZTMZKfsMvJQYS9zKIUGYZhrAsNVQxvhTNJh51NkQH+jZubKBLljhsKLOGdn3cOa2yeDK9CzUB",
	"6u7N357S26tYm90I5q3X+kFkHpmaQpouaWNOSa4C5zPGtGjDS9t++s9Bxq4NNTUw0LnNH54tyCOXQ9Wn",
	"IvkSqx7UptT6eGDbXv1VHR6NqMIBfhz0ICe9LJDQh3gBK8aaWQkJGFkwpYddq+9q0gl+WGGLb8iYAV2O",
	"pL6p6nC0un5RgYTUWrSSB0psvt/7qnjaW+a0gWfXRuNk0b+HHqkPj1R6wwXSjaxK4IfnzEC8tg+4Ug8G",
	"WgVSZtUx30lRu8ih7Sqyr+VjrHEhdwqENU1D9xv0ozRxAffy9Pz127mKH61ZJsfrZ7PcM3tKX2yvvSqB",
	"dy+R83OZiwbzF+ZZjLlDtGM867aDdNte91XNPI2Eh+54Xj+Zg7X4joXzzkTxeJftzh9f02HfjaPoUaQO",
	"Ne/NRi+bsOgBJ6znwtOSlnpcegzreKGXdGjgiftdGwL/IjT8hBKKgiBVoCArtNrguJuUNEpjo/I/lc0G",
	"hu+az8aHUzMaB3gunxq8vsYPNzOBJndWxdG/9BqmsCZyYZqm1uT1dH2W2SKN/wAYQLNLdKNB3Cta25JE",
	"cJjxqyAXzvqx4g6xXm13w391NrCXwEZ6JW/1obfMUpaan79/tMtDsGYXg5fN+CXTKunS55iW0LkTTgJi",
	"h0J2FAZerV59NzSiU73z7yfvJ6OjN9YTF25mjcGMvz4jlIuWtENMr6SRKyb5p6vusNgv+HCAlZ1JVSyt",
	"F5+u9sfiqFotqr8DAAD//2kDPpAsEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
