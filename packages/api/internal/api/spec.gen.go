// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/f8AAAD//6s2Nh+zjAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
