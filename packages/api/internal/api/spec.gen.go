// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mzY/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
