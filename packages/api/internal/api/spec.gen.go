// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
