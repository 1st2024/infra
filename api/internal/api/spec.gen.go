// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY32/bNhD+Vwhuj0rkthlQ+K35sS7A0hp115fCGBjpZLGlSJak7AWG/veBpH5Tzpwg",
	"c9KX1pGou++++3jH4w4nopCCAzcaz3dYJzkUxP284huqBC+Am6UhBuwz4GWB51/xeUlZSvkaR/h3Qhmk",
	"OMKXggNeRdjcScBzrI2yC6ooMPSXTGtzUgkJylDwvhsvvyrI8Bz/EnfY4hpYHKCqqggr+FFSBamF5q2s",
	"rF+lhArdJCJ1XlLQiaLSUMHx3C9G7l2EM6EKYvAcU27evMZtTJQbWIOyQRWgNVnvM4QDGkYoa0eNFQv3",
	"A2x7wYW4U5Duf2qgcD8CousHRCly5/6GQrIDOP3crBujbA1E3nsNcwlau2CnqF1yKiWY68uQmusUuKEZ",
	"BYVEhohjG2m/Hm1zmuT1v1QjkwOCjg5EtBYJJcZJLYgcUmquOLm1SnRuM1Iyg+cZYRqiEYyP7gdKwYAq",
	"KKd8jWjmHGofmPVPkM6JghRJUJpqYzFYL82aDsWtEAwIn0xxR4albj9vjAI/gDKL0a+dIuHlsD9wy/1u",
	"crw+Bc0Rrt8dxldgaM+O7IxGXT6GsUUTOf3c22NNdfwgUvimcYTfC0ZckTwnOscRXtyZXPCJImnBUJ6J",
	"MKBL2NwK8R29W1zbEKhh0D3FEd5Y3tzKV6ez05mlR0jgRFI8x2/cowhLYnIntBj4Rse7QRiVd8rAwJR7",
	"+9wLr6+Xnjiw86hchq/T9psrvtEXA7osDkUKu+00nn/dYWo9WGw4wpwUNrBk9EWXIaNKiOr+NFH9qpVd",
	"rKXg2u+p17OzMJxlmSSgdVYydod8zOlY7JbCs9nM1zNu6lpMpGQ0cUHG37TfxB2YezuWawguxUMwF4Rz",
	"YWoYUyh+OwaKJagNKASu/21z4B6QrYoBJNtTyNomD1shuQ0ghTYh0RcKiAFEEIettYEyoUY1J9DNQmjz",
	"LKr5UYI25yK9ezK2R728GhYbC6p6sFwTR2mKCH9OtSajxL4AvTpIVq8BpFCvVTRdA2NZ3jKqc9ebJxW9",
	"8Av8prAdqt8fm978YHnXVl9CbayhtBt/HGNWn4/bAI+VcX80l/fDe1Cy20lDlhOZ9vOJPzzYhU127+t5",
	"izLMrZ9Pfsr6tWdke2wde4y0zl68tHIgzLiKsYYJGf3hXqMkh+R7oJf3YPx7HPA3C0198ilGW6KRbnuC",
	"DcjiqE+uei+SP6k2iDCG2pUTcJbduylAB+ehHU8JYx8zp/j7UtPMRNUqGGAnan+/HyowpeK2IfYjO25R",
	"YlS7ztO570mlfXjAMakZiQSvhxbb5CZbyCBP/8vJpU3JIbv91ZN5Hrg95BzUjnbHqhbnJEU150fWWXvE",
	"aUOe1lm/HMS7dqQ9ZMQ7VIN+eaPCZW9q/u8+15+xjzXZ9URyxIQNZqhHJi1WkCmoz6RTB5VP/v3gTgX+",
	"McBTd6dlNDK0AGQEYnQDU2eWII21yReVzZqGMJ9n/tNj5LPG0NuC6KT9ZeeiTJQ83Zthd2llt5Mnc+jh",
	"3eIaAU+loO5gWSqG5zg3Rup5HAue+rue00QUMa6igKom8bUFtKUmF6VBWkJCMwopkkKFhntCO9k1F17V",
	"6chfhDdEUXLLpi4q60tW/Hfvvmx0HXc5urYMb+9aI3057bOiez3iICIaFpK9NNin1cmzseFADb5/O3s7",
	"Cz5dCGXsRk4E55DYn09I5aoV7ZjTG8LJ2or+y03/8DgsAHpClVej0/2Xm+4zd4SuVtW/AQAA//8JtqRW",
	"fBoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
