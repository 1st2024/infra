// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
