// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: filesystem/filesystem.proto

package filesystemconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	filesystem "github.com/e2b-dev/infra/packages/envd/internal/services/spec/filesystem"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FilesystemName is the fully-qualified name of the Filesystem service.
	FilesystemName = "filesystem.Filesystem"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FilesystemStatProcedure is the fully-qualified name of the Filesystem's Stat RPC.
	FilesystemStatProcedure = "/filesystem.Filesystem/Stat"
	// FilesystemMakeDirProcedure is the fully-qualified name of the Filesystem's MakeDir RPC.
	FilesystemMakeDirProcedure = "/filesystem.Filesystem/MakeDir"
	// FilesystemListProcedure is the fully-qualified name of the Filesystem's List RPC.
	FilesystemListProcedure = "/filesystem.Filesystem/List"
	// FilesystemWatchProcedure is the fully-qualified name of the Filesystem's Watch RPC.
	FilesystemWatchProcedure = "/filesystem.Filesystem/Watch"
	// FilesystemRemoveProcedure is the fully-qualified name of the Filesystem's Remove RPC.
	FilesystemRemoveProcedure = "/filesystem.Filesystem/Remove"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	filesystemServiceDescriptor       = filesystem.File_filesystem_filesystem_proto.Services().ByName("Filesystem")
	filesystemStatMethodDescriptor    = filesystemServiceDescriptor.Methods().ByName("Stat")
	filesystemMakeDirMethodDescriptor = filesystemServiceDescriptor.Methods().ByName("MakeDir")
	filesystemListMethodDescriptor    = filesystemServiceDescriptor.Methods().ByName("List")
	filesystemWatchMethodDescriptor   = filesystemServiceDescriptor.Methods().ByName("Watch")
	filesystemRemoveMethodDescriptor  = filesystemServiceDescriptor.Methods().ByName("Remove")
)

// FilesystemClient is a client for the filesystem.Filesystem service.
type FilesystemClient interface {
	Stat(context.Context, *connect.Request[filesystem.StatRequest]) (*connect.Response[filesystem.StatResponse], error)
	MakeDir(context.Context, *connect.Request[filesystem.MakeDirRequest]) (*connect.Response[filesystem.MakeDirResponse], error)
	List(context.Context, *connect.Request[filesystem.ListRequest]) (*connect.Response[filesystem.ListResponse], error)
	Watch(context.Context, *connect.Request[filesystem.WatchRequest]) (*connect.ServerStreamForClient[filesystem.WatchResponse], error)
	Remove(context.Context, *connect.Request[filesystem.RemoveRequest]) (*connect.Response[filesystem.RemoveResponse], error)
}

// NewFilesystemClient constructs a client for the filesystem.Filesystem service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFilesystemClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FilesystemClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &filesystemClient{
		stat: connect.NewClient[filesystem.StatRequest, filesystem.StatResponse](
			httpClient,
			baseURL+FilesystemStatProcedure,
			connect.WithSchema(filesystemStatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		makeDir: connect.NewClient[filesystem.MakeDirRequest, filesystem.MakeDirResponse](
			httpClient,
			baseURL+FilesystemMakeDirProcedure,
			connect.WithSchema(filesystemMakeDirMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[filesystem.ListRequest, filesystem.ListResponse](
			httpClient,
			baseURL+FilesystemListProcedure,
			connect.WithSchema(filesystemListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		watch: connect.NewClient[filesystem.WatchRequest, filesystem.WatchResponse](
			httpClient,
			baseURL+FilesystemWatchProcedure,
			connect.WithSchema(filesystemWatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		remove: connect.NewClient[filesystem.RemoveRequest, filesystem.RemoveResponse](
			httpClient,
			baseURL+FilesystemRemoveProcedure,
			connect.WithSchema(filesystemRemoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// filesystemClient implements FilesystemClient.
type filesystemClient struct {
	stat    *connect.Client[filesystem.StatRequest, filesystem.StatResponse]
	makeDir *connect.Client[filesystem.MakeDirRequest, filesystem.MakeDirResponse]
	list    *connect.Client[filesystem.ListRequest, filesystem.ListResponse]
	watch   *connect.Client[filesystem.WatchRequest, filesystem.WatchResponse]
	remove  *connect.Client[filesystem.RemoveRequest, filesystem.RemoveResponse]
}

// Stat calls filesystem.Filesystem.Stat.
func (c *filesystemClient) Stat(ctx context.Context, req *connect.Request[filesystem.StatRequest]) (*connect.Response[filesystem.StatResponse], error) {
	return c.stat.CallUnary(ctx, req)
}

// MakeDir calls filesystem.Filesystem.MakeDir.
func (c *filesystemClient) MakeDir(ctx context.Context, req *connect.Request[filesystem.MakeDirRequest]) (*connect.Response[filesystem.MakeDirResponse], error) {
	return c.makeDir.CallUnary(ctx, req)
}

// List calls filesystem.Filesystem.List.
func (c *filesystemClient) List(ctx context.Context, req *connect.Request[filesystem.ListRequest]) (*connect.Response[filesystem.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Watch calls filesystem.Filesystem.Watch.
func (c *filesystemClient) Watch(ctx context.Context, req *connect.Request[filesystem.WatchRequest]) (*connect.ServerStreamForClient[filesystem.WatchResponse], error) {
	return c.watch.CallServerStream(ctx, req)
}

// Remove calls filesystem.Filesystem.Remove.
func (c *filesystemClient) Remove(ctx context.Context, req *connect.Request[filesystem.RemoveRequest]) (*connect.Response[filesystem.RemoveResponse], error) {
	return c.remove.CallUnary(ctx, req)
}

// FilesystemHandler is an implementation of the filesystem.Filesystem service.
type FilesystemHandler interface {
	Stat(context.Context, *connect.Request[filesystem.StatRequest]) (*connect.Response[filesystem.StatResponse], error)
	MakeDir(context.Context, *connect.Request[filesystem.MakeDirRequest]) (*connect.Response[filesystem.MakeDirResponse], error)
	List(context.Context, *connect.Request[filesystem.ListRequest]) (*connect.Response[filesystem.ListResponse], error)
	Watch(context.Context, *connect.Request[filesystem.WatchRequest], *connect.ServerStream[filesystem.WatchResponse]) error
	Remove(context.Context, *connect.Request[filesystem.RemoveRequest]) (*connect.Response[filesystem.RemoveResponse], error)
}

// NewFilesystemHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFilesystemHandler(svc FilesystemHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	filesystemStatHandler := connect.NewUnaryHandler(
		FilesystemStatProcedure,
		svc.Stat,
		connect.WithSchema(filesystemStatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemMakeDirHandler := connect.NewUnaryHandler(
		FilesystemMakeDirProcedure,
		svc.MakeDir,
		connect.WithSchema(filesystemMakeDirMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemListHandler := connect.NewUnaryHandler(
		FilesystemListProcedure,
		svc.List,
		connect.WithSchema(filesystemListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemWatchHandler := connect.NewServerStreamHandler(
		FilesystemWatchProcedure,
		svc.Watch,
		connect.WithSchema(filesystemWatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemRemoveHandler := connect.NewUnaryHandler(
		FilesystemRemoveProcedure,
		svc.Remove,
		connect.WithSchema(filesystemRemoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/filesystem.Filesystem/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FilesystemStatProcedure:
			filesystemStatHandler.ServeHTTP(w, r)
		case FilesystemMakeDirProcedure:
			filesystemMakeDirHandler.ServeHTTP(w, r)
		case FilesystemListProcedure:
			filesystemListHandler.ServeHTTP(w, r)
		case FilesystemWatchProcedure:
			filesystemWatchHandler.ServeHTTP(w, r)
		case FilesystemRemoveProcedure:
			filesystemRemoveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFilesystemHandler returns CodeUnimplemented from all methods.
type UnimplementedFilesystemHandler struct{}

func (UnimplementedFilesystemHandler) Stat(context.Context, *connect.Request[filesystem.StatRequest]) (*connect.Response[filesystem.StatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("filesystem.Filesystem.Stat is not implemented"))
}

func (UnimplementedFilesystemHandler) MakeDir(context.Context, *connect.Request[filesystem.MakeDirRequest]) (*connect.Response[filesystem.MakeDirResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("filesystem.Filesystem.MakeDir is not implemented"))
}

func (UnimplementedFilesystemHandler) List(context.Context, *connect.Request[filesystem.ListRequest]) (*connect.Response[filesystem.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("filesystem.Filesystem.List is not implemented"))
}

func (UnimplementedFilesystemHandler) Watch(context.Context, *connect.Request[filesystem.WatchRequest], *connect.ServerStream[filesystem.WatchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("filesystem.Filesystem.Watch is not implemented"))
}

func (UnimplementedFilesystemHandler) Remove(context.Context, *connect.Request[filesystem.RemoveRequest]) (*connect.Response[filesystem.RemoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("filesystem.Filesystem.Remove is not implemented"))
}
