// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9U+KrXGj8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
