// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envd/network/v1/network.proto

package networkv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/e2b-dev/infra/packages/envd/internal/services/spec/envd/network/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NetworkServiceName is the fully-qualified name of the NetworkService service.
	NetworkServiceName = "envd.network.v1.NetworkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetworkServiceListPortsProcedure is the fully-qualified name of the NetworkService's ListPorts
	// RPC.
	NetworkServiceListPortsProcedure = "/envd.network.v1.NetworkService/ListPorts"
	// NetworkServiceWatchPortsProcedure is the fully-qualified name of the NetworkService's WatchPorts
	// RPC.
	NetworkServiceWatchPortsProcedure = "/envd.network.v1.NetworkService/WatchPorts"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	networkServiceServiceDescriptor          = v1.File_envd_network_v1_network_proto.Services().ByName("NetworkService")
	networkServiceListPortsMethodDescriptor  = networkServiceServiceDescriptor.Methods().ByName("ListPorts")
	networkServiceWatchPortsMethodDescriptor = networkServiceServiceDescriptor.Methods().ByName("WatchPorts")
)

// NetworkServiceClient is a client for the envd.network.v1.NetworkService service.
type NetworkServiceClient interface {
	ListPorts(context.Context, *connect.Request[v1.ListPortsRequest]) (*connect.Response[v1.ListPortsResponse], error)
	WatchPorts(context.Context, *connect.Request[v1.WatchPortsRequest]) (*connect.ServerStreamForClient[v1.WatchPortsResponse], error)
}

// NewNetworkServiceClient constructs a client for the envd.network.v1.NetworkService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetworkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NetworkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &networkServiceClient{
		listPorts: connect.NewClient[v1.ListPortsRequest, v1.ListPortsResponse](
			httpClient,
			baseURL+NetworkServiceListPortsProcedure,
			connect.WithSchema(networkServiceListPortsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		watchPorts: connect.NewClient[v1.WatchPortsRequest, v1.WatchPortsResponse](
			httpClient,
			baseURL+NetworkServiceWatchPortsProcedure,
			connect.WithSchema(networkServiceWatchPortsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// networkServiceClient implements NetworkServiceClient.
type networkServiceClient struct {
	listPorts  *connect.Client[v1.ListPortsRequest, v1.ListPortsResponse]
	watchPorts *connect.Client[v1.WatchPortsRequest, v1.WatchPortsResponse]
}

// ListPorts calls envd.network.v1.NetworkService.ListPorts.
func (c *networkServiceClient) ListPorts(ctx context.Context, req *connect.Request[v1.ListPortsRequest]) (*connect.Response[v1.ListPortsResponse], error) {
	return c.listPorts.CallUnary(ctx, req)
}

// WatchPorts calls envd.network.v1.NetworkService.WatchPorts.
func (c *networkServiceClient) WatchPorts(ctx context.Context, req *connect.Request[v1.WatchPortsRequest]) (*connect.ServerStreamForClient[v1.WatchPortsResponse], error) {
	return c.watchPorts.CallServerStream(ctx, req)
}

// NetworkServiceHandler is an implementation of the envd.network.v1.NetworkService service.
type NetworkServiceHandler interface {
	ListPorts(context.Context, *connect.Request[v1.ListPortsRequest]) (*connect.Response[v1.ListPortsResponse], error)
	WatchPorts(context.Context, *connect.Request[v1.WatchPortsRequest], *connect.ServerStream[v1.WatchPortsResponse]) error
}

// NewNetworkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetworkServiceHandler(svc NetworkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	networkServiceListPortsHandler := connect.NewUnaryHandler(
		NetworkServiceListPortsProcedure,
		svc.ListPorts,
		connect.WithSchema(networkServiceListPortsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceWatchPortsHandler := connect.NewServerStreamHandler(
		NetworkServiceWatchPortsProcedure,
		svc.WatchPorts,
		connect.WithSchema(networkServiceWatchPortsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envd.network.v1.NetworkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetworkServiceListPortsProcedure:
			networkServiceListPortsHandler.ServeHTTP(w, r)
		case NetworkServiceWatchPortsProcedure:
			networkServiceWatchPortsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetworkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetworkServiceHandler struct{}

func (UnimplementedNetworkServiceHandler) ListPorts(context.Context, *connect.Request[v1.ListPortsRequest]) (*connect.Response[v1.ListPortsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.network.v1.NetworkService.ListPorts is not implemented"))
}

func (UnimplementedNetworkServiceHandler) WatchPorts(context.Context, *connect.Request[v1.WatchPortsRequest], *connect.ServerStream[v1.WatchPortsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envd.network.v1.NetworkService.WatchPorts is not implemented"))
}
