// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Download a file
	// (GET /filesystem/files/{path})
	GetFilesystemFilesPath(c *gin.Context, path FilePath)
	// Upload a file
	// (PUT /filesystem/files/{path})
	PutFilesystemFilesPath(c *gin.Context, path FilePath, params PutFilesystemFilesPathParams)
	// Check the health of the envd
	// (GET /health)
	GetHealth(c *gin.Context)
	// Ensure the time and metadata is synced with the host
	// (POST /host/sync)
	PostHostSync(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetFilesystemFilesPath operation middleware
func (siw *ServerInterfaceWrapper) GetFilesystemFilesPath(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path FilePath

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFilesystemFilesPath(c, path)
}

// PutFilesystemFilesPath operation middleware
func (siw *ServerInterfaceWrapper) PutFilesystemFilesPath(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path FilePath

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutFilesystemFilesPathParams

	// ------------- Optional query parameter "User" -------------

	err = runtime.BindQueryParameter("form", true, false, "User", c.Request.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter User: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Mode" -------------

	err = runtime.BindQueryParameter("form", true, false, "Mode", c.Request.URL.Query(), &params.Mode)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Mode: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "overwrite" -------------

	err = runtime.BindQueryParameter("form", true, false, "overwrite", c.Request.URL.Query(), &params.Overwrite)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter overwrite: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutFilesystemFilesPath(c, path, params)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// PostHostSync operation middleware
func (siw *ServerInterfaceWrapper) PostHostSync(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostHostSync(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/filesystem/files/:path", wrapper.GetFilesystemFilesPath)
	router.PUT(options.BaseURL+"/filesystem/files/:path", wrapper.PutFilesystemFilesPath)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.POST(options.BaseURL+"/host/sync", wrapper.PostHostSync)
}
