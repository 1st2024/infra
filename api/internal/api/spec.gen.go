// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY32/bNhD+V4jbHtXI/TGg8FvTdJuBJQtmrC+FMTDS2WYmkRx5chYY+t8HkrJMSVbt",
	"tG66l0ShTsfvvvt4d8wWMlVqJVGShekWbLbGkvvHKyyQ8IPcCKNkiZLcojZKoyGB3iRTOc6l0BppduUW",
	"6FEjTMGSEXIFdZ2AwX8qYTCH6aee+SLZmau7e8wI6gR6u/Gi+H0J009b+NHgEqbwQ7qHmzZY0xt8iL+r",
	"kz5MkR/AloAlTujeoKxKh++yEkXuXibwMxcF5pDAlZIYQR2JTDjT4G8Y1qIb2NyZ/anzZvOnMXpW1N3N",
	"xgNI4IMxyhxG637naDMjNAklYRqMmX+XwFKZkhNMQUh6/Qpa30ISrtA45yVay1djjuCUKGDvxbHdU8QX",
	"sJyjDtIhLO1Bi2aBG8Mf/d9Y6qKXmhuV4719eiJaXw2QQym5wYc5WuuZOhpfl9dZjpLEUqBhasm4TxWz",
	"wZ49rEW2bn4Ky2iNDPdcMm6tygQnL7MnHfc6gXHAhUB5AlaHJtgOd0/ABvenuWmMj0axd5rsYS5qZybk",
	"Ug23usLNnVJ/s3e3M+dcUIH7VUhggyaQAC8vJhcTB1xplFwLmMJrv5SA5rT2zKQoNzZs4sqxe3LEcbfZ",
	"LPeOmzJtIQBHS5cqfww6kLQrpVoXIvOfpfc25CAUUPf0ufI67AN1lyMyFfoFq5W0LqGyKooEiK+sY9BH",
	"4NKvlaVhALfKUgu/dbGFV5PJ2WLot4jaH/E4a/Mqy9DaZVUUjywz6BTOuIy176XRC6pOQobStix/Pkhf",
	"/L9RokZ6zJdlqw1s2znGtQOxwgMR/oI+wPe9Uqa54SUSGuv7uHBcO3FDApKX7mT0i18XahIF3z+oi2+o",
	"mJ5cRlK/Rl7QOuKkK6pf/WuWrTFzJ39AWHg/Ivyuqz+CYNgDt8y2WoWALG2KlB1F8puwxHhRsNbyAJz5",
	"/t1X8do2zdPmt11X8INSt60eOacGqTLSHdQ4sjqBn86pBD+FHIAS5pxCWBJyFW0fSaVdjMtf18t7X2sY",
	"3zlgSjb9yWzQDNLkCkknT+evI9FkcbR2OHG8PNvOnW1Pqc9tF68TePMcOb/kOWs4f2ad+ZgjoY3pLC4H",
	"6badXuruDNEfWdz6yRoM5jsVzqMB6Xi1j8epr6n0b4ZRdCQSQs07o97zJswjcAnrQHha0lKDS4PWdxhd",
	"0aG24N/HezD8l1C6GyETZBmJEhkpVogNDqtJRYM0Ni7/V9lsaPiu+WwwnJpRfx9xxyeQ1/X47nbGUOZa",
	"CX+TqUwBU1gTaTtNUyXzcFm4yFSZ+v9n9KjZJbrxwB4ErVVFzGrM3CUnZ1qZoeNIWC+2u7tMfdHbL4EN",
	"N4LfFYeuZkteFe42/1e73CdrdtW7qA0vZq2TWD5jXmzUE04iYsdCNkqDW61ffDc2PKjO928nbyeDT2+V",
	"IXdwMyUlZu7xjFQuWtH2Ob3mkq+cyD9ex8Ni98DbA6qMJma2VIZ9vN5/5kfmelH/FwAA//+9PlxibxQA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
