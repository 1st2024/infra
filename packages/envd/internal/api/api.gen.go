//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240519200907-da9077bb5ffe DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// FilePath defines model for FilePath.
type FilePath = string

// Mode defines model for Mode.
type Mode = string

// Overwrite defines model for Overwrite.
type Overwrite = bool

// User defines model for User.
type User = string

// ConflictError defines model for ConflictError.
type ConflictError = Error

// DirectoryPathError defines model for DirectoryPathError.
type DirectoryPathError = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// PutFilesystemFilesPathMultipartBody defines parameters for PutFilesystemFilesPath.
type PutFilesystemFilesPathMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// PutFilesystemFilesPathParams defines parameters for PutFilesystemFilesPath.
type PutFilesystemFilesPathParams struct {
	// User User owning the file
	User *User `form:"User,omitempty" json:"User,omitempty"`

	// Mode File permissions in octal format (e.g., 0755)
	Mode *Mode `form:"Mode,omitempty" json:"Mode,omitempty"`

	// Overwrite Overwrite the file if it exists
	Overwrite *Overwrite `form:"overwrite,omitempty" json:"overwrite,omitempty"`
}

// PutFilesystemFilesPathMultipartRequestBody defines body for PutFilesystemFilesPath for multipart/form-data ContentType.
type PutFilesystemFilesPathMultipartRequestBody PutFilesystemFilesPathMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Download a file
	// (GET /filesystem/files/{path})
	GetFilesystemFilesPath(w http.ResponseWriter, r *http.Request, path FilePath)
	// Upload a file
	// (PUT /filesystem/files/{path})
	PutFilesystemFilesPath(w http.ResponseWriter, r *http.Request, path FilePath, params PutFilesystemFilesPathParams)
	// Check the health of the envd
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Ensure the time and metadata is synced with the host
	// (POST /host/sync)
	PostHostSync(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetFilesystemFilesPath operation middleware
func (siw *ServerInterfaceWrapper) GetFilesystemFilesPath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "path" -------------
	var path FilePath

	err = runtime.BindStyledParameterWithOptions("simple", "path", r.PathValue("path"), &path, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFilesystemFilesPath(w, r, path)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutFilesystemFilesPath operation middleware
func (siw *ServerInterfaceWrapper) PutFilesystemFilesPath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "path" -------------
	var path FilePath

	err = runtime.BindStyledParameterWithOptions("simple", "path", r.PathValue("path"), &path, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutFilesystemFilesPathParams

	// ------------- Optional query parameter "User" -------------

	err = runtime.BindQueryParameter("form", true, false, "User", r.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "User", Err: err})
		return
	}

	// ------------- Optional query parameter "Mode" -------------

	err = runtime.BindQueryParameter("form", true, false, "Mode", r.URL.Query(), &params.Mode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Mode", Err: err})
		return
	}

	// ------------- Optional query parameter "overwrite" -------------

	err = runtime.BindQueryParameter("form", true, false, "overwrite", r.URL.Query(), &params.Overwrite)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "overwrite", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutFilesystemFilesPath(w, r, path, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostHostSync operation middleware
func (siw *ServerInterfaceWrapper) PostHostSync(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostHostSync(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/filesystem/files/{path}", wrapper.GetFilesystemFilesPath)
	m.HandleFunc("PUT "+options.BaseURL+"/filesystem/files/{path}", wrapper.PutFilesystemFilesPath)
	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.GetHealth)
	m.HandleFunc("POST "+options.BaseURL+"/host/sync", wrapper.PostHostSync)

	return m
}

type ConflictErrorJSONResponse Error

type DirectoryPathErrorJSONResponse Error

type DownloadSuccessResponseHeaders struct {
	CacheControl string
}
type DownloadSuccessApplicationoctetStreamResponse struct {
	Body io.Reader

	Headers       DownloadSuccessResponseHeaders
	ContentLength int64
}

type ExistingFileUploadSuccessResponseHeaders struct {
	CacheControl string
}
type ExistingFileUploadSuccessResponse struct {
	Headers ExistingFileUploadSuccessResponseHeaders
}

type InternalServerErrorJSONResponse Error

type NewFileUploadSuccessResponseHeaders struct {
	CacheControl string
	Location     string
}
type NewFileUploadSuccessResponse struct {
	Headers NewFileUploadSuccessResponseHeaders
}

type GetFilesystemFilesPathRequestObject struct {
	Path FilePath `json:"path"`
}

type GetFilesystemFilesPathResponseObject interface {
	VisitGetFilesystemFilesPathResponse(w http.ResponseWriter) error
}

type GetFilesystemFilesPath200ApplicationoctetStreamResponse struct {
	DownloadSuccessApplicationoctetStreamResponse
}

func (response GetFilesystemFilesPath200ApplicationoctetStreamResponse) VisitGetFilesystemFilesPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetFilesystemFilesPath400JSONResponse struct{ DirectoryPathErrorJSONResponse }

func (response GetFilesystemFilesPath400JSONResponse) VisitGetFilesystemFilesPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutFilesystemFilesPathRequestObject struct {
	Path   FilePath `json:"path"`
	Params PutFilesystemFilesPathParams
	Body   *multipart.Reader
}

type PutFilesystemFilesPathResponseObject interface {
	VisitPutFilesystemFilesPathResponse(w http.ResponseWriter) error
}

type PutFilesystemFilesPath200Response = ExistingFileUploadSuccessResponse

func (response PutFilesystemFilesPath200Response) VisitPutFilesystemFilesPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.WriteHeader(200)
	return nil
}

type PutFilesystemFilesPath201Response = NewFileUploadSuccessResponse

func (response PutFilesystemFilesPath201Response) VisitPutFilesystemFilesPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)
	return nil
}

type PutFilesystemFilesPath400JSONResponse struct{ DirectoryPathErrorJSONResponse }

func (response PutFilesystemFilesPath400JSONResponse) VisitPutFilesystemFilesPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutFilesystemFilesPath409JSONResponse struct{ ConflictErrorJSONResponse }

func (response PutFilesystemFilesPath409JSONResponse) VisitPutFilesystemFilesPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth204Response struct {
}

func (response GetHealth204Response) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetHealth500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetHealth500JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostHostSyncRequestObject struct {
}

type PostHostSyncResponseObject interface {
	VisitPostHostSyncResponse(w http.ResponseWriter) error
}

type PostHostSync204Response struct {
}

func (response PostHostSync204Response) VisitPostHostSyncResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostHostSync500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PostHostSync500JSONResponse) VisitPostHostSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Download a file
	// (GET /filesystem/files/{path})
	GetFilesystemFilesPath(ctx context.Context, request GetFilesystemFilesPathRequestObject) (GetFilesystemFilesPathResponseObject, error)
	// Upload a file
	// (PUT /filesystem/files/{path})
	PutFilesystemFilesPath(ctx context.Context, request PutFilesystemFilesPathRequestObject) (PutFilesystemFilesPathResponseObject, error)
	// Check the health of the envd
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Ensure the time and metadata is synced with the host
	// (POST /host/sync)
	PostHostSync(ctx context.Context, request PostHostSyncRequestObject) (PostHostSyncResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetFilesystemFilesPath operation middleware
func (sh *strictHandler) GetFilesystemFilesPath(w http.ResponseWriter, r *http.Request, path FilePath) {
	var request GetFilesystemFilesPathRequestObject

	request.Path = path

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFilesystemFilesPath(ctx, request.(GetFilesystemFilesPathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFilesystemFilesPath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFilesystemFilesPathResponseObject); ok {
		if err := validResponse.VisitGetFilesystemFilesPathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutFilesystemFilesPath operation middleware
func (sh *strictHandler) PutFilesystemFilesPath(w http.ResponseWriter, r *http.Request, path FilePath, params PutFilesystemFilesPathParams) {
	var request PutFilesystemFilesPathRequestObject

	request.Path = path
	request.Params = params

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutFilesystemFilesPath(ctx, request.(PutFilesystemFilesPathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutFilesystemFilesPath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutFilesystemFilesPathResponseObject); ok {
		if err := validResponse.VisitPutFilesystemFilesPathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostHostSync operation middleware
func (sh *strictHandler) PostHostSync(w http.ResponseWriter, r *http.Request) {
	var request PostHostSyncRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostHostSync(ctx, request.(PostHostSyncRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostHostSync")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostHostSyncResponseObject); ok {
		if err := validResponse.VisitPostHostSyncResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
