// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8s8AAAD//zS9FvHFHQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
