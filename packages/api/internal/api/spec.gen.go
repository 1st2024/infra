// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"teYPJDYfmjvz6nr1vwAAAP//wCXWTyJSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
