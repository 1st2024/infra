// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
