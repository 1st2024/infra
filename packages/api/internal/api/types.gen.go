// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for EnvironmentState.
const (
	Building EnvironmentState = "Building"
	Done     EnvironmentState = "Done"
	Failed   EnvironmentState = "Failed"
)

// Defines values for Template.
const (
	Bash       Template = "Bash"
	Go         Template = "Go"
	Nodejs     Template = "Nodejs"
	Python3    Template = "Python3"
	Rust       Template = "Rust"
	Typescript Template = "Typescript"
)

// Environment defines model for Environment.
type Environment struct {
	Id       string  `json:"id"`
	Template *string `json:"template,omitempty"`
	Title    *string `json:"title,omitempty"`
}

// EnvironmentState defines model for EnvironmentState.
type EnvironmentState string

// EnvironmentStateUpdate defines model for EnvironmentStateUpdate.
type EnvironmentStateUpdate struct {
	State EnvironmentState `json:"state"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error
	Message string `json:"message"`
}

// NewEnvironment defines model for NewEnvironment.
type NewEnvironment struct {
	Template NewEnvironment_Template `json:"template"`
	Title    *string                 `json:"title,omitempty"`
}

// NewEnvironmentTemplate1 defines model for .
type NewEnvironmentTemplate1 = string

// NewEnvironment_Template defines model for NewEnvironment.Template.
type NewEnvironment_Template struct {
	union json.RawMessage
}

// NewSession defines model for NewSession.
type NewSession struct {
	// CodeSnippetID Identifier of a code snippet which which is the environment associated
	CodeSnippetID string `json:"codeSnippetID"`

	// EditEnabled Option determining if the session is a shared persistent edit session
	EditEnabled *bool `json:"editEnabled,omitempty"`
}

// Session defines model for Session.
type Session struct {
	// ClientID Identifier of the client
	ClientID string `json:"clientID"`

	// CodeSnippetID Identifier of a code snippet which which is the environment associated
	CodeSnippetID string `json:"codeSnippetID"`

	// EditEnabled Information if the session is a shared persistent edit session
	EditEnabled bool `json:"editEnabled"`

	// SessionID Identifier of the session
	SessionID string `json:"sessionID"`
}

// Template defines model for Template.
type Template string

// ApiKeyOpt defines model for apiKeyOpt.
type ApiKeyOpt = string

// ApiKeyReq defines model for apiKeyReq.
type ApiKeyReq = string

// CodeSnippetID defines model for codeSnippetID.
type CodeSnippetID = string

// SessionID defines model for sessionID.
type SessionID = string

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N500 defines model for 500.
type N500 = Error

// GetEnvsParams defines parameters for GetEnvs.
type GetEnvsParams struct {
	ApiKey ApiKeyReq `form:"api_key" json:"api_key"`
}

// PostEnvsParams defines parameters for PostEnvs.
type PostEnvsParams struct {
	ApiKey ApiKeyReq `form:"api_key" json:"api_key"`
}

// DeleteEnvsCodeSnippetIDParams defines parameters for DeleteEnvsCodeSnippetID.
type DeleteEnvsCodeSnippetIDParams struct {
	ApiKey ApiKeyReq `form:"api_key" json:"api_key"`
}

// PatchEnvsCodeSnippetIDParams defines parameters for PatchEnvsCodeSnippetID.
type PatchEnvsCodeSnippetIDParams struct {
	ApiKey ApiKeyReq `form:"api_key" json:"api_key"`
}

// PostEnvsCodeSnippetIDParams defines parameters for PostEnvsCodeSnippetID.
type PostEnvsCodeSnippetIDParams struct {
	ApiKey ApiKeyReq `form:"api_key" json:"api_key"`
}

// PutEnvsCodeSnippetIDStateParams defines parameters for PutEnvsCodeSnippetIDState.
type PutEnvsCodeSnippetIDStateParams struct {
	ApiKey ApiKeyReq `form:"api_key" json:"api_key"`
}

// GetSessionsParams defines parameters for GetSessions.
type GetSessionsParams struct {
	ApiKey ApiKeyReq `form:"api_key" json:"api_key"`
}

// PostSessionsParams defines parameters for PostSessions.
type PostSessionsParams struct {
	ApiKey *ApiKeyOpt `form:"api_key,omitempty" json:"api_key,omitempty"`
}

// DeleteSessionsSessionIDParams defines parameters for DeleteSessionsSessionID.
type DeleteSessionsSessionIDParams struct {
	ApiKey ApiKeyReq `form:"api_key" json:"api_key"`
}

// PostSessionsSessionIDRefreshParams defines parameters for PostSessionsSessionIDRefresh.
type PostSessionsSessionIDRefreshParams struct {
	ApiKey *ApiKeyOpt `form:"api_key,omitempty" json:"api_key,omitempty"`
}

// PostEnvsJSONRequestBody defines body for PostEnvs for application/json ContentType.
type PostEnvsJSONRequestBody = NewEnvironment

// PostEnvsCodeSnippetIDJSONRequestBody defines body for PostEnvsCodeSnippetID for application/json ContentType.
type PostEnvsCodeSnippetIDJSONRequestBody = NewEnvironment

// PutEnvsCodeSnippetIDStateJSONRequestBody defines body for PutEnvsCodeSnippetIDState for application/json ContentType.
type PutEnvsCodeSnippetIDStateJSONRequestBody = EnvironmentStateUpdate

// PostSessionsJSONRequestBody defines body for PostSessions for application/json ContentType.
type PostSessionsJSONRequestBody = NewSession

// AsTemplate returns the union data inside the NewEnvironment_Template as a Template
func (t NewEnvironment_Template) AsTemplate() (Template, error) {
	var body Template
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTemplate overwrites any union data inside the NewEnvironment_Template as the provided Template
func (t *NewEnvironment_Template) FromTemplate(v Template) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTemplate performs a merge with any union data inside the NewEnvironment_Template, using the provided Template
func (t *NewEnvironment_Template) MergeTemplate(v Template) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNewEnvironmentTemplate1 returns the union data inside the NewEnvironment_Template as a NewEnvironmentTemplate1
func (t NewEnvironment_Template) AsNewEnvironmentTemplate1() (NewEnvironmentTemplate1, error) {
	var body NewEnvironmentTemplate1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewEnvironmentTemplate1 overwrites any union data inside the NewEnvironment_Template as the provided NewEnvironmentTemplate1
func (t *NewEnvironment_Template) FromNewEnvironmentTemplate1(v NewEnvironmentTemplate1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewEnvironmentTemplate1 performs a merge with any union data inside the NewEnvironment_Template, using the provided NewEnvironmentTemplate1
func (t *NewEnvironment_Template) MergeNewEnvironmentTemplate1(v NewEnvironmentTemplate1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NewEnvironment_Template) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NewEnvironment_Template) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
