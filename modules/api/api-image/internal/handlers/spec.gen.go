// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWwW6DRhD9ldW0RxTcRL1wS9u0tdSoUSPlElnRFgazKeyS3cGJZfHv1SzYLMaOLSVN",
	"q14csgxvZt4b3rCB1FS10ajJQbIBlxZYSX95rdcPsmwQkk0bwY1eKWt0hZr4Zm1NjZYU+tDUZPjktKpr",
	"pCeV8VGGLrWqJmU0JDDPUJPKFVphciEFPyD6B8RrodKi/1VOUIECh2xCOmdSJQkziIDWNUICjqzSS2gj",
	"yLD2JSjCyl9MIvoDaa1c8/+20aQqbgtQNxUkj6BNhs8OFhN8DseXRlnMOG6/zwGsL2TBTFlr7GGOpsT4",
	"YE8HRJAbW0mCBJSmq8uhW6UJl2i5+Aqdk8tjQHBOAzCgcLn36JyHmBRcKtTnyMmCdcGHBHId/pk4ffTJ",
	"RgLUKKg0aOhnY6v/0KSemKRFyxFK52Za0k+4+tOYv8T13ZxxFZU4nEIEK7SdgvDdxexixqSbGrWsFSRw",
	"5Y8iqCUVnoGYf5ZI0zy/oiypEGmBKcMybZJvzTNI4BdkdS262mjXcXk5m01B/sCXBh2JV+mEa9IUncub",
	"ElrfX4x65TUxzucfp7gzjm706kia1GjqzUfWdalS/2D87LrZ7YyLr761mEMC38SDs8W9rcWhi/mKxsXf",
	"7wou1yK1yFIKqUORvZIkl45V5HYWvrF+Ht1Rcn9TjoQsS7GLPMDw/XDvQxTszFCW5e85JI/vs7Jz+nYx",
	"8csTJFmkxmpmKWytjeD7z1TNe9uBUjr3LJUjpZdB+kCi3SG3tp27McqPXmghtwDC6N6L7ArtRCce05FQ",
	"fuB/MNn60xoOLawdWwfZBtt/8A3ZroOz346dZX+t6D5/oPox0cOXM94Ma6Pt5qBEwkOOy+dnT0QXvp2J",
	"/u88865rZYWE1vmXUDE4OzFEoGXl90O4yMYyRwFT+9tkcXIECN8orkup9jjfR3pf5o6hbLSbv1ZoX8FH",
	"hI4t5hZd4RdPQ4dWlr8f9ijwjVBnnFaRE/yJJ8iIUq1w6gcNTaTvIf8PE9Cz96/OQF8DyzEq4sgkDMf7",
	"Ut9KLZcM83AbLuKxEry/Jp/XwWdebqx4uB0e46+AdtH+HQAA//91J0tESw0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
