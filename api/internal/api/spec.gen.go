// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY227bRhN+lcX8/yVjKocCAe/iOG0F1K5RobkJhGJNjqR1yd3N7lCuIfDdi1lSFA9S",
	"JCeK0xuFWQ7n8H1zWm8gNYU1GjV5SDbg0xUWMjxeYY6EH/RaOaML1MSH1hmLjhQGkdRkONPKWqTpFR/Q",
	"o0VIwJNTeglVFYHDz6VymEHyaSA+j7bi5u4eU4IqgoE1mee/LyD5tIH/O1xAAv+Ld+7Gja/xDT50v6ui",
	"oZsq2+NbBJ4kIb9BXRbs32Wp8oxfRvCzVDlmEMGV0dhx9UBkikVrfeOw5v3AZiz2p80a409D9Kxe940d",
	"DiCCD84Zt99b/jdDnzplSRkNSS0swrsIFsYVkiABpen1K2h1K024RMfKC/ReLg8pglOigJ0WRnuQEV+B",
	"coa2Th3Cwu+VaA6kc/Ix/B8Lmw+ouTEZ3vunE9HqahzZR8kNPszQ+4DU0fj6uE4z1KQWCp0wCyEDVcLX",
	"8uJhpdJV86u8oBUK3GEppPcmVZJCmj2p3KsIDjucK9Qn+Mre1LJj6xH4Wv1pahrho1HslEY7N+cViym9",
	"MGNTV7i+M+Zv8e52ysoV5bg7hQjW6GoQ4OXF5GLCjhuLWloFCbwORxFYSauATMw/S6SxnV9R5rQS6QpT",
	"VstwSn41zSCBX5ARcuit0b7G+NVkMlbyB34u0ZN4kF74Mk3R+0WZQxXii1Gvff0NjwJ+6ltpR4SHGjT0",
	"dGmyxzoHNW3buLW5SsNn8b2v+a+bNz99qbWPZ1DV54dciVUvUF3meQQkl57ZCxFw6lnjaRzArfHUuj/G",
	"6iwxDMdTFdpLl4RZC3z+KFKHXF1C6m7dhbQcBLVlKG5HwpeDDIPnOxF1YL59HVttYJteC6k6pTDKdg7w",
	"/aCNWulkgYTOhx1CMdZcWBCBlgVX5bDx9l2NOsEPm8T8O2bMIF0OUN80Jn+wQfymPAmZ56KV3NMlZrt3",
	"3xRPOyhP29m2kyAsR/1ReqQ+HFLpNBdIN7Iqgp/OyUDYPPa4Uu82ufKk9LJjvkNRe9htO30t70ONC7lV",
	"IIxuZpJboxvRxAXc4+n89dvZJo7WLCfHy7NZ7pk9pS+2k7uK4M1zcH4pM9Fg/sx5FmLuJNqhPOu2g3jT",
	"bixVf3YP1xQ+PzkHa/FtFs46S9HxLttdob6lw74ZR9FLkTrUrLfePS9hwQMmrOfC00iLHS4c+lUY6CXt",
	"29nC+64Ngf8Qar4FCkVekCpQkBG5WuO4m5Q0orFR+Z9is4Hhh/LZ+HAqo+EOwuVTg9fX+O52KlBn1qhw",
	"eyldDgmsiKxP4tjorL4gXKSmiMPfMAbQbIluNIgHRStTkvAWU77YZMIaN1bcSawXm+39pboY2ItgLZ2S",
	"d/m+69hCljnf4P9qj4dgTa8Gl7PxZaxV0k2fQ1p8ZyacBMQWhfQgDHxavfhhaASnet+/nbydjD69NY64",
	"cFOjNab8eEYo523SDjG9llouOck/XneXxX7B+z1Z2dlUxcI48fF691lYVat59W8AAAD//1ncS1RjFAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
