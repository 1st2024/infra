// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zfYcAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
