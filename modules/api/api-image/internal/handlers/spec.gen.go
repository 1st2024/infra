// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWXU/rRhD9K6tpHy0cPvriN2hpG6moqEi8oAgt9jheau+a3XG4UeT/fjVrE69xcsnV",
	"RVxejFmP5+OckzPeQGqq2mjU5CDZgEsLrKS/PdfrW1k2CMmmjeBSr5Q1ukJN/LC2pkZLCn1oajK8d1rV",
	"NdK9yvgoQ5daVZMyGhKYZ6hJ5QqtMLmQgl8Q/QviuVBp0V+VE1SgwKGakM6ZVEnCDCKgdY2QgCOr9BLa",
	"CDKsfQuKsPI3k4j+QFor1/y/bTSpiscC1E0FyR1ok+Gjg8UkP4fjU6MsZhz3es4hWd/IgpGy1tjdGE2B",
	"8cEeDoggN7aSBAkoTacnw7RKEy7RcvMVOieX+xLBIQPAkIXbvUHnfIpJw6VCfQidTFgXvIsg1+U/ME8f",
	"/eYgQdYo6DQY6E9jq0+k1DeUtGg5QuncTFv6A1cPxvwvzq/nnFdRicMpRLBC2zEIx0ezoxmDbmrUslaQ",
	"wKk/iqCWVHgEYr4skaZ1/kZZUiHSAlNOy7BJfjTPIIG/kNm16GqjXYflyWw2TfIfPjXoSDxLJ1yTpuhc",
	"3pTQ+vli1CvPiXG+/rjEtXF0qVd7yqRGU28+sq5LlfoX40fXabczLr771WIOCfwSD84W97YWhy7mOxo3",
	"f7NtuFyL1CJTKaQOSfZMklw6ZpHHWfjBej26veD+oxwJWZZiG7kD4Zvh2Q9BsDVDWZb/5pDcfRuVrdO3",
	"i4lfvgGSRWqsZpTC0doIfntP1ry37Wilc89SOVJ6GZQPKNoe8mgvuhtn+d0TLeRLAmF070V2hXbCE8t0",
	"RJQX/IXJ1u82cGhh7dg6yDbYTuRx/N6lD/91bC27jeDsI0i/kJnoQRcPJluLfm1+rOj8/IHq9okuNId4",
	"M6ytttNhiYS7HJ/PD1ZkF/6iyf7vPPOub2WFhNZ5E1CcnDcBRKBl5fdTuEjHMosCpF5vs8VEgmfTMUaC",
	"6WbNRlv+YynzHTBloxa+k7bYYm7RFX6NNbRrAfrnYRGBXwh1xqUVOcEfjIKMKNUKp+7S0ITIPuXn4rPH",
	"4acy2vdwKKfD8evJrqSWS05zexUu6DGmvNcmn93B519urLi9Gl7jr4N20X4NAAD//7PEFQpjDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
