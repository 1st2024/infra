// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW0WrbShD9lWXufRSxb8J90VtoQ2toaGggL8GErTSyN5V2NzsjB2P072VWsiVHdmJo",
	"aPviKKvZMzPnzBy0gcxV3lm0TJBugLIlVjo+Xtr1nS5rhHTTJHBlVyY4W6FleemD8xjYYAzNXI4PZI33",
	"yA8ml6McKQvGs3EWUpjlaNkUBoNyhdJKLqjugnpemmzZ/RpSvESFfTaliVxmNGMOCfDaI6RAHIxdQJNA",
	"jj6WYBir+DCK6A50CHot/4fasqmkLUBbV5Deg3U5PhLMR/gSjk+1CZhL3Ms+e7CukLkwFYILhzkaExOD",
	"Ix2QQOFCpRlSMJYvzvtujWVcYJDiKyTSi2NAcEoD0KNIubdIFCFGBZcG7SlyimBt8CGBqMU/EaeLfrOR",
	"AWoyqHTeSKCxhRsn+4ir7879UJc3M4E3XGJ/CgmsMLREwH9n07Op1O48Wu0NpHARjxLwmpeRnYn8LJDH",
	"eT6jLnmpsiVmAiuUank1yyGFTygkBSTvLLU8n0+nY5Bv+FQjsXrWpKjOMiQq6hKa2N8E7Srq5Sjm309x",
	"44iv7OpImsxZ7nZYe1+aLF6cPFI7Au3+y9O/AQtI4Z9JbxCTzh0mQzOIFe0Xf7sruFyrLKDsrtJ2uNVR",
	"UNYLEjGlnXlsrJOVjpL7xRArXZZqF3mA4dv+3S9RsPMUXZZfC0jvX2dlZ5jNfGQ7b5AUkOtghaVha00C",
	"/7+natEiDpTSmlBpiI1dDNIPJNodSmvbudtH+RCFVnoLoJztVjqsMIx0kjF9L6Fe63rrbyfP6c6Dfi/9",
	"Mf+A/2P0D9dksul9sGkVKZHxkPfJ+cnatOFbdbq/szz6X9AVMgaK62AEXDwRErC6ioY9dObesjnUmAyY",
	"emnv879gBFr2/twIxPynjEB//FLoa231QiDurocWua+NOMvo+2HwxVW4oO6u+2viz828+RkAAP//3a4P",
	"0ywKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
