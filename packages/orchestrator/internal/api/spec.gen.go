// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWTW/cRgz9KwLbo2BtnPaiW1IHrdGgNeqgl8AHWuJK0x3NKBzK8cLQfy9mtPrY3dHC",
	"B+ek1XJIPr7HIfUChW1aa8iIg/wFWmRsSIjDm0NTPtrn2xv/ogzk0KLUkILBhiBf2FNg+tYpphJy4Y5S",
	"cEVNDXpH2bfhsLAyFfR97w+71hpHIcuvm41/FNYIGfE/sW21KlCUNdl/zpqAZYr3M9MWcvgpm6Fng9Vl",
	"n5gtDzlKcgWr1geBHO6Jn4gTOthHfAHA4OSrZ9sSixpwFbYk/zwOFA4nwZbC1nKDAjkoI++vIR1rVUao",
	"IoY+hYacw2ot0Owy0bOk8iscEo1RHvoU/qLv9wPxEcxakZFBsJPA6bGcl9MulZ1i+uSrmVGrgc2ztI+d",
	"0uUKpIt4C2tcp7/YHZmonczTiieZJ3ej3C5q3CqmgrHYEf9L7JSNR6+7iu6womVRj9ZqQuPNyjhBU9AK",
	"gh2xIX0pvraVu2P7vP9Qlkwuzl2Dz7eHRJ/JVFL7U6/qOsESBeN90KJZgS2EzZqJcaXa094Zwh/rN/uP",
	"us2NkR6a54jUCEGnrEalXIg/lRPjccHRUuuHMDuU2dpQqBLtK/10/TH5cHcLKTyNisLm6t3VxhNjWzLY",
	"Ksjh/dXmagNpmJJBz6wm1INoFcn5DPgjmJOipsLD9fcpTL3bEnL4nWSww8nAvB4G5nGof+hbR06S7+gS",
	"1xUFObfttB+FfQrZ4T4P/lEon5WTBLVOuDNGmSqZXSLA7hfGGLZXD3Ml1Bzmh/57C/nXy/N9HD+9n0WH",
	"NkRm3Edn/kSD3idM0rGhcqXGPh33UCz9VGLmD/lMgpVbDMrQOSm01kWo/Y0JhRIc0yVbtk0iNSVCTatR",
	"6IziO+tOOA7qfrTl/s125cTl8QX267s/U/Xdm6VdrK+IZl9qmmjyrVwE7spFS+v9m4h1dCuyl2nh9YN+",
	"miSys/9UWs86nql2E9wm3e4XS3T5YbXS4/ORbF6//cOZFL+c4zplbae0/iGkzf+/nHwE+jv00P8fAAD/",
	"/4j7xhBQCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
