// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYUW/bNhD+K8Rtj0rkthlQ+K1pus3AkgUz1pfCGBjpbDOTSI48OQsM/feBpCxTktU4",
	"rZv1JVGo09133308HrOFTJVaSZRkYboFm62x5P7xCgsk/CA3wihZoiS3qI3SaEigN8lUjnMptEaaXbkF",
	"etQIU7BkhFxBXSdg8J9KGMxh+qlnvkh25uruHjOCOoFeNF4Uvy9h+mkLPxpcwhR+SPdw0wZreoMP8Xd1",
	"0ocp8gPYErDECd0blFXp8F1WosjdywR+5qLAHBK4UhIjqCOZCWca/A3TWnQTmzuzP3XeBH8eoydF3Q02",
	"nkACH4xR5jBa9ztHmxmhSSgJ02DM/LsElsqUnGAKQtKb19D6FpJwhcY5L9FavhpzBMdkAXsvju2eIr6A",
	"5Rx1kA5haQ9aNAvcGP7o/8ZSF73S3Kgc7+3zC9H6aoAcKskNPszRWs/Uk/l1eZ3lKEksBRqmloz7UjEb",
	"7NnDWmTr5qewjNbIcM8l49aqTHDyMnvWdq8TGAdcCJRHYHVogu0wegI2uD/OTWP8ZBZ7p8ke5qJ2ZkIu",
	"1TDUFW7ulPqbvbudOeeCCtyvQgIbNIEEeHU+OZ844Eqj5FrAFN74pQQ0p7VnJkW5sSGIa8fuyRHHXbBZ",
	"7h03bdpCAI6WLlX+GHQgaddKtS5E5j9L722oQWig7ulz7XV4DtRdjshU6BesVtK6gsqqKBIgvrKOQZ+B",
	"K79WloYJ3CpLLfzWxRZeTyYny6F/RNR+i8dVm1dZhtYuq6J4ZJlBp3DGZax9L41eUnUSKpS2bfnzSfrm",
	"/40KNXLGfFm12sS2nW1cOxArPJDhL+gTfN9rZZobXiKhsf4cF45rJ25IQPLS7Yx+8+tCTaLk+xt18Q0V",
	"05PLSOnXyAtaR5x0RfWrf82yNWZu5w8IC+9HhN919UcQDHvgltlWqxCQpU2TsqNIfhOWGC8K1loegDPf",
	"v/sqXttD87j5bXcq+EGpe6w+sU8NUmWk26hxZnUCP51SCX4KOQAlzDmFsCTkKgofSaVdjNtf18t732sY",
	"3zlgSjbnk9mgGZTJNZJOnU7fR6LJ4sne4cTx6mSRO2GP6c/tKV4ncPESNb/kOWs4f2Gd+ZwjoY3pLG4H",
	"6badXuruDNEfWdz60RoM5jsVzqMB6eluH49TX9PpL4ZZdCQSUs07o97LFswjcAXrQHhe0VKDS4PWnzC6",
	"okPHgn8fx2D4L6F0N0ImyDISJTJSrBAbHHaTigZlbFx+V9VsaBjW8yJ8+hL1bDBEW5CdtU9SEVuqSuaj",
	"Ffb3E7edApndCO9uZwxlrpXwN5vKFDCFNZG20zRVMg+Xh/NMlan//0aPql3hGw/sQdBaVcSsxsxdenKm",
	"lRk6joR2tt3dberzXrwENtwIflccuqoteVW42/1f7XKfvNlV7+I2vKi1TmI5jXmx0RlxFBE7FrJRGtxq",
	"ffa/seFBdb5/O3k7GXx6qwy5jZwpKTFzjyekctGKts/pNZd85UT/8ToeHrsNwB5QZTRBs6Uy7OP1/jM/",
	"QteL+r8AAAD//3HUjrl/FAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
