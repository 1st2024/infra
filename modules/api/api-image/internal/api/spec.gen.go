// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/jNhD9K8S0RyFyE/SiW9oYrYGmDWogl8AoaGlk06VIhRw5MAz99wWpb0uJvdhk",
	"s5dEJofz8d7wjXSEWGe5VqjIQnQEG28x4/7xVh0euSwQomMZwFzthdEqQ0Vuk0v5TwrR0xF+NphCBD+F",
	"naOw9hL+jS/9c2VwhNzoHA0JrMIRp8I/oSoyiJ5gXQiZCLWBAFIuJCYQQKIVwioAOuQIEVgyzqAsAzD4",
	"XAiDiTtZ++rs9HqHMUG5Gqa/bGN+Qi4BzI3RZhw91olDGhK0sRE5Ca0gqoyZ3wsg1SbjBBEIRTfX0PoW",
	"inCDxjnP0Fq+ec0RnEu7DtR4ccCdUDiZ91KJPEda3LmFkwgBJJh7S0GY2UmLeoEbww/utykUiQz7VCid",
	"4M6eB36YTueqTmOKkCVa60EaNUS18Z9IxnguElQkUoGG6ZTRFlltfRbjntdV6TaFSvU4wB3u11r/z24f",
	"Fs6lIIndKgSwR1NlDb9cza5mrhCdo+K5gAhu/FIAOaetLyV0fzZI4zh/Ipe0ZfEWY+fW1c/d1iKBCP5A",
	"chiizbWyFSjXs9nYyb/4XKAl9sIts0Uco7VpIaH09YWo9tV109YnMIzxoC3NncV0oFgrajQnz6WI/clw",
	"ZyvGKqVxT1+jQ6Vvy34FyzZreWCxQU6YMK4YDo4FQHxjHYu+plVbXnhEtV/clT2YR0i6IufOyhNjeIaE",
	"xnoNFS4FRxYEoLjrfMDasmsdMgUGvYJP22z1gQCeoHcBEmEnp2/z7iGpNfkDgfEN+ptODh+BSZ1+Obzr",
	"Lq9yQIoqpJxErhYF++o1/UtYYlxK1lpO3NVlt/dNndAq9WVTvn1R8JN2KOZnbppBKoxyV61fWhnAr+/Z",
	"vH72TaRSTVcpLAm16YXvdXe76EprGnno5XevFow3DphW9UAwezQjnlzfvxdRb1XdjLWLxa6dYN8Xfh+/",
	"h/9r8PevSXjspmhZMSKRcGqKuvWLuanMG3bq/4vkIl3qzfUfRbUvbYEKvc9rAR//khbolk+JvueKb5yL",
	"x/u+RA65sf4L5CSDTsVZqg17vB+Mmqkjldo37307vWbNh4Jf6L8y9F3hnkvrNPJLAAAA//+wBAs+dA0A",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
