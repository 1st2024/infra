// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXT1PjuBP9Kir9fkcTB4a9+BYGdjc1F4rhsFVUakuR27EGW/JK7TCplL/7Vkt2bCeG",
	"DFvMnACr1X9ev34t9lyasjIaNDqe7HklrCgBwfq/lHYotITlbfiLJ7wSmPOIa1ECT4YGEbfwT60spDxB",
	"W0PEncyhFHQTdxVZO7RKb3jTNGTsKqMd+DjX8zn9kEYjaKRfRVUVSgpURsffnNH0rff3fwsZT/j/4j75",
	"OJy6+M5aY0OMFJy0qiInPOE3ImWUIjjkTcSv55c/P+aixhw0tl4ZBLuI//YrCv4Kdgu2C9p0DfGI3+mt",
	"skaXbfTKmgosqtAO0NvQ8eO+DXv81JqtmoiHFE78SJMC/Ryn5Y2ZP4t4Zmwp0DMJP13xqAupNMIGPFYl",
	"OCc2rznqr7ySZRuo80LpLlvWTmRcKNAYih8HW6bUx0yBZSZjmAMLtqfxox6/cy6g7wLLrCnZS65kzpTz",
	"p91wMWlBIKRTocYTei5eZ30WtFBBNJ7vAzgrTyaQtVW4+0qkCugtpATnHs0zaCI+fVqDsGB/77osvMXf",
	"SCa8JSSlEcz6tHLEispbVOoL7DpnXoByEKk3bSXor4vF/fLiC+z628LfCiOhdGY8lRUWdHZ3dcMW90se",
	"8S1YF4Cazy5ncwpnKtCiUjzhn2bz2ZxHXu58bTHobVBI4/AU68++RUwwDS/DtnLv1Pq5XqY84ffG4R25",
	"CoCDwxuT7o7EoKwLVJWwGNN8XKQCRZhLaVJqFwFbqyL9TFe+4+D2Y4dAryZGIuCFQwuiHMjAKfmPXY4r",
	"vDXyGSzzRky2VoMBXist7G6Ko6m/makCXvNKZ6yr/x0DdTsxSBEzutixyoKjsVKnk+ZyUxcpWwOzQOXg",
	"2XEYITMqaHW4atbfQGK33Iab8HjbXX2k+A+oNrUCaj9wWV0UO2YBa6shZaIohoC4wTqcinVIPiajfnu9",
	"bUtGQ53gydOEQjytGoJQbFwrOy6oS5yDKMLUb2CCjX/6YyZzkM8nM/YHYDjn08iPXT2EMWQvwjF3wOt9",
	"mHjo404tf0AndK/uXviPODopG8uD+7e04wO5dI7GVx8W+rCRJzj8mEOrOjl1CIWlXejbM/+R9sx/Ib0H",
	"62rM7J4aqzFV4n2/Y5vYQmbB5W8x6CGYjF8I8B1B02pgCh1DVQJDwwq1hbeZtDzEfjhEjkb/BDxNA9Gb",
	"xIM3AlV8xJHr0wqORCnETccPlHe27DrE+bnv6fBwbRP2WHfwXzBtkGWm1ul/JoW/Rg/2AHptC57wffjU",
	"xNtLerEIq8S6CNCGk4BuJuoC22eTS+JYVGoGV+tZClsqpA+5P/7HjbT/8NHLb7Nq/g0AAP//qqLMYhUO",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
