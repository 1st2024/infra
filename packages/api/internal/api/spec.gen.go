// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX32/bNhD+Vwhuj5qlpNmL3pLW2IwNW5FiT4UxMNLJYiOR6vHkzDD0vw8k9dOW7Rpr",
	"uj4lFk/f/fruO2rPE11WWoEiw+M9rwSKEgjQ/RKV/A129j+peMw/14A7HnAlSuCxPf37GewDhM+1REh5",
	"TFhDwE2SQynse7SrrKkhlGrDmybgoLardz1kJSgfEP3ZdXhSGRIqgZOgI4NrkBtrbCqtDLha3EWR/ZNo",
	"RaDIV6cqZCJIahV+MlrZZwPejwgZj/kP4VDg0J+acImo0ftIwSQoKwvCY/4gUmZDBEO8CfhddPP6Pu9r",
	"ykFRi8rA2wX852+R8AfALWDntOka4ir+UMsifatVJjeOmqgrQJK+He908gyYyQLsrynocMa66IMZ5gxc",
	"+DiGW/e2+ukTJK4RS7WVqFXZFmIaSs/o8y682dqiuWyPcBKdziTjjJk7C3imsRTkSE1vboespCLYgGtb",
	"CcaIzSmgi4VoHXUoNtxVO0AzERcSFPnkp85WqaVUJgGZzhjlwLztsf+RIlyCgKELLENdspdcJjmTxp12",
	"c84SBEGQzrmaisUlf531xaJ1ujWRmr44toZ/wMtZDj1NuX5ulsZjcRjIGGbtxgmSGiXtPtiXvat7J+p2",
	"6i8Le5t2uwcar7eZdmSXZGePL28f2P37FQ/4FtD4UkaLm0Vk660rUKKSPOZvFtEi4oHTZhdGCGrrV442",
	"dNyNt66JTDAFL+PGcweKToRWKY/5e21oaaF8JcDQg053X025DhrXTCtul8jhori9UjclQem3bVH8mfH4",
	"4wUpHUdjqdX1CFHsZiW2ThIwJquLYscQqEYFKRNFMS6rGa2bOe99hqE1GrbDeVtrZAMisTHtnBjPS9f9",
	"cO8Gpwm7ufkCPqhhzp0EHOjCSXosradV7yeY3HROlHwwCbsJCC5aei1o1kes+HqrvBfkS91uldBWbayd",
	"I13LQaTtZe937YOZxjFF/+tx1et5iz0C67dTjXJGMxtHsehLKBZ9EzoOtPOczEEUXhU3MEPBX90xS3JI",
	"no949guQP+fzcjCFevRKxV6EYabv2HVJu3oOoxPuh+3TeI8F0NztyD0/w4lpYt68n5zVeMW91gyN9ujM",
	"IN0d5zRhvU88na7w/4NP870JETIEk59Tu0dvMr3XwD8EKpVqwyQZRrIERpoVcguzqjfTssfe8/fau642",
	"/617d97P6366+It5G7DrSteon5jSxDJdq/Q0P9zlzH78+PrXWPCY7/2jJtze2AuVQCmeCl87f+LLl4m6",
	"sDqbE1UmDm13FnD7tEhhayNd9y73hx/BxrVw+Nw29g7xbwAAAP//xOqxtQUQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
