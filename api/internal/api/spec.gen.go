// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
