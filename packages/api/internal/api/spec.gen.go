// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXTW/jNhD9KwTbo2I52fSiW7JrtMIWbZBFgRaBD4w0srgrkepw5NQw9N8Lkvq0ZXuD",
	"7qanxOJoPt68eUPteaLLSitQZHi055VAUQIBul+gtvEH+49UPOKVoJwHXIkSeNSeBRzh71oipDwirCHg",
	"JsmhFPYl2lXW0BBKteFNE3CpDAmVwEmnI4PXeG6ssam0MuDyvl0u7Z9EKwJF9l9RVYVMBEmtws9GK/ts",
	"8PcjQsYj/kM4gBH6UxOuEDX6GCmYBGVlnfCI34uU2RTBEG8Cfru8/v4x72rKQVHrlYG3C/hPb1HwJ8At",
	"YBe06RriEL+vZZG+1yqTG0cj1BUgSd+ODzr5ApjJAuyvqdPhjHXZBzPMGbjwNHa37m3182dIXCNWaitR",
	"q7IFYppKz+jzIbzZ2npz1R75SXQ6U4wzZu4s4JnGUpAjNb27GaqSimADrm0lGCM2pxxdBKIN1Hmx6cbt",
	"AM1kXEhQ5IufBotTS6lMAjKdMcqBedvj+MGA3yUXMHSBZahL9pLLJGfSuNNuzlmCIAjSuVBTsbgUr7O+",
	"CFqnWxOp6cGxGP4GL2c59Dzl+rlZGo/FYSJjN2s3TpDUKGn3yb7sQ91V8iPs7NT3gpmDSAEHyfzz6u4h",
	"vvq4+muoXLi3/AhLlWnHd0l2/Pjq5p7dPcQ84FtA49FcLq4XSwu5rkCJSvKIv1ssF0seOHl2mYSgtn5D",
	"aEPHDXnv+sgEU/Ay7j13TtHpUJzyiD9oQyvryoMBhu51uvtm4nXQu2YKut0jh7vi5pXSKQlK96Ioit8z",
	"Hj1dUNNxNpZdXY8QxW5WZeskAWOyuih2DIFqVJAyURRjWM1o48xF7ysMrdGwIM7bWiObEImNaUfFeGq6",
	"7od7NztN2I3OV/BBDaPuVOBAGk7SY2UjxX2cYHIxOQH5YBL6IW/WR73+dju6V9pLPWwlzmIxFsWRYPmR",
	"dhn+qn0y0zym3v94jHuhbn2PnPVrp0Y5I4aNI87ya4izfBOSDWTyTMtBFF7uNjBDrF/cMUtySL4csedn",
	"IH/O54d86urR6w97EYaZvmOvK9rhOQxEuB/WSuMjFkBz1x73/AwnpoV5834e4vHuet1kjNbezHjcHmc6",
	"4bIvJ51u3P+DJfOIhwgZgsnPKdOjN5leQ+AfApVKtWGSDCNZAiPNCrmFWYWaacRjH/ltO9JV/N96cuvj",
	"fN/vB387bhN2WHfwXzGliWW6Vunpro9uSA7W8d3oaW2hM+4DxYNeY8EjvvePmnB7bW88AqV4Ljy0/sSj",
	"m4m6sJKZE1UmCkNRyQXcPC9S2NpC1n1G+8MPVbuI96NPYmOX/L8BAAD//7hogzlVDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
