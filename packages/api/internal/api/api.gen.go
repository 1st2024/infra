// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /envs)
	PostEnvs(c *gin.Context)

	// (POST /envs/{envID}/instances)
	PostEnvsEnvIDInstances(c *gin.Context, envID EnvID, params PostEnvsEnvIDInstancesParams)

	// (GET /health)
	GetHealth(c *gin.Context)

	// (DELETE /instances/{instanceID})
	DeleteInstancesInstanceID(c *gin.Context, instanceID InstanceID, params DeleteInstancesInstanceIDParams)

	// (POST /instances/{instanceID}/refreshes)
	PostInstancesInstanceIDRefreshes(c *gin.Context, instanceID InstanceID, params PostInstancesInstanceIDRefreshesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostEnvs operation middleware
func (siw *ServerInterfaceWrapper) PostEnvs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEnvs(c)
}

// PostEnvsEnvIDInstances operation middleware
func (siw *ServerInterfaceWrapper) PostEnvsEnvIDInstances(c *gin.Context) {

	var err error

	// ------------- Path parameter "envID" -------------
	var envID EnvID

	err = runtime.BindStyledParameter("simple", false, "envID", c.Param("envID"), &envID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter envID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEnvsEnvIDInstancesParams

	// ------------- Required query parameter "api_key" -------------

	if paramValue := c.Query("api_key"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api_key is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api_key", c.Request.URL.Query(), &params.ApiKey)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api_key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEnvsEnvIDInstances(c, envID, params)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// DeleteInstancesInstanceID operation middleware
func (siw *ServerInterfaceWrapper) DeleteInstancesInstanceID(c *gin.Context) {

	var err error

	// ------------- Path parameter "instanceID" -------------
	var instanceID InstanceID

	err = runtime.BindStyledParameter("simple", false, "instanceID", c.Param("instanceID"), &instanceID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter instanceID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteInstancesInstanceIDParams

	// ------------- Required query parameter "api_key" -------------

	if paramValue := c.Query("api_key"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api_key is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api_key", c.Request.URL.Query(), &params.ApiKey)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api_key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteInstancesInstanceID(c, instanceID, params)
}

// PostInstancesInstanceIDRefreshes operation middleware
func (siw *ServerInterfaceWrapper) PostInstancesInstanceIDRefreshes(c *gin.Context) {

	var err error

	// ------------- Path parameter "instanceID" -------------
	var instanceID InstanceID

	err = runtime.BindStyledParameter("simple", false, "instanceID", c.Param("instanceID"), &instanceID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter instanceID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstancesInstanceIDRefreshesParams

	// ------------- Required query parameter "api_key" -------------

	if paramValue := c.Query("api_key"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api_key is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api_key", c.Request.URL.Query(), &params.ApiKey)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api_key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostInstancesInstanceIDRefreshes(c, instanceID, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/envs", wrapper.PostEnvs)
	router.POST(options.BaseURL+"/envs/:envID/instances", wrapper.PostEnvsEnvIDInstances)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.DELETE(options.BaseURL+"/instances/:instanceID", wrapper.DeleteInstancesInstanceID)
	router.POST(options.BaseURL+"/instances/:instanceID/refreshes", wrapper.PostInstancesInstanceIDRefreshes)
}
