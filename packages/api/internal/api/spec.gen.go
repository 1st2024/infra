// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbX2/juBH/KgTbR23sze0drn5LsttrcLt7wSZ7LRAEBS2NI14kUkdSTozA373gH0mU",
	"RNmy46RJ0af1isPhcOY3w+Fw8ohjnhecAVMSzx5xQQTJQYEw/5uXNEvOP+qflOEZLohKcYQZyQHP6tEI",
	"C/izpAISPFOihAjLOIWc6GlqVWhSqQRlt3i9jjDjCQyydIO7cZSEJXP+MMi0Gd+Nr4K8yIgaltYj2IXz",
	"WhPLgjMJRssfplP9T8yZAqb0T1IUGY2JopxN/pCc6W8Nv78KWOAZ/sukMd3EjsrJJyG4sGskIGNBC80E",
	"z/ApSZAWEaTC6wh/mL5//jVPSpUCU44rAkunF//w/It/5QoteMkSveKPL6HiSxBLENU21xUEjI3PLr6f",
	"8dIu3Z51dvEdxVyARAsukEoBObziCC+4yInCM0yZ+uEYRzgnDzQvczz7OcI5Zfb3+6iCGGUKbsHo+BNb",
	"/k6sF5MkoXoxkl0IXoBQ1OKuLccntqSCsxyYQksiKJlnQZn6fmIVooNHi33MEwgso4mRGQvsr7+PHKQk",
	"t0OMgvI0nniN3UIVl5t1hL9AzsXqy2mfpR3p7hlRhr6cbrbG+78d+wY5/jm0la9wf+nU2FMWNObaiD1H",
	"ZhSjSELUVri6Jb9U5L3A1tbBeaI9dkFBIL4waqjUiappfaVHWNEceOngvSBlpvDs/Y9dD7miOSDFUUaX",
	"EFKzhJizRB4FlV1pd9rXbcfo3v60wb86ILY1TrKMx0RBcnbxva+Gr2U+tyqo6VDtqeOQW090gKMBxJ3k",
	"Oii0l8ktCjXq6Om4pZozdZsxmfWHnv2cEQZiVKMNRwcSiZIxym4RZz7jEcJKRVS5FenaaJeWsmveOklw",
	"nDrSR23TBg1RweIjKEKzPjgOptBQpP1MpRqjS6og36qnb3ZqFVjWtShECLJ6Xn2DrBV5WS/SORPN946y",
	"gGk/vsYCSLLCEU4EoXoT+CagyIb7WUrYbcCTn7xBx0DvpaPOQNSgJLDNE/252uWmOBlnFJgaBy1LG+RS",
	"lLWnbtpznXWstdKTk4Brm5B8nwJrxeJ7mmUIHgoqWk6dEAXvdKgPCZV75+omoerz92mHWCvr36bKwfTF",
	"gFoo2EU3RCI3abRudjtxK2q0EDxH9ymNU0RlS4hYALECbM5/WlcU/yJUA9HXgIcsz54VdrR/vHLHALZM",
	"fgchqU3o24zcQMVF09aRl7KtODkQ3l41FHz9eeb+zG8Dxxi/RcCUWKF7qlKkoS8VyQtEWIIyyrSZ2xgx",
	"H4N89AiqbmcD6aVhHnZSu65TWVbJNdI7u2qql4qswG09yD70M/e1ty3Zh8OoM93Teu8870hr1vYk/OIF",
	"1HH3vmrGVuiuI3wFJA+4fkF/hVXA9y/O0R009ymlZweMS+XH6srQZfHPFFQKzfQK++6O0WE55zwDwkxG",
	"bCo0vTyW5NB4Vlga/X2sb4Y49LzOsHMSRZWy/F3fGM260BgOrDAUWiEUXGuQ9TfXyQ29At+23WZEKiTL",
	"OAYpF2WGzFRj21u61EfkpuC+R76yTzpRlPOMxttg5CIqlcjSIy4QZ9kKEbM5Os8AzVcBE3v42i+K7xaj",
	"m/pq+FR2u/Xhc6qn9DG0g5kNaciGTZRzvnp906sxGkgYwl1AKEfdHTwdVvcHI6tmGtVXCVt8uznYubuv",
	"xeqrUh2gWyb65iqxh0+j9vC0hMd3IBY0C0TMj/WYF8aHl9/HaU36eZYnQQAIhWKe5zqlUBzBA8Sldl3W",
	"dmWyUM67B+F74LDu6ezGlHohLgVVq0u9QWvKExNNrvgdsJNSpcYPgQgQf6+SEhtv/q00CXblYhNnDFkj",
	"Q6pUofdwkuSUtRiaR4kUSGLI3bPEv94ZwndXjm/lb/bk0XzMr208Ls7f2ZOqM19vl7IFN75NlUYN/nR8",
	"ik4uznGEl1X2jadH74+mejleACMFxTP8w9H0aKojF1Gp0dEkBZJZMW4hcP7/wwyjOIX4DhtOwpTszxM8",
	"w7+AsuO486BybKv9bVbO5ez1rT7GvLeQEF5rthNNtDZ7nzCe2HWCIpvqDskyZMkCQn91AyGZR79Q1OGV",
	"ZNlvCzy73l79wOubfjrZf8WodZOtkABVCgaJt6GdFFa/vGym1US+F5ntdNF+fbPWcZ3oY+gaEz1qfc8a",
	"ZPJo61TrQcv8AsrsARn0Dhnma1Xt8p9CB7TbkExckUyL+CS7bjOiq1iONlxddtvRbu6Nbhvth5ewcYQL",
	"LkNPZ6YgiGSdJ5Cqwtg27QWXh7OtiSKnPFkd1KytCue6/0Z8bM3Rufo621Ya0KEtNiwSL8Rlq7dse+3f",
	"rVr65qBb1XOaKQE/v/QGXzIId2v1TwvH/a0a003HmG76gmHcSzbaJm6/Igy4uCluIVJXu0wdrJOG9r29",
	"beFncNnmKXfdTg2VKKHvvIdrtmgt2w8HfpHaFQYDoeBtYqQVCiaPdQlzbWGTgQpcYH6lWdbApweWj2Za",
	"DZdLryy62xnRFFQDKcBA7PaNdUez7G2E7afZalLVEQZTtEorro4wHL1rY322lHsbLApePHVsVYHiskQq",
	"JQrJlJdZgubQRGXKUE6zjLo2BhzZu9WfJZhidNWOppljv0HMfzT/6cPWXodeBde2oSBWv9JvknJAqozm",
	"tC1V08cxnU53bch4zjTYL8bvlAe3kPU/6VwCFgJkanUePlG/WZKWQuBBAUvMO5iSBvRVl87m07X2wG/1",
	"uk+Nm/ud1e0iWlJagQPlLDdiiln2Nc3XQ+Mtd1DohJIuwetL8lu+fvhJO8WWpiT3ic//gFiNTus7ALaa",
	"bSH4+cB7aEB6fWFhOF6CsumcJex2hR2hq3BbAnqorOKlhLR53nFIOkJnJMtMKE+pRDmolCcoLzNFi8zO",
	"kIgvQdwLqsA+Ll1dfY4QkNi+aaJS2umA4lIIYMp/6nRPsdV5UXCqxznKgchSQGtrFSyPRjrVldPda3Cp",
	"Vn9f9/lVb67xksYevr5cjXbQ5/rNJvs0/jkpbw7ietJBs5K04v7GTw4FJB9xk7Zkgfzryg285M3ZPDw/",
	"8b5sN/Ryd5pu+b9T39DfKoPYm+woo1SkQcM0g52IEcr46pdpP+Xb62nk5qXB4G7+TwZEpa/XAopGohEV",
	"EQb3m4sgPh6eowgSfNEcVQ45PrgMQ/UQ26WgL9gkjqFQkLxKY7fCwOSxeVTeWNuwxQtEhmFgKWogXPmP",
	"1bslFd479/gCR/1Aqw1gd/G0Esd/1fO+gUUTYSP97pDq/r/7vkn3nZgdyMmjaw1Zb7gJmW4Hv4lhFLSM",
	"+eRp3XmyP86irdRVf0sgAhyHI4A1YOq1TL9x+02abqXBCmYd9uzuh56btxnzsuohehGT9sqK5yyBh7or",
	"tLrhzqser8EqqO0G7nQkhiqO/Fb+tlhIGCg7vqqaY7vBbqeqY62G13lv3MFLzFyxrHBYisw1J8nZZEIK",
	"egTH86MEltjj8Nj9Y2lpoNb+0+z2R3M1Wt+s/xMAAP//KZoTw5w+AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
