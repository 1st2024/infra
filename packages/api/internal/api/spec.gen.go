// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
