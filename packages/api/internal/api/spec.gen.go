// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//96UDq3n0sAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
