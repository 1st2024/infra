// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
