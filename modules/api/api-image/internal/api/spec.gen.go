// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYTW/jNhD9K8S0R2GV/ejFt2aTtgGadFEDe1n4QEtjmylFasmRU8PQfy+GkiXKkmsH",
	"m017cWxqOPPmzeNwlD1ktiitQUMeZnvw2QYLGb7emq1y1hRoiH9Krf9YwezLHn50uIIZ/JD2W9N2X/qA",
	"T/G+OtlD6WyJjhQGryrnT9qVCDPw5JRZQ52AJ0lVMEBTFTD7AteV0jk/TeAXqTTmkMCNNQiL5Hh7nYDD",
	"r5VymPNOxaatw97YLh8xI6gXdRKnNu8CD3G+JKCTWBK4dc66cfTM5sh/c/SZUyUpa2DWGIvwLIGVdYUk",
	"mIEy9P4ddL6VIVyjY+cFei/XpxzBOdhtoIMXJu6ovJO450aVJdLdzWShcywbHRAWftKiXZDOyR3/dpUh",
	"VWBcigeb46M/T/wQTu+qhTFVkAd8mqP3gaez2Q1ZvcvRkFopdMKuhAyFEr6xF08blW3aT+UFbVBgz6SQ",
	"3ttMSQqqek5SXJXTgLVCcwFWRtPYjqMn4Bv3l7lpjc9m0TtNepiLms2UWdlxqBvcLq39S/z86Y6dK9LY",
	"r0ICW3QNCfD2zdWbKwZuSzSyVDCD92EpgVLSJjCT8scaaRznN5SaNiLbYMZumU7Jj+5ymMGvyAw59KU1",
	"vuH43dXV2Mmf+LVCT+JJeuGrLEPvV5WGOuSXotk2Hcf6AGAY45P1dMsW04Eya+jQkstSqyzsTB99I4Cm",
	"EfO357TpOpzMOIN5h1rvROaQpSmkiUUbakpy7bmeIadFl166H8i0jugeMcrJfjw6qaV0skBC58OVoxgS",
	"Fw8SMJKbwfhsd+IiV2ESEXEsxMV3JPaI1WcwlPY3zr/rYkBVe329AmFB0Nc2330Prto06mGXYFz1oFim",
	"0nqS0bad+JPH+nflSUitRWc5cbbn/bNvUkh3uV02NB36d5hNhtffmYPpkCpn+GTGmdUJ/PSSmg7TwgSU",
	"Zh7RypMy6yh8JPpukVM76Hro5WNoLkIeHAhr2pvEbdGNysTHYFCnlxdmNAOcVSSL4+2LRR6EvaQhd/dt",
	"ncCH16j5tcxFy7lY2nwn2jn0dTUX8o9Ed0pzcWtI993MUTcq1Eg4NWjw+sV6bMwPipxHY835lhwPQd9y",
	"f30YZzGQS5NqPhjQXrdgAQEXbADheUVLHa4c+k24IiuamrrC8ziGwL8JDb+2CUVe8PQvyAqttjjuLBWN",
	"yti6/F9Vs6XhP61ni+HSivbLx5ndSyPX7ObzfXw1Dyn14R8JRziit6eVdeLzfb8tDAbjLc2UcXhTebRL",
	"sWzf6Y/fxwaucCu158v5nwAAAP//NE4ZXC0RAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
