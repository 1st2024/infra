// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
