// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
