// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: spec/process.proto

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessClient is the client API for Process service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Process_ConnectClient, error)
	Start(ctx context.Context, in *StartProcessRequest, opts ...grpc.CallOption) (Process_StartClient, error)
	// Not available in browser
	ConnectStream(ctx context.Context, opts ...grpc.CallOption) (Process_ConnectStreamClient, error)
	// Not available in browser
	StartStream(ctx context.Context, opts ...grpc.CallOption) (Process_StartStreamClient, error)
	SendInput(ctx context.Context, in *SendInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResizePTY(ctx context.Context, in *ResizePTYRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type processClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessClient(cc grpc.ClientConnInterface) ProcessClient {
	return &processClient{cc}
}

func (c *processClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/process.Process/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Process_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Process_ServiceDesc.Streams[0], "/process.Process/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &processConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Process_ConnectClient interface {
	Recv() (*ProcessEvent, error)
	grpc.ClientStream
}

type processConnectClient struct {
	grpc.ClientStream
}

func (x *processConnectClient) Recv() (*ProcessEvent, error) {
	m := new(ProcessEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processClient) Start(ctx context.Context, in *StartProcessRequest, opts ...grpc.CallOption) (Process_StartClient, error) {
	stream, err := c.cc.NewStream(ctx, &Process_ServiceDesc.Streams[1], "/process.Process/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &processStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Process_StartClient interface {
	Recv() (*ProcessEvent, error)
	grpc.ClientStream
}

type processStartClient struct {
	grpc.ClientStream
}

func (x *processStartClient) Recv() (*ProcessEvent, error) {
	m := new(ProcessEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processClient) ConnectStream(ctx context.Context, opts ...grpc.CallOption) (Process_ConnectStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Process_ServiceDesc.Streams[2], "/process.Process/ConnectStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &processConnectStreamClient{stream}
	return x, nil
}

type Process_ConnectStreamClient interface {
	Send(*ConnectStreamRequest) error
	Recv() (*ProcessEvent, error)
	grpc.ClientStream
}

type processConnectStreamClient struct {
	grpc.ClientStream
}

func (x *processConnectStreamClient) Send(m *ConnectStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processConnectStreamClient) Recv() (*ProcessEvent, error) {
	m := new(ProcessEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processClient) StartStream(ctx context.Context, opts ...grpc.CallOption) (Process_StartStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Process_ServiceDesc.Streams[3], "/process.Process/StartStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &processStartStreamClient{stream}
	return x, nil
}

type Process_StartStreamClient interface {
	Send(*StartStreamRequest) error
	Recv() (*ProcessEvent, error)
	grpc.ClientStream
}

type processStartStreamClient struct {
	grpc.ClientStream
}

func (x *processStartStreamClient) Send(m *StartStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processStartStreamClient) Recv() (*ProcessEvent, error) {
	m := new(ProcessEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processClient) SendInput(ctx context.Context, in *SendInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/process.Process/SendInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/process.Process/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) ResizePTY(ctx context.Context, in *ResizePTYRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/process.Process/ResizePTY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessServer is the server API for Process service.
// All implementations must embed UnimplementedProcessServer
// for forward compatibility
type ProcessServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	Connect(*ConnectRequest, Process_ConnectServer) error
	Start(*StartProcessRequest, Process_StartServer) error
	// Not available in browser
	ConnectStream(Process_ConnectStreamServer) error
	// Not available in browser
	StartStream(Process_StartStreamServer) error
	SendInput(context.Context, *SendInputRequest) (*emptypb.Empty, error)
	Kill(context.Context, *KillRequest) (*emptypb.Empty, error)
	ResizePTY(context.Context, *ResizePTYRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProcessServer()
}

// UnimplementedProcessServer must be embedded to have forward compatible implementations.
type UnimplementedProcessServer struct {
}

func (UnimplementedProcessServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProcessServer) Connect(*ConnectRequest, Process_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedProcessServer) Start(*StartProcessRequest, Process_StartServer) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedProcessServer) ConnectStream(Process_ConnectStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectStream not implemented")
}
func (UnimplementedProcessServer) StartStream(Process_StartStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedProcessServer) SendInput(context.Context, *SendInputRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInput not implemented")
}
func (UnimplementedProcessServer) Kill(context.Context, *KillRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedProcessServer) ResizePTY(context.Context, *ResizePTYRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizePTY not implemented")
}
func (UnimplementedProcessServer) mustEmbedUnimplementedProcessServer() {}

// UnsafeProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessServer will
// result in compilation errors.
type UnsafeProcessServer interface {
	mustEmbedUnimplementedProcessServer()
}

func RegisterProcessServer(s grpc.ServiceRegistrar, srv ProcessServer) {
	s.RegisterService(&Process_ServiceDesc, srv)
}

func _Process_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.Process/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServer).Connect(m, &processConnectServer{stream})
}

type Process_ConnectServer interface {
	Send(*ProcessEvent) error
	grpc.ServerStream
}

type processConnectServer struct {
	grpc.ServerStream
}

func (x *processConnectServer) Send(m *ProcessEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Process_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartProcessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServer).Start(m, &processStartServer{stream})
}

type Process_StartServer interface {
	Send(*ProcessEvent) error
	grpc.ServerStream
}

type processStartServer struct {
	grpc.ServerStream
}

func (x *processStartServer) Send(m *ProcessEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Process_ConnectStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessServer).ConnectStream(&processConnectStreamServer{stream})
}

type Process_ConnectStreamServer interface {
	Send(*ProcessEvent) error
	Recv() (*ConnectStreamRequest, error)
	grpc.ServerStream
}

type processConnectStreamServer struct {
	grpc.ServerStream
}

func (x *processConnectStreamServer) Send(m *ProcessEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processConnectStreamServer) Recv() (*ConnectStreamRequest, error) {
	m := new(ConnectStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Process_StartStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessServer).StartStream(&processStartStreamServer{stream})
}

type Process_StartStreamServer interface {
	Send(*ProcessEvent) error
	Recv() (*StartStreamRequest, error)
	grpc.ServerStream
}

type processStartStreamServer struct {
	grpc.ServerStream
}

func (x *processStartStreamServer) Send(m *ProcessEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processStartStreamServer) Recv() (*StartStreamRequest, error) {
	m := new(StartStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Process_SendInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).SendInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.Process/SendInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).SendInput(ctx, req.(*SendInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.Process/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).Kill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_ResizePTY_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizePTYRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).ResizePTY(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.Process/ResizePTY",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).ResizePTY(ctx, req.(*ResizePTYRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Process_ServiceDesc is the grpc.ServiceDesc for Process service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Process_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "process.Process",
	HandlerType: (*ProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Process_List_Handler,
		},
		{
			MethodName: "SendInput",
			Handler:    _Process_SendInput_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Process_Kill_Handler,
		},
		{
			MethodName: "ResizePTY",
			Handler:    _Process_ResizePTY_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Process_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Start",
			Handler:       _Process_Start_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConnectStream",
			Handler:       _Process_ConnectStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StartStream",
			Handler:       _Process_StartStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "spec/process.proto",
}
