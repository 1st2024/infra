// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYUW/buA//KoL+/0c3zrrei9+6rbcLdtgN24A7oCgOik3XWm3JJ9HpjMDf/UDJju3Y",
	"SZtuLe4pjkWRIvnjj5S3PNZFqRUotDza8lIYUQCCcf9AbVbv6EEqHvFSYMYDrkQBPGrXAm7gn0oaSHiE",
	"poKA2ziDQtAmrEsStGikuuVNE3CpLAoVw0GlA4FTNDckbEutLLhzXyyX9BNrhaCQHkVZ5jIWKLUKv1mt",
	"6F2v7/8GUh7x/4V9MEK/asMrY7TxNhKwsZElKeERfyMSRkcEi7wJ+MXy1fPbvKwwA4WtVgZejoxfPL/x",
	"jxpZqiuVkMVfXiLEX8BswHRuNh0EXI6v1EYarYrWeml0CQYljIE71rdKKHipBMN0yjADBgMtwT6uAl5W",
	"61zGU0V/ZoAZmH0VTFrmtzBtmFZ5zUQcg7VynQNb104eQRS9rbXWOQhFxiwKrOzU2Bf3fv7EoKqCR9d8",
	"Xck8oUNTJYikpiUXtZtgpg77yrre1XFrfefzTRNwn5hJdGOdwPSYTpi5tYCn2hQCXUXj6/PeXakQbsFh",
	"tgBrxe0hRfyhc7eGOi103FXLHjMnziUofBwkvOwcGp6CKpYaXbD7TMYZoYNWO5JjsQGBkMyZGjPlQ/Y6",
	"af7YZI94dhcciuFHuD8cxkcHoLN5vL5mD3fj6hziykisv1C9e9uXrpC+6jtQxIL0ag3CgPm1g5ovtb+R",
	"RHjLFa7EnFhvPkMsKcaXpfwAdafMdaMMROJE237019nlp9XZB6j73cLt8mwlVapdP5KY09rV+Rt2+WnF",
	"A74BY31wlotXiyWZ0yUoUUoe8deL5WJJlSYwc76FoDbu4RZwGt7fpUUm8nwYTCpUyoyj21XCI/4e8Iq0",
	"7LXC8xN5WiIUbqPI8z9SHl0/QN2D/DaEny5Kxoh6ltIrl6W0yvOaGcDKKEim3vUNdc76zsOQhPpudFyW",
	"hIbgcs5NYHV90xBnilvbYtK6uii1nUnNW1fBTDAF93tYH2fnk7Z9etzM8EYn9V5miipHWQqDIdHnWSJQ",
	"+KqLteN2gjzx/Fva8h0Hu7922OxTq2MEPLNoqN30vXNa1Psqxx6+0/EdGOaEWNxKDfh9LZUw9RyFJW5n",
	"KnM4pJXWWOf/CXz7boZnA99uSwPWNeIpEdtMV3nC1sRO5M7DhDSKzMihvqvq9TeIsZtBhwNrM6nE8583",
	"MQ3LblpkXzNoM5YJyywKQ23mP1ZTTeB5L9y6PDcH+e894HjIItY9QH9XbYMb3mMOUFgvEnqg0Rl/iDt/",
	"IGPztLg/752YwfZW8JDsxUtlOwOR+2Y7m+ff3DKLM4jv5vLr1w80uLGqz55j2T3Bfxfa0+LnshR2k5K/",
	"HR9tAqqf7NzQN53Wpz1htVN/rDE8HXbDce5RHPXzLrFju1OC2gWLktSOwoNk5bVP1/Ix6Vq+ILkNpsYx",
	"0nuo3IyhE277ebsJDaQGbHYMUZ+9yPi2AN8RFM0BTKJlKAtgqFkuN3AcWaud7c87y6cS5OC+MMOSFzN3",
	"1jGfebvJ+LLyNDZ73i8O/hLbHtjFugv/GVP9948ngsJtM5su6JXJecS3/lUTbl7RxUEYKda5D61f8dFN",
	"RZVje3uxURiKUi7gfL1IYEOO9Ca3+x/TaJreDj7bWZrU/w0AAP//RI7lNPkTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
