// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"IQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
