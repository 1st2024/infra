// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZX2/bNhD/KgS3RzVy2wwo/NY0WRdsbYK660thFIx0sthKJEtSzoxA3304Uv8lO04T",
	"p9lemkQ63R1/97s/vN7QSOZKChDW0PkNVUyzHCxo9xdT/E/YXCiLf3BB5/R7AXpDAypYDnSOAl++AT4w",
	"UQo5Qzm7UfjKWM3FipZlUKn5AN/vpyaSMSwEVwrs+WmjSjGbtpr6MgHV8L3gGmI6t7qA3foNGMOl2Kq7",
	"fX8XvSUKGyWFAYfp8WyGPyIpLAjrUVYZj5jlUoRfjRT4rNX3q4aEzukvYRuo0L814ZnWUnsbMZhIc4VK",
	"6JyesJigi2AsLQN6PHt+eJuvC5uCsJVWAl4uoL89xoEXoNega6NlHRCH+JlYcy1FDsIuLLOAz0AUOZ1/",
	"picFz2IMVEB/ZzyDmAb0VAqgy2AYyWCk6G8VV+qUlgq05T7Epray8yhDrzxTalp9rrQs0a471cgMch1/",
	"9pFwwsS9C2gidc4snVMu7MsXtDkTFxZW4MKTgzFstU0RDSYSpetlZajWgu6+h+vO4cZ+x6DcT24hNxMp",
	"05hkWrON+xtyle2B6cdabuhloyDw1is3Fz6jp6HtlZo+NOcxEj3hoIlMCHNoE+PlyXXKo7T6lxtiUyDQ",
	"wkGYMTLizDqqjU4OMbdngl0hE53ZhBWZpfOEZQaGpL9wv5AY63XOBRcrwhNnsCpVaJ8RkzINMVGgDTeY",
	"gwSt1DKtF1dSZsDEZIhbMBC67bhlHMQekKGPXnYKhKeDfs+s8NnkcH0ImAcd5za8Roq2ZGS3TTXx6J8t",
	"mIjpx06O1dXxvYzhq6EBfStpQE+YwW54ubGpFBMF0h0oKjS3mwUmpKfEa9f8sTnc3v3rvHef+DLPRSLH",
	"6JzC+krKb+T15Tl+xm0G7VMa0DUGwUk+P5odzRBrqUAwxemcvnSPAtfdnYshiLUJb3qYlN5oBhamzONz",
	"z+Iu+TpMo86idnQ5j5tvzsTavBnMKN2Z6/N0gWtFwnaYKoNbhfthLpeDWeTF7Hh8uEURRWBMUmTZhngE",
	"4mEe+aHiEfr6GyaEtJUb014836a8OWqIQu0kslsWhdAPy1YYD4rccAmimI3SMVx+CBgVmrrIdelhJclR",
	"iRfG4rCLMJco+h/giwcgnjwUSapZpMbgkUMmjR07/EYDRowRAdforHOy30bGwZDGPoFYuIn+RMabB8u8",
	"wbBW9rsJXm7KOxeNyAEcEya21IzbQj97TJqUwXQDCJsxXhV2Z947wTrjd6Z0MSaRH/7/B0zacjv6UUZd",
	"FlcZNykOtXeoLIeg1zRlUmCZn2lWMEGPP9xrEqUQfRvx4C1Y/56OkJiNVX3wwSLXzBDT5Nkdz+B8rkZD",
	"s9Xrv7ixhGUZaSQnXF+0736YtMvpg+9NxObuyLLsItlqvOZmfWEpl6Pb5cQuoVvLNNhCCyxmXVQeozw1",
	"xvboZPVFRIrqqqDXoCeb2D2Dd6HsIVtRE6d9isbD7bR6ZvdpbM1l7Kn1tA5pugkf3jS3wn0uNvsSyovX",
	"lFp0Lp4H7Gbt/fae95leDH9+XEINiQbjWsp0un/wAr3VA/xjQcRu9WMNsTwHvGZkfA0707+JVaXzPuXg",
	"wCGrYLlf0I69mcNeVv3qtfIXQ1IH6VnzG15mE1mIeCs73BYFs82HYbBjvzwnIGIluZsuC53ROU2tVWYe",
	"hlLEfgFyFMk8dHEZLskrzlQayDW3qSwsMQoinnCIiZJ6rLhD0mc39UqpPBrYC+iaac6usqlVYLXGpF86",
	"G6nBwut0sBgc78caJd0V1zYtplPT9wKiRiHaCgM+LZ/9NDScU73vX81ezUafXkrtVg2RFAIi/PUBoVw2",
	"pB1i+o4JtkLSf3rXnR77/3dmJlh5NhjqP71rP3Pzdrks/w0AAP//n0KszqccAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
