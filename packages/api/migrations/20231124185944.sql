-- Add new schema named "auth"
CREATE SCHEMA IF NOT EXISTS "auth";
-- Create "tiers" table
CREATE TABLE "public"."tiers" ("id" character varying NOT NULL, "vcpu" bigint NOT NULL, "ram_mb" bigint NOT NULL, "disk_mb" bigint NOT NULL, "concurrent_instances" bigint NOT NULL, PRIMARY KEY ("id"));
-- Create "teams" table
CREATE TABLE "public"."teams" ("id" uuid DEFAULT gen_random_uuid() , "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP, "is_default" boolean NOT NULL, "is_blocked" boolean NOT NULL, "name" character varying NOT NULL, "tier" character varying NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "teams_tiers_teams" FOREIGN KEY ("tier") REFERENCES "public"."tiers" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create "envs" table
CREATE TABLE "public"."envs" ("id" character varying NOT NULL, "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP, "updated_at" timestamptz NOT NULL, "dockerfile" character varying NOT NULL, "public" boolean NOT NULL, "build_id" uuid NOT NULL, "build_count" integer NOT NULL DEFAULT 1, "spawn_count" integer NOT NULL DEFAULT 0, "last_spawned_at" timestamptz NULL, "team_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "envs_teams_envs" FOREIGN KEY ("team_id") REFERENCES "public"."teams" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create "env_aliases" table
CREATE TABLE "public"."env_aliases" ("alias" character varying NOT NULL, "is_name" boolean NOT NULL DEFAULT true, "env_id" character varying NULL, PRIMARY KEY ("alias"), CONSTRAINT "env_aliases_envs_env_aliases" FOREIGN KEY ("env_id") REFERENCES "public"."envs" ("id") ON UPDATE NO ACTION ON DELETE SET NULL);
-- Create "team_api_keys" table
CREATE TABLE "public"."team_api_keys" ("api_key" character varying NOT NULL, "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP, "team_id" uuid NOT NULL, PRIMARY KEY ("api_key"), CONSTRAINT "team_api_keys_teams_team_api_keys" FOREIGN KEY ("team_id") REFERENCES "public"."teams" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create "users" table
CREATE TABLE IF NOT EXISTS "auth"."users" ("id" uuid NOT NULL DEFAULT gen_random_uuid(), "email" character varying NOT NULL, PRIMARY KEY ("id"));
-- Create "access_tokens" table
CREATE TABLE "public"."access_tokens" ("access_token" character varying NOT NULL, "user_id" uuid NOT NULL, "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY ("access_token"), CONSTRAINT "access_tokens_users_access_tokens" FOREIGN KEY ("user_id") REFERENCES "auth"."users" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create "users_teams" table
CREATE TABLE "public"."users_teams" ("id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY, "user_id" uuid NOT NULL, "team_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "users_teams_teams_teams" FOREIGN KEY ("team_id") REFERENCES "public"."teams" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION, CONSTRAINT "users_teams_users_users" FOREIGN KEY ("user_id") REFERENCES "auth"."users" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create index "usersteams_team_id_user_id" to table: "users_teams"
CREATE UNIQUE INDEX "usersteams_team_id_user_id" ON "public"."users_teams" ("team_id", "user_id");
