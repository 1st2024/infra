// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYX2/bNhD/KgS3RyVy0+xFb2mbdUaHrmgLbEBgDLR0tthSpEqenBqBvvtwpP5achKn",
	"f7Any+Lxjnf3u98ddcdTU5RGg0bHkzteCisKQLD+H+jd8hU9SM0TXgrMecS1KIAnzVrELXyppIWMJ2gr",
	"iLhLcygEbcJ9SYIOrdRbXtcRl9qh0CkcVToQOEVzTcKuNNqBP/flYkE/qdEIGulRlKWSqUBpdPzJGU3v",
	"en2/WtjwhP8S98GIw6qLr601NtjIwKVWlqSEJ/yFyBgdERzyOuKXi2c/3uZVhTlobLQyCHJk/PLHG39r",
	"kG1MpTOy+NvPCPEHsDuwrZt1CwGf42u9k9boorFeWlOCRQlj4I71LTMK3kaCZWbDMAcGAy3RIa4irszW",
	"BTUbUSnkyc1qAoNKqox5wYhLhMLNILRTLawVe/pfVmsl0+kR/84Bc7CHh2PSsbCFGcuMVnsm0hSck2sF",
	"bL338gii6L1YG6NAaDLmUGDlpsY++PfzsQBdFTy54Wvyj5ygGhPZnpZ8PlbRTIX3NXvTMURjvfO5Ceuq",
	"jnjI/CR9qclgelovzPxaxDfGFgI9ZeDzi95rqRG24IuiAOfE9pgi/tDxG0OtFjrusqGnmRMrCRofh7kg",
	"Owe3p8CWbawp2G0u05xAQqsti7LUgkDI5kyNqfghe600f2zOR0TeBYdi+BZuj4fx0QFobd5fwLOHW3ki",
	"gbSyEvcfiFCC7StfTx/NZ9BEs/RqDcKC/b2FWqi4f5FEeENGvtK8WG8+RywpxlelfAP7VplvdzmIzIs2",
	"De+fs6t3y7M3sO93C78r0KHUG+PpRKKiteuLF+zq3ZJHfAfWheAszp+dL8icKUGLUvKEPz9fnC+o4ATm",
	"3rcY9M4/bAGn4f1TOmRCqWEwqV4pM57PlxlP+GvAa9Jy0GsvTmwEHUUKpf7a8OTmgd4wyG+9mhDpTM+o",
	"fJY2lVJ7ZgErqyGbetd37DnrnYcxCfXt7n5ZEhqCyzs3gdXNqibqFNRZPCYDFZbGzaTmpa9gJpiG2wOs",
	"j7Pzzrg+PX4oeWGy/UFmikqhLIXFmOjzLBMoQtWlxlM8QZ7o/iVt+YqD3R9bbPapNSkCnjm01HX65jwt",
	"6kOVYw9fmfQzWOaFWNpIDfh9LbWw+zkKy/zOjVRwTCutsdb/E/j21QzPRqHrlhac78dTIna5qVTG1sRO",
	"5M7DhDSKzMihvrma9SdIsR1yhxNxPanEi+83kg3LblpkH3NoMpYLxxwKS23mf1ZTdRR4L77zea6P8t9r",
	"wPGsRax7hP6umwY3vCgdobBeJA5Aq6MJ0nQGX1uw+TBKvW0iq8yWYS7GuGro7FZiPjOz+RbzpQJfL02H",
	"aSbTPu3dLLuYDk0UxW9i92/A1DxxHzp5Isaai9FDspc/C485CBXGgVkk/uGXWZpD+nkOgWH9SAseq3of",
	"ugC7pQLtQnta/HyW4naWCx8I7m1Tup89/Vg6hei0ay079fe1rqfDbjhwPopFv989fmx3SqFdsChJzbA+",
	"SJbah3QtHpOuxU+k38FcO0Z6D5XVGDrxXX8jqGMLGwsuvw9R74PI+D4DXxE0TSpMomMoC2BomJI7uB9Z",
	"y872+87yqRQ+uNHMsOTlzOV6zGfBbja+Tj2NzX7sR5dwzW4O7GPdhv+M6f4T0BNB4bfZXRv0yiqe8Lvw",
	"qo53z+hqI6wUaxVCG1ZGfcvfr1wSx6KU53CxPs9gR470Ju8Ovyc633v7L5eO7hL/BQAA//8VU1DJ/BQA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
