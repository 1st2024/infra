openapi: 3.0.0
info:
  version: 0.1.0
  title: E2B API

servers:
  - url: https://api.e2b.dev/
    description: API endpoint
  - url: https://{instanceID}-{clientID}.api.e2b.dev/
    description: Instance endpoint without a specified port
    variables:
      instanceID:
        description: ID of the instance
        default: _instanceID
      clientID:
        description: ID of the client
        default: _clientID
  - url: https://{port}-{intanceID}-{clientID}.api.e2b.dev/
    description: Instance endpoint with a specificed port
    variables:
      instanceID:
        description: ID of the instance
        default: _instanceID
      clientID:
        description: ID of the client
        default: _clientID
      port:
        description: Devbook Daemon default port
        default: "49982"

components:
  securitySchemes:
    ApiKeyAuth:
      name: api_key
      type: apiKey
      in: header

  parameters:
    apiKey:
      name: api_key
      in: header
      required: true
      schema:
        type: string
    envID:
      name: envID
      in: path
      required: true
      schema:
        type: string
    instanceID:
      name: instanceID
      in: path
      required: true
      schema:
        type: string

  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    401:
      description: Authentication error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    500:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    EnvState:
      type: string
      enum:
        - Building
        - Failed
        - Done

    Env:
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string

    NewEnv:
      required:
        - buildConfig
      properties:
        name:
          type: string
        buildConfig:
          type: string

    EnvStateUpdate:
      required:
        - state
      properties:
        state:
          $ref: "#/components/schemas/EnvState"

    EnvNameUpdate:
      properties:
        name:
          type: string

    Instance:
      required:
        - envID
        - instanceID
        - clientID
      properties:
        envID:
          type: string
          description: Identifier of the environment
        instanceID:
          type: string
          description: Identifier of the instance
        clientID:
          type: string
          description: Identifier of the client

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error

tags:
  - name: instances
    description: Managing environment instances
  - name: envs
    description: Manage environments

paths:
  /health:
    get:
      description: Health check
      responses:
        200:
          description: Request was successful
        401:
          $ref: "#/components/responses/401"

  /sessions:
    get:
      description: List all sessions
      tags: [sessions]
      parameters:
        - $ref: "#/components/parameters/apiKey"
      responses:
        200:
          description: Successfully returned all sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Instance"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
    post:
      description: Create an instance of the environment
      tags: [sessions]
      parameters:
        - $ref: "#/components/parameters/apiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSession"
      responses:
        201:
          description: Successfully created a session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        401:
          $ref: "#/components/responses/401"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /sessions/{sessionID}:
    delete:
      description: Delete a session on the server
      tags: [sessions]
      parameters:
        - $ref: "#/components/parameters/apiKeyReq"
        - $ref: "#/components/parameters/sessionID"
      responses:
        204:
          description: Successfully deleted the session
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"

  /sessions/{sessionID}/refresh:
    post:
      description: Refresh the session extending its time to live
      tags: [sessions]
      parameters:
        - $ref: "#/components/parameters/apiKeyOpt"
        - $ref: "#/components/parameters/sessionID"
      responses:
        204:
          description: Successfully refreshed the session
        401:
          $ref: "#/components/responses/401"
        404:
          description: Error refreshing session - session not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /envs:
    get:
      description: List all environments
      tags: [envs]
      parameters:
        - $ref: "#/components/parameters/apiKey"
      responses:
        200:
          description: Successfully returned all environments
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Environment"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
    post:
      description: Create a new environment
      tags: [envs]
      parameters:
        - $ref: "#/components/parameters/apiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewEnvironment"
      responses:
        200:
          description: Successfully created an environment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"

  /envs/{envID}:
    delete:
      description: Delete the code snippet environment
      tags: [envs]
      parameters:
        - $ref: "#/components/parameters/apiKeyReq"
        - $ref: "#/components/parameters/codeSnippetID"
      responses:
        204:
          description: Successfully deleted the environment
        400:
          description: Cannot delete the environment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
    patch:
      description: Update the environment of the code snippet to match the edit environment
      tags: [envs]
      parameters:
        - $ref: "#/components/parameters/apiKeyReq"
        - $ref: "#/components/parameters/codeSnippetID"
      responses:
        204:
          description: Updated the edit environment for code snippet
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"

  /envs/{envID}/state:
    put:
      description: Update the state of the environment
      tags: [envs]
      parameters:
        - $ref: "#/components/parameters/apiKeyReq"
        - $ref: "#/components/parameters/codeSnippetID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentStateUpdate"
      responses:
        204:
          description: Updated the state of environment
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"

  /envs/{envID}/title:
    put:
      description: Update the title of the environment
      tags: [envs]
      parameters:
        - $ref: "#/components/parameters/apiKey"
        - $ref: "#/components/parameters/envID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvTitleUpdate"
      responses:
        204:
          description: Updated the title of the env
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
