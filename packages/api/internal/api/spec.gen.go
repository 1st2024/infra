// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/0uV9kdbGa1mq/8GAAD//9Ln7eVZMwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
