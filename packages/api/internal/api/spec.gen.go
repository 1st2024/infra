// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"f/QyrmS1P68ZWi7K/wIAAP//zALcxfUbAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
