/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/health": {
    /** Health check */
    readonly get: {
      readonly responses: {
        /** Request was successful */
        readonly 200: unknown;
      };
    };
  };
  readonly "/sessions": {
    /** List all sessions */
    readonly get: {
      readonly responses: {
        /** Successfully returned all sessions */
        readonly 200: {
          readonly content: {
            readonly "application/json": readonly components["schemas"]["Session"][];
          };
        };
        /** Error listing sessions */
        readonly 500: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a session on the server */
    readonly post: {
      readonly responses: {
        /** Successfully created a session */
        readonly 201: {
          readonly content: {
            readonly "application/json": components["schemas"]["Session"];
          };
        };
        /** Bad request */
        readonly 400: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
        /** Error creating session */
        readonly 500: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
      };
      readonly requestBody: {
        readonly content: {
          readonly "application/json": components["schemas"]["NewSession"];
        };
      };
    };
  };
  readonly "/sessions/{sessionID}": {
    /** Delete a session on the server */
    readonly delete: {
      readonly parameters: {
        readonly path: {
          readonly sessionID: string;
        };
      };
      readonly responses: {
        /** Successfully deleted the session */
        readonly 204: never;
        /** Error deleting the session */
        readonly 500: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  readonly "/sessions/{sessionID}/refresh": {
    /** Refresh the session extending its time to live */
    readonly put: {
      readonly parameters: {
        readonly path: {
          readonly sessionID: string;
        };
      };
      readonly responses: {
        /** Successfully refreshed the session */
        readonly 204: never;
        /** Error refreshing session - session not found */
        readonly 404: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  readonly "/envs/{codeSnippetID}": {
    /** Create a new env for a code snippet */
    readonly post: {
      readonly parameters: {
        readonly path: {
          readonly codeSnippetID: string;
        };
      };
      readonly responses: {
        /** Successfully created an environment */
        readonly 204: never;
        /** Cannot create a new environment */
        readonly 400: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
        /** Server error when creating new environment */
        readonly 500: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
      };
      readonly requestBody: {
        readonly content: {
          readonly "application/json": components["schemas"]["NewEnvironment"];
        };
      };
    };
    /** Delete the code snippet environment */
    readonly delete: {
      readonly parameters: {
        readonly path: {
          readonly codeSnippetID: string;
        };
      };
      readonly responses: {
        /** Successfully deleted the environment */
        readonly 204: never;
        /** Cannot delete the environment */
        readonly 400: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
        /** Server error when deleting the environment */
        readonly 500: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  readonly "/envs/{codeSnippetID}/publish": {
    /** Publish the edit environment of the code snippet */
    readonly post: {
      readonly parameters: {
        readonly path: {
          readonly codeSnippetID: string;
        };
      };
      readonly responses: {
        /** Publishing the edit environment for code snippet */
        readonly 204: never;
        /** Error publishing the edit environment */
        readonly 500: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  readonly "/envs/{codeSnippetID}/state": {
    /** Update the state of the environment */
    readonly put: {
      readonly parameters: {
        readonly path: {
          readonly codeSnippetID: string;
        };
      };
      readonly responses: {
        /** Publishing the edit environment for code snippet */
        readonly 204: never;
        /** Error publishing the edit environment */
        readonly 400: {
          readonly content: {
            readonly "application/json": components["schemas"]["Error"];
          };
        };
      };
      readonly requestBody: {
        readonly content: {
          readonly "application/json": components["schemas"]["EnvironmentStateUpdate"];
        };
      };
    };
  };
}

export interface components {
  readonly schemas: {
    /** @enum {string} */
    readonly Template: "Nodejs" | "Golang" | "Bash" | "Python";
    /** @enum {string} */
    readonly EnvironmentState: "Building" | "Failed" | "Done";
    readonly NewEnvironment: {
      readonly template: components["schemas"]["Template"];
      readonly deps: readonly string[];
    };
    readonly EnvironmentStateUpdate: {
      readonly state: components["schemas"]["EnvironmentState"];
    };
    readonly NewSession: {
      /** @description Option determining if the session is a shared persistent edit session */
      readonly editEnabled?: boolean;
      /** @description Identifier of a code snippet which which is the environment associated */
      readonly codeSnippetID: string;
    };
    readonly Session: {
      /** @description Identifier of a code snippet which which is the environment associated */
      readonly codeSnippetID: string;
      /** @description Information if the session is a shared persistent edit session */
      readonly editEnabled: boolean;
      /** @description Identifier of the session */
      readonly sessionID: string;
      /** @description Identifier of the client */
      readonly clientID: string;
    };
    readonly Error: {
      /**
       * Format: int32
       * @description Error code
       */
      readonly code: number;
      /** @description Error */
      readonly message: string;
    };
  };
}

export interface operations {}

export interface external {}
