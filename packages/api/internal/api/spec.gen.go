// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
