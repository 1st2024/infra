// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9/+uFSTxX7j7zZuLzf8HAAD//9YKLfiFiAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
