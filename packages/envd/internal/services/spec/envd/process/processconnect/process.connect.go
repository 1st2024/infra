// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envd/process/process.proto

package processconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	process "github.com/e2b-dev/infra/packages/envd/internal/services/spec/envd/process"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProcessServiceName is the fully-qualified name of the ProcessService service.
	ProcessServiceName = "envd.process.ProcessService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProcessServiceListProcedure is the fully-qualified name of the ProcessService's List RPC.
	ProcessServiceListProcedure = "/envd.process.ProcessService/List"
	// ProcessServiceConnectProcedure is the fully-qualified name of the ProcessService's Connect RPC.
	ProcessServiceConnectProcedure = "/envd.process.ProcessService/Connect"
	// ProcessServiceStartProcedure is the fully-qualified name of the ProcessService's Start RPC.
	ProcessServiceStartProcedure = "/envd.process.ProcessService/Start"
	// ProcessServiceUpdateProcedure is the fully-qualified name of the ProcessService's Update RPC.
	ProcessServiceUpdateProcedure = "/envd.process.ProcessService/Update"
	// ProcessServiceStreamInputProcedure is the fully-qualified name of the ProcessService's
	// StreamInput RPC.
	ProcessServiceStreamInputProcedure = "/envd.process.ProcessService/StreamInput"
	// ProcessServiceSendInputProcedure is the fully-qualified name of the ProcessService's SendInput
	// RPC.
	ProcessServiceSendInputProcedure = "/envd.process.ProcessService/SendInput"
	// ProcessServiceSendSignalProcedure is the fully-qualified name of the ProcessService's SendSignal
	// RPC.
	ProcessServiceSendSignalProcedure = "/envd.process.ProcessService/SendSignal"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	processServiceServiceDescriptor           = process.File_envd_process_process_proto.Services().ByName("ProcessService")
	processServiceListMethodDescriptor        = processServiceServiceDescriptor.Methods().ByName("List")
	processServiceConnectMethodDescriptor     = processServiceServiceDescriptor.Methods().ByName("Connect")
	processServiceStartMethodDescriptor       = processServiceServiceDescriptor.Methods().ByName("Start")
	processServiceUpdateMethodDescriptor      = processServiceServiceDescriptor.Methods().ByName("Update")
	processServiceStreamInputMethodDescriptor = processServiceServiceDescriptor.Methods().ByName("StreamInput")
	processServiceSendInputMethodDescriptor   = processServiceServiceDescriptor.Methods().ByName("SendInput")
	processServiceSendSignalMethodDescriptor  = processServiceServiceDescriptor.Methods().ByName("SendSignal")
)

// ProcessServiceClient is a client for the envd.process.ProcessService service.
type ProcessServiceClient interface {
	List(context.Context, *connect.Request[process.ListRequest]) (*connect.Response[process.ListResponse], error)
	Connect(context.Context, *connect.Request[process.ConnectRequest]) (*connect.ServerStreamForClient[process.ConnectResponse], error)
	Start(context.Context, *connect.Request[process.StartRequest]) (*connect.ServerStreamForClient[process.StartResponse], error)
	Update(context.Context, *connect.Request[process.UpdateRequest]) (*connect.Response[process.UpdateResponse], error)
	// Client input stream ensures ordering of messages
	StreamInput(context.Context) *connect.ClientStreamForClient[process.StreamInputRequest, process.StreamInputResponse]
	SendInput(context.Context, *connect.Request[process.SendInputRequest]) (*connect.Response[process.SendInputResponse], error)
	SendSignal(context.Context, *connect.Request[process.SendSignalRequest]) (*connect.Response[process.SendSignalResponse], error)
}

// NewProcessServiceClient constructs a client for the envd.process.ProcessService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProcessServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProcessServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &processServiceClient{
		list: connect.NewClient[process.ListRequest, process.ListResponse](
			httpClient,
			baseURL+ProcessServiceListProcedure,
			connect.WithSchema(processServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		connect: connect.NewClient[process.ConnectRequest, process.ConnectResponse](
			httpClient,
			baseURL+ProcessServiceConnectProcedure,
			connect.WithSchema(processServiceConnectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		start: connect.NewClient[process.StartRequest, process.StartResponse](
			httpClient,
			baseURL+ProcessServiceStartProcedure,
			connect.WithSchema(processServiceStartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[process.UpdateRequest, process.UpdateResponse](
			httpClient,
			baseURL+ProcessServiceUpdateProcedure,
			connect.WithSchema(processServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamInput: connect.NewClient[process.StreamInputRequest, process.StreamInputResponse](
			httpClient,
			baseURL+ProcessServiceStreamInputProcedure,
			connect.WithSchema(processServiceStreamInputMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendInput: connect.NewClient[process.SendInputRequest, process.SendInputResponse](
			httpClient,
			baseURL+ProcessServiceSendInputProcedure,
			connect.WithSchema(processServiceSendInputMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendSignal: connect.NewClient[process.SendSignalRequest, process.SendSignalResponse](
			httpClient,
			baseURL+ProcessServiceSendSignalProcedure,
			connect.WithSchema(processServiceSendSignalMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// processServiceClient implements ProcessServiceClient.
type processServiceClient struct {
	list        *connect.Client[process.ListRequest, process.ListResponse]
	connect     *connect.Client[process.ConnectRequest, process.ConnectResponse]
	start       *connect.Client[process.StartRequest, process.StartResponse]
	update      *connect.Client[process.UpdateRequest, process.UpdateResponse]
	streamInput *connect.Client[process.StreamInputRequest, process.StreamInputResponse]
	sendInput   *connect.Client[process.SendInputRequest, process.SendInputResponse]
	sendSignal  *connect.Client[process.SendSignalRequest, process.SendSignalResponse]
}

// List calls envd.process.ProcessService.List.
func (c *processServiceClient) List(ctx context.Context, req *connect.Request[process.ListRequest]) (*connect.Response[process.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Connect calls envd.process.ProcessService.Connect.
func (c *processServiceClient) Connect(ctx context.Context, req *connect.Request[process.ConnectRequest]) (*connect.ServerStreamForClient[process.ConnectResponse], error) {
	return c.connect.CallServerStream(ctx, req)
}

// Start calls envd.process.ProcessService.Start.
func (c *processServiceClient) Start(ctx context.Context, req *connect.Request[process.StartRequest]) (*connect.ServerStreamForClient[process.StartResponse], error) {
	return c.start.CallServerStream(ctx, req)
}

// Update calls envd.process.ProcessService.Update.
func (c *processServiceClient) Update(ctx context.Context, req *connect.Request[process.UpdateRequest]) (*connect.Response[process.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// StreamInput calls envd.process.ProcessService.StreamInput.
func (c *processServiceClient) StreamInput(ctx context.Context) *connect.ClientStreamForClient[process.StreamInputRequest, process.StreamInputResponse] {
	return c.streamInput.CallClientStream(ctx)
}

// SendInput calls envd.process.ProcessService.SendInput.
func (c *processServiceClient) SendInput(ctx context.Context, req *connect.Request[process.SendInputRequest]) (*connect.Response[process.SendInputResponse], error) {
	return c.sendInput.CallUnary(ctx, req)
}

// SendSignal calls envd.process.ProcessService.SendSignal.
func (c *processServiceClient) SendSignal(ctx context.Context, req *connect.Request[process.SendSignalRequest]) (*connect.Response[process.SendSignalResponse], error) {
	return c.sendSignal.CallUnary(ctx, req)
}

// ProcessServiceHandler is an implementation of the envd.process.ProcessService service.
type ProcessServiceHandler interface {
	List(context.Context, *connect.Request[process.ListRequest]) (*connect.Response[process.ListResponse], error)
	Connect(context.Context, *connect.Request[process.ConnectRequest], *connect.ServerStream[process.ConnectResponse]) error
	Start(context.Context, *connect.Request[process.StartRequest], *connect.ServerStream[process.StartResponse]) error
	Update(context.Context, *connect.Request[process.UpdateRequest]) (*connect.Response[process.UpdateResponse], error)
	// Client input stream ensures ordering of messages
	StreamInput(context.Context, *connect.ClientStream[process.StreamInputRequest]) (*connect.Response[process.StreamInputResponse], error)
	SendInput(context.Context, *connect.Request[process.SendInputRequest]) (*connect.Response[process.SendInputResponse], error)
	SendSignal(context.Context, *connect.Request[process.SendSignalRequest]) (*connect.Response[process.SendSignalResponse], error)
}

// NewProcessServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProcessServiceHandler(svc ProcessServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	processServiceListHandler := connect.NewUnaryHandler(
		ProcessServiceListProcedure,
		svc.List,
		connect.WithSchema(processServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	processServiceConnectHandler := connect.NewServerStreamHandler(
		ProcessServiceConnectProcedure,
		svc.Connect,
		connect.WithSchema(processServiceConnectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	processServiceStartHandler := connect.NewServerStreamHandler(
		ProcessServiceStartProcedure,
		svc.Start,
		connect.WithSchema(processServiceStartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	processServiceUpdateHandler := connect.NewUnaryHandler(
		ProcessServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(processServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	processServiceStreamInputHandler := connect.NewClientStreamHandler(
		ProcessServiceStreamInputProcedure,
		svc.StreamInput,
		connect.WithSchema(processServiceStreamInputMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	processServiceSendInputHandler := connect.NewUnaryHandler(
		ProcessServiceSendInputProcedure,
		svc.SendInput,
		connect.WithSchema(processServiceSendInputMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	processServiceSendSignalHandler := connect.NewUnaryHandler(
		ProcessServiceSendSignalProcedure,
		svc.SendSignal,
		connect.WithSchema(processServiceSendSignalMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envd.process.ProcessService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProcessServiceListProcedure:
			processServiceListHandler.ServeHTTP(w, r)
		case ProcessServiceConnectProcedure:
			processServiceConnectHandler.ServeHTTP(w, r)
		case ProcessServiceStartProcedure:
			processServiceStartHandler.ServeHTTP(w, r)
		case ProcessServiceUpdateProcedure:
			processServiceUpdateHandler.ServeHTTP(w, r)
		case ProcessServiceStreamInputProcedure:
			processServiceStreamInputHandler.ServeHTTP(w, r)
		case ProcessServiceSendInputProcedure:
			processServiceSendInputHandler.ServeHTTP(w, r)
		case ProcessServiceSendSignalProcedure:
			processServiceSendSignalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProcessServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProcessServiceHandler struct{}

func (UnimplementedProcessServiceHandler) List(context.Context, *connect.Request[process.ListRequest]) (*connect.Response[process.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.process.ProcessService.List is not implemented"))
}

func (UnimplementedProcessServiceHandler) Connect(context.Context, *connect.Request[process.ConnectRequest], *connect.ServerStream[process.ConnectResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envd.process.ProcessService.Connect is not implemented"))
}

func (UnimplementedProcessServiceHandler) Start(context.Context, *connect.Request[process.StartRequest], *connect.ServerStream[process.StartResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envd.process.ProcessService.Start is not implemented"))
}

func (UnimplementedProcessServiceHandler) Update(context.Context, *connect.Request[process.UpdateRequest]) (*connect.Response[process.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.process.ProcessService.Update is not implemented"))
}

func (UnimplementedProcessServiceHandler) StreamInput(context.Context, *connect.ClientStream[process.StreamInputRequest]) (*connect.Response[process.StreamInputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.process.ProcessService.StreamInput is not implemented"))
}

func (UnimplementedProcessServiceHandler) SendInput(context.Context, *connect.Request[process.SendInputRequest]) (*connect.Response[process.SendInputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.process.ProcessService.SendInput is not implemented"))
}

func (UnimplementedProcessServiceHandler) SendSignal(context.Context, *connect.Request[process.SendSignalRequest]) (*connect.Response[process.SendSignalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envd.process.ProcessService.SendSignal is not implemented"))
}
